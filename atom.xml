<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://cunyu1943.github.io/atom.xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
  <id>https://cunyu1943.github.io/</id>
  <title>JavaPark</title>
  <subtitle>分享编程学习、面试求职、效率工具等方面内容。</subtitle>
  <icon>https://cunyu1943.github.io/logo.svg</icon>
  <updated>2023-08-27T01:20:12.872Z</updated>
  <generator>vuepress-plugin-feed2</generator>
  <link rel="self" href="https://cunyu1943.github.io/atom.xml"/>
  <link rel="alternate" href="https://cunyu1943.github.io/"/>
  <category term="你问我答"/>
  <category term="Java 基础"/>
  <category term="MySQL 教程"/>
  <category term="博客搭建"/>
  <category term="开发工具"/>
  <category term="效率工具"/>
  <category term="IDEA 教程"/>
  <category term="好物周刊"/>
  <entry>
    <title type="text"></title>
    <id>https://cunyu1943.github.io/frontmatter.html</id>
    <link href="https://cunyu1943.github.io/frontmatter.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
]]></summary>
    <content type="html"><![CDATA[<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
</div>
]]></content>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">JavaPark(Java 自学指南)</title>
    <id>https://cunyu1943.github.io/home.html</id>
    <link href="https://cunyu1943.github.io/home.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> JavaPark(Java 自学指南)</h1>
]]></summary>
    <content type="html"><![CDATA[<h1> JavaPark(Java 自学指南)</h1>
]]></content>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">想学好 Java 基础，应该去哪儿刷题</title>
    <id>https://cunyu1943.github.io/QA/20230402-where-exercise-java-basics.html</id>
    <link href="https://cunyu1943.github.io/QA/20230402-where-exercise-java-basics.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 想学好 Java 基础，应该去哪儿刷题</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>其实无论是哪门编程语言，只要把相关语法掌握之后，更重要的是一些算法、编程思想的提高。</p>
<p>既然已经对 <code>Java</code> 有了一定的了解了，那肯定基本语法没啥问题了，那在这里就提名几个常用的刷题网站，用来巩固 Java 基础的同时锻炼自己的编程思想，提高自己的编程能力！</p>]]></summary>
    <content type="html"><![CDATA[<h1> 想学好 Java 基础，应该去哪儿刷题</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>其实无论是哪门编程语言，只要把相关语法掌握之后，更重要的是一些算法、编程思想的提高。</p>
<p>既然已经对 <code>Java</code> 有了一定的了解了，那肯定基本语法没啥问题了，那在这里就提名几个常用的刷题网站，用来巩固 Java 基础的同时锻炼自己的编程思想，提高自己的编程能力！</p>
<h2> 网站推荐</h2>
<h3> 牛客网</h3>
<ul>
<li><a href="https://www.nowcoder.com/" target="_blank" rel="noopener noreferrer">牛客网</a></li>
</ul>
<p>说白了，我们学习 <code>Java</code>，最终目的不都是为了找一个好点的工作么。既然如此，那就一开始和招聘挂钩吧。在这里推荐几个题库，用于锻炼自己 <code>Java</code> 基础。</p>
<ul>
<li><a href="https://www.nowcoder.com/exam/intelligent?questionJobId=10&amp;tagId=21003" target="_blank" rel="noopener noreferrer">牛客网专项练习</a></li>
</ul>
<p>专项练习下的编程语言专栏中的 <code>Java</code> 选项，是巩固自己所学 <code>Java</code> 基础知识的绝佳练习。题目均以选择题的形式给出，可以对自己所学查漏补缺。遇到不会的题目，也可以查看官方给出的答案或者大家在评论区给出的解析。</p>
<p>除了 <code>Java</code> 基础之外，作为一个 <code>CRUD</code> 打工人，对于数据库的操作怎么能不熟练呢？同样的，牛客提供了针对不同的需求，给出了不同级别的练习题。</p>
<ol>
<li>
<p><a href="https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=199" target="_blank" rel="noopener noreferrer"><strong>针对非技术小白入门</strong></a></p>
</li>
<li>
<p><a href="https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=341" target="_blank" rel="noopener noreferrer"><strong>SQL 基础进阶</strong></a></p>
</li>
<li>
<p><a href="https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=240" target="_blank" rel="noopener noreferrer"><strong>SQL 进阶挑战</strong></a></p>
</li>
<li>
<p><a href="https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=298" target="_blank" rel="noopener noreferrer"><strong>MySQL 必知必会</strong></a></p>
</li>
<li>
<p><a href="https://www.nowcoder.com/exam/oj?page=1&amp;tab=SQL%E7%AF%87&amp;topicId=268" target="_blank" rel="noopener noreferrer"><strong>大厂面试实战</strong></a></p>
</li>
</ol>
<p>除了以上针对 <code>Java</code> 基础以及 <code>SQL</code> 的相关练习之外，还是以过来人的身份建议楼主不要仅局限于语言本身，还是要学一些数据结构 + 算法方面的知识的，这样能帮你在工作中提高不少的效率。同时，设想一下，假设在面试时，一个同样的算法题，你实现的复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> ，而其他人实现的复杂度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，那你觉得最终企业会招谁呢？</p>
<p>算法练习的网站也比较多了，这里就推荐几个最常用的。</p>
<h3> LeetCode</h3>
<ul>
<li><a href="https://leetcode.cn/?utm_source=LCUS&amp;utm_medium=ip_redirect&amp;utm_campaign=transfer2china" target="_blank" rel="noopener noreferrer">LeetCode 美国站</a></li>
</ul>
<p>首先推荐的是 <code>LeetCode</code> 美国站。当然，这需要你的英语基础比较好，如果你觉得你的英语还不错，那么优先推荐去这里。如果你英语不是那么好，那也没关系。<code>LeetCode</code> 也做了本土化，提供了中文站，你同样可以在这里刷题。</p>
<ul>
<li><a href="https://leetcode.cn/" target="_blank" rel="noopener noreferrer">LeetCode 中国站</a></li>
</ul>
<h3> 牛客网</h3>
<p>没错，又是它。现在国内有很多企业都是在牛客笔试的，为了尽快适应招聘面试，推荐在这里刷算法题，这样在笔试时也不会因为环境而感到陌生，尽快上手。</p>
<p>这里推荐几个题库，如果题库里的题目刷起来得心应手，那笔试还有啥怕的~~</p>
<ol>
<li>
<p><a href="https://www.nowcoder.com/exam/oj/ta?tpId=13" target="_blank" rel="noopener noreferrer"><strong>剑指 Offer</strong></a>：剖析了 80 个典型的编程面试题，系统整理基础知识、代码质量、解题思路、优化效率和综合能力这 5 个面试要点。</p>
</li>
<li>
<p><a href="https://www.nowcoder.com/exam/oj?page=1&amp;tab=%E5%90%8D%E4%BC%81%E7%9C%9F%E9%A2%98&amp;topicId=182" target="_blank" rel="noopener noreferrer"><strong>名企真题</strong></a>：汇聚了字节跳动、美团、百度、腾讯、华为、京东、小米、网易、快手等一众大厂笔试真题，虽然笔试时刷到原题的概率较小，但摸索下大厂的出题的套路和设计的知识点也未尝不可！</p>
</li>
</ol>
<p>除了以上两个题库，也可以去 <code>LeetCode</code> 刷下《剑指 Offer》后续版本的题目。</p>
<ul>
<li><a href="https://leetcode.cn/problemset/all/?page=1&amp;listId=e8X3pBZi" target="_blank" rel="noopener noreferrer">《剑指 Offer（专线突击版）》</a></li>
<li><a href="https://leetcode.cn/problemset/all/?page=1&amp;listId=xb9nqhhg" target="_blank" rel="noopener noreferrer">《剑指 Offer（第 2 版）》</a></li>
</ul>
<h3> 赛码网</h3>
<ul>
<li><a href="https://www.acmcoder.com/#/home" target="_blank" rel="noopener noreferrer">赛码网</a></li>
</ul>
<p>智能在线考试专家，除开牛客之外，也有不少企业在这里进行招聘笔试，比如阿里、京东、头条、美团、滴滴、小米等公司校招考试都在用。</p>
<h2> 最后</h2>
<p>推荐仅限于推荐，最重要的还是要行动起来。就算一开始很吃力，那也要坚持！</p>
<p>水滴石穿，非一日之功。我相信有付出，就一定会有收获的那一天！</p>
<p>关注我，<code>Java</code> 学习不迷路！风里雨里，我在这里等你！</p>
]]></content>
    <category term="你问我答"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">你问我答</title>
    <id>https://cunyu1943.github.io/QA/</id>
    <link href="https://cunyu1943.github.io/QA/"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">创刊寄语</title>
    <id>https://cunyu1943.github.io/weekly/</id>
    <link href="https://cunyu1943.github.io/weekly/"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 创刊寄语</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 一、前言</h2>
<p>村雨遥的好物周刊，记录每周看到的有价值的信息，主要针对计算机领域，每周五发布。专栏目的在于记录让自己有印象的信息做一个备份及分享，阅读渠道如下：</p>
<ul>
<li><a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">博客</a> | <a href="https://cunyu1943.gitee.io/" target="_blank" rel="noopener noreferrer">博客(国内)</a></li>
<li><a href="https://github.com/cunyu1943/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></li>
<li><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzIyNTg2MjkzNw==&amp;action=getalbum&amp;album_id=2501145320567963650&amp;scene=173&amp;from_msgid=2247497779&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" target="_blank" rel="noopener noreferrer">公众号</a>：移动端推荐</li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h1> 创刊寄语</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 一、前言</h2>
<p>村雨遥的好物周刊，记录每周看到的有价值的信息，主要针对计算机领域，每周五发布。专栏目的在于记录让自己有印象的信息做一个备份及分享，阅读渠道如下：</p>
<ul>
<li><a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">博客</a> | <a href="https://cunyu1943.gitee.io/" target="_blank" rel="noopener noreferrer">博客(国内)</a></li>
<li><a href="https://github.com/cunyu1943/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></li>
<li><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzIyNTg2MjkzNw==&amp;action=getalbum&amp;album_id=2501145320567963650&amp;scene=173&amp;from_msgid=2247497779&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" target="_blank" rel="noopener noreferrer">公众号</a>：移动端推荐</li>
</ul>
<p>如果你想推荐或自荐项目/网站/软件/插件/资料等任何资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/weekly/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong><a href="/contact/wechat.png">个人微信：cunyu1943</a></strong> 和我交流。</p>

<h2> 二、介绍</h2>
<p>互联网时代，各种信息层出不穷。而从众多信息中过滤出需要的，并将这些信息聚合起来就是一项十分重要的技能。</p>
<p>作为一名程序员，每天在网上冲浪时经常会浏览到各种好玩的项目、资源、软件以及资源等。而久而久之，一些好的资源渐渐就淹没在信息流中了，后来想再去找也不知道该去哪儿查。</p>
<p>针对这个问题，给我个人感觉非常不好，不知道你是否也会有这样的感觉呢？于是 <strong>好物周刊</strong> 诞生了，周刊于我而言既是一种留存，也是一种分享，希望我能一直坚持下去，欢迎大家监督。</p>
<p>如果大家感兴趣，请持续关注我的的周刊专栏<a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">电子书</a>，也请移步<a href="https://github.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Gitee</a> 给我一个<code>Star</code>支持下吧。</p>
<p>好物周刊开始于 <strong>2023.04.15</strong>，如果看到这篇文章时我依旧在坚持更新，那就是最好的消息。</p>
<h2> 三、交流</h2>
<p>欢迎关注<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzIyNTg2MjkzNw==&amp;action=getalbum&amp;album_id=2501145320567963650&amp;scene=173&amp;from_msgid=2247497779&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" target="_blank" rel="noopener noreferrer">公众号</a>|<a href="https://cunyu1943.github.io/" target="_blank" rel="noopener noreferrer">博客</a>一起交流（每周在公众号首发）：</p>

<h2> 四、赞助</h2>
<p>开源不易，如果你觉得本仓库对你有帮助，或许可以请我喝杯咖啡，不靠它生存但仍希望得到你的鼓励。</p>
<figure><img src="/award/donate.svg" alt="" width="150" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 五、贡献</h2>
<ol>
<li>
<p>如果您对本项目有任何建议或者发现文中内容有错误的，欢迎私信我或者提交 <a href="https://github.com/cunyu1943/JavaPark/issues" target="_blank" rel="noopener noreferrer"><code>issues</code></a> 指正。</p>
</li>
<li>
<p>对于项目中未涉及到的知识点，欢迎提交 <code>PR</code>。</p>
</li>
</ol>
]]></content>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">Java 入门简介</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220701-intro-to-java.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220701-intro-to-java.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Java 入门简介</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/aGz8CBOK5mW8xjAlstlMQw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/aGz8CBOK5mW8xjAlstlMQw</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> Java 入门简介</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/aGz8CBOK5mW8xjAlstlMQw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/aGz8CBOK5mW8xjAlstlMQw</a></p>
</div>
<h2> 1. 前言</h2>
<p>既然要学习一门技术，那么就先来了解下它的历史，我们为什么要使用它，以及我们能用它来干啥。</p>
<h2> 2. 历史背景</h2>
<p>1990 年代初，<code>Sun</code> 公司的詹姆斯·高斯林等人为了实现电视机、电话、闹钟等家用电器的控制和通信，开发了一套用于设置在家用电器等小型系统中的编程语言。在当时，这门语言被命名为 <code>Oka</code>。但由于市场需求不高，所以该计划被逐渐放弃。</p>
<p>随着 1990 年代互联网的发展，<code>Sun</code> 公司发现 <code>Oka</code> 语言在互联网中的应用前景广泛。于是决定对 <code>Oka</code> 进行改造，并在 1995 年 5 月以 <code>Java</code> 的名义正式发布。</p>
<p>随着互联网的迅猛发展，Java 也得以逐渐成为重要的网络编程语言，詹姆斯·高斯林也被大家公认为 <code>Java</code> 之父。</p>
<p>到了 2009 年， <code>Sun</code> 公司被 <code>Oracle</code> 公司所收购，自此 <code>Java</code> 成为 <code>Oracle</code> 公司的一大产品直至今日。</p>
<p>以下是截止到本文写作时间（2022 年 7 月 23 日）<code>Java</code> 的历史年表，累计经过了 18 次主要版本更新，目前来到了 <code>Java SE</code> 18。而 <code>Java SE</code> 19 早期预览版也已经流出，根据官方给出的发布时间表，大概会在 9 月份发布 <code>Java SE</code> 19 的 <code>GA</code> 版本。不过虽然 <code>Java</code> 已经经历了这么多版本的更新，但国内目前用的最多的应该还是 Java 1.8 版本。而出于对稳定性的考虑，企业开发更喜欢 <code>LTS</code> 版本，这也是为什么至今 <code>Java</code> 1.8 还占有如此高的市场比例。</p>
<table>
<thead>
<tr>
<th style="text-align:center">版本</th>
<th style="text-align:center">发布日期</th>
<th style="text-align:center">主要事件</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">JDK Beta</td>
<td style="text-align:center">1995</td>
<td style="text-align:center"><code>Java</code> 语言发布，用 <code>Java</code> 实现的浏览器和 <code>Java Applet</code> 被大量应用</td>
</tr>
<tr>
<td style="text-align:center">JDK 1.0</td>
<td style="text-align:center">1996 年 1 月</td>
<td style="text-align:center">奠定了 <code>JDK</code>、<code>JRE</code>、<code>JVM</code> 的体系结构</td>
</tr>
<tr>
<td style="text-align:center">JDK 1.1</td>
<td style="text-align:center">1997 年 2 月</td>
<td style="text-align:center">加入 <code>JIT</code>，提升 <code>JDK</code> 效率</td>
</tr>
<tr>
<td style="text-align:center">J2SE 1.2</td>
<td style="text-align:center">1998 年 12 月</td>
<td style="text-align:center">确立 <code>J2SE</code>、<code>J2EE</code>、<code>J2ME</code> 产品结构</td>
</tr>
<tr>
<td style="text-align:center">J2SE 1.3</td>
<td style="text-align:center">2000 年 5 月</td>
<td style="text-align:center">内置 HotSpot JVM</td>
</tr>
<tr>
<td style="text-align:center">J2SE 1.4</td>
<td style="text-align:center">2002 年 2 月</td>
<td style="text-align:center">XML 处理、断言、支持正则表达式</td>
</tr>
<tr>
<td style="text-align:center">J2SE 5.0</td>
<td style="text-align:center">2004 年 9 月</td>
<td style="text-align:center">静态导入、泛型、for-each 循环、自动拆，装箱、枚举、可变参数</td>
</tr>
<tr>
<td style="text-align:center">Java SE 6</td>
<td style="text-align:center">2006 年 12 月</td>
<td style="text-align:center">提供动态语言支持、同步垃圾回收</td>
</tr>
<tr>
<td style="text-align:center">Java SE 7</td>
<td style="text-align:center">2011 年 7 月</td>
<td style="text-align:center">字符串的 switch 语句、多异常捕抓</td>
</tr>
<tr>
<td style="text-align:center">Java SE 8 (LTS)</td>
<td style="text-align:center">2014 年 3 月</td>
<td style="text-align:center">Lambda 表达式</td>
</tr>
<tr>
<td style="text-align:center">Java SE 9</td>
<td style="text-align:center">2017 年 9 月</td>
<td style="text-align:center">轻量级 json API、垃圾收集机制更新</td>
</tr>
<tr>
<td style="text-align:center">Java SE 10</td>
<td style="text-align:center">2018 年 3 月</td>
<td style="text-align:center">局部变量类型推断，Java 后续版本快速迭代更新</td>
</tr>
<tr>
<td style="text-align:center">Java SE 11 (LTS)</td>
<td style="text-align:center">2018 年 9 月</td>
<td style="text-align:center">常用类增强，Java 11 是继 Java 8 之后的首个长期支持本版</td>
</tr>
<tr>
<td style="text-align:center">Java SE 12</td>
<td style="text-align:center">2019 年 3 月</td>
<td style="text-align:center">switch 表达式增强</td>
</tr>
<tr>
<td style="text-align:center">Java SE 13</td>
<td style="text-align:center">2019 年 9 月</td>
<td style="text-align:center">文本块支持</td>
</tr>
<tr>
<td style="text-align:center">Java SE 14</td>
<td style="text-align:center">2020 年 3 月</td>
<td style="text-align:center"><code>instanceof</code> 支持模式匹配</td>
</tr>
<tr>
<td style="text-align:center">Java SE 15</td>
<td style="text-align:center">2020 年 9 月</td>
<td style="text-align:center"><code>EdDSA</code> 数字签名算法、 密封类、隐藏类</td>
</tr>
<tr>
<td style="text-align:center">Java SE 16</td>
<td style="text-align:center">2021 年 3 月</td>
<td style="text-align:center">启用 C++ 14 语言特性、Vector API</td>
</tr>
<tr>
<td style="text-align:center"><strong>Java SE 17 (LTS)</strong></td>
<td style="text-align:center">2021 年 9 月</td>
<td style="text-align:center">恢复总是严格的浮点语义、增强型伪随机数生成器</td>
</tr>
<tr>
<td style="text-align:center">Java SE 18</td>
<td style="text-align:center">2022 年 3 月</td>
<td style="text-align:center">默认 UTF-8 编码、代码片段、简单的网络服务器</td>
</tr>
</tbody>
</table>
<h2> 3. 为什么使用 Java</h2>
<p>既然编程语言有那么多，那我们为什么要使用 Java 语言呢？以下就来看看 Java 被广泛使用的几个原因。</p>
<ol>
<li><strong>世界范围内流行，国内使用最为广泛的编程语言之一。</strong></li>
</ol>
<p>以下是截止 2022 年 7 月 TIOBE 统计的编程语言排行榜，可以看到 Java 处于前三的位置。而从历年编程语言所占市场份额趋势图也可以看出，Java 虽然没有一直独占鳌头，但绝大数时间都是占据领先地位。</p>
<p><br>
</p>
<ol start="2">
<li><strong>移植性高</strong></li>
</ol>
<p>由于 Java 中 JVM 的特性，所以能够做到一次编译，随处运行，其移植性也就更高。</p>
<ol start="3">
<li><strong>开发社区完善</strong></li>
</ol>
<p>社区完善也是 Java 为什么使用多的原因，各种封装 API，比起 C、C++ 语言使用起来更加方便。虽然 <code>Python</code> 的封装程度更高，但是其效率比起 <code>Java</code> 却打了折扣。毕竟封装程度和效率是成反比的，<code>Java</code> 兼具了效率高和使用方便的特点，所以更受人们青睐。</p>
<h2> 4. Java 能做什么</h2>
<p>Java 应用广泛，在我们日常中就能经常见到由 Java 所开发的程序。常见的的应用应用领域如下：</p>
<ol>
<li><strong>桌面 GUI 应用开发</strong></li>
<li><strong>服务器系统</strong></li>
<li><strong>企业级应用开发</strong></li>
<li><strong>大数据开发</strong></li>
<li><strong>移动应用开发</strong></li>
<li><strong>游戏开发</strong></li>
<li>……</li>
</ol>
<h2> 5. Java 技术体系</h2>
<p>根据传统意义上 Sun 官方定义， Java 技术体系的组成主要就是我们常说的 JDK，即以下三部分：</p>
<ol>
<li><strong>Java 程序设计语言</strong></li>
<li><strong>Java 虚拟机</strong></li>
<li><strong>Java API 类库</strong></li>
</ol>
<figure><figcaption></figcaption></figure>
<p>同时，Java 技术体系又可以主要分为以下 3 个平台。</p>
<ol>
<li><strong>Java SE</strong></li>
</ol>
<p>Java Standard Edition，即 Java 标准版。主要是 Java 技术的核心和基础，要想学好 Java，那么首先你得掌握好这部分。主要运行在桌面级应用，如 Windows 应用程序。</p>
<ol start="2">
<li><strong>Java EE</strong></li>
</ol>
<p>Java Enterprise Editon，即 Java 企业版。从它的名字就不难看出，这是 Java 针对企业级应用开发所提供的一套解决方案，主要用于架设高性能企业网站。</p>
<ol start="3">
<li><strong>Java ME</strong></li>
</ol>
<p>Java Micro Edition，即 Java 小型版。主要是 Java 针对移动设备应用所提供的一套解决方案，主要运行在手机、pad 等移动端。</p>
<figure><figcaption></figcaption></figure>
<h2> 6. 总结</h2>
<p>本文主要从 Java 历史背景、选择 Java 的理由、Java 能做什么、Java 技术体系等 4 方面对 Java 语言做了一个简单介绍。接下来的文章我们就来看看，如何搭建 Java 的开发环境以及实现一个简单的入门程序。</p>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">JDK 安装及入门实例</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220702-jdk-install-and-hello-world.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220702-jdk-install-and-hello-world.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> JDK 安装及入门实例</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> JDK 安装及入门实例</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ</a></p>
</div>
<h2> 前言</h2>
<p>作为一个入门的学习者，要进行 Java 开发，那怎么能少得了 JDK 呢，本文就先来看看如何安装并配置 JDK，为后续的学习做好铺垫。</p>
<h2> 下载并安装 JDK</h2>
<p>什么是 JDK 呢？JDK（Java Development Kit）即 Java 开发者工具包，使我们学习 Java 语言必须安装的一个工具。</p>
<p>这里主要以 Windows 和 macOS 系统中 JDK 的安装为例，一来因为考虑到大家用的最多的还是 Windows 和 macOS 系统，二来则是因为手边没有安装 Linux 图形化系统。如果恰好你使用的是 Linux 系统，那么推荐你参考一下其他的资料，同样你也可以参考我的另一篇文章：<a href="https://cunyu1943.blog.csdn.net/article/details/105648148" target="_blank" rel="noopener noreferrer">手把手带你玩转 Ubuntu</a>。</p>
<h3> Windows</h3>
<h4> 安装</h4>
<ol>
<li>首先进入 <a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener noreferrer">Oracle 官网</a>，然后找到自己想要的 JDK 版本，这边以 JDK 11 为例；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>点击 JDK Download 后，它会跳转到具体下载页面，然后根据自己的系统来进行选择，此处以 Windows 10 64 位为例；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>点击最后的连接后，它会让你同意协议，勾选同意，然后登陆你的 Oracle 账户即可开始下载，若是没有 Oracle 账户，点击下面的创建一个即可；</li>
</ol>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<ol start="4">
<li>下载完成后，进行安装即可，安装流程和我们平常安装软件的一样，就再赘述，需要注意的是要记住如下的安装路径，因为一般我们都不会安装到默认路径，所以一定要记住你所安装到的路径，这关系到后续的配置步骤；</li>
</ol>
<figure><figcaption></figcaption></figure>
<h4> 配置 JDK</h4>
<p>好了，经过上面的配置，我们的 JDK 就已经安装好了，但是这个使用你是用不了的，我们还需要进一步的配置；</p>
<p>打开系统属性来进行环境变量配置，打开系统属性并进行配置的方式如下：</p>
<ol>
<li><strong>Windows + R</strong> 快捷键组合唤醒 Windows 运行窗口，然后输入 <code>sysdm.cpl</code>，紧接着回车即可，一般会打开如下界面，然后点击最上方的 <strong>高级</strong>；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>点击高级后，就会打开如下界面，然后打开环境变量；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>新建环境变量 <strong>JAVA_HOME</strong>，然后变量值填入刚才安装 JDK 的路径（刚才提醒过要记住！）；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="4">
<li>编辑 <strong>Path</strong> 环境变量，然后新建一个变量值，填入如下内容：<code>%JAVA_HOME%\bin</code>；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="5">
<li>各种确定，然后突出系统属性即可，到这一步，理论上我们的 JDK 就安装并配置成功了，接下来我们就去确认一下到底安装好了没；</li>
</ol>
<h4> 验证 JDK</h4>
<p>按照上述步骤操作完成之后，接下来就是验证了，一般我们可以通过如下三个命令来进行验证；</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开命令控制台（<strong>Windows + R，然后输入 cmd 回车</strong>），然后输入如上三个命令，如果安装成功，一般是会出现如下内容的；</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h3> macOS</h3>
<h4> 安装</h4>
<ol>
<li>首先去 <a href="https://www.oracle.com/java/technologies/javase-jdk11-downloads.html" target="_blank" rel="noopener noreferrer">官网下载</a> 对应安装包；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>
<p>接受相关协议并登录下载；</p>
</li>
<li>
<p>双击下载好的 <code>.dmg</code> 安装包，然后开始安装；</p>
</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="4">
<li>安装过程中会让你输入密码，也就是你本机的密码。</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="5">
<li>安装成功；</li>
</ol>
<figure><figcaption></figcaption></figure>
<h4> 验证</h4>
<p>不同于 Windows，macOS 下不用再去配置了，它会给你自动配置好，我们只需要去验证即可；</p>
<ol>
<li>查看 JDK 版本；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="2">
<li>编译命令；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>运行命令；</li>
</ol>
<figure><figcaption></figcaption></figure>
<h3> 安装目录详解</h3>
<p>安装好 <code>JDK</code> 之后，打开安装路径，通常情况下会有如下的目录结构：</p>
<table>
<thead>
<tr>
<th>目录</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>bin</code></td>
<td>用于存放各种工具命令，比如我们最常用额 <code>javac</code>、<code>java</code> 等</td>
</tr>
<tr>
<td><code>lib</code></td>
<td>存放工具的一些补充 <code>jar</code> 包</td>
</tr>
<tr>
<td><code>conf</code></td>
<td>存放相关配置文件</td>
</tr>
<tr>
<td><code>include</code></td>
<td>存放一些平台特定的头文件，比如 <code>Windows</code>、<code>macOS</code>、<code>Linux</code> 平台下这里的头文件是有所不同的</td>
</tr>
<tr>
<td><code>legal</code></td>
<td>存放各模块的授权文件</td>
</tr>
<tr>
<td><code>jmods</code></td>
<td>存放各种模块</td>
</tr>
</tbody>
</table>
<h2> 你的第一个 Java 程序：HelloWorld</h2>
<p>好了，经过上面的安装配置，我们就可以开始我们的第一个 Java 程序编写了。</p>
<p>要开发一个 Java 程序，主要分成 3 个步骤：</p>
<ol>
<li><strong>编写代码</strong></li>
<li><strong>编译代码</strong></li>
<li><strong>运行代码</strong></li>
</ol>
<figure><figcaption></figcaption></figure>
<p>我们不需要任何的基础，只需要按照上面的步骤配置好 JDK 之后，然后以上三个步骤逐一来进行就可以了。下面就来进行具体实践：</p>
<ol>
<li>打开编辑器（推荐 <code>VS Code</code>），如果没有，记事本也成，然后写入如下内容，然后保存为 <code>Main.java</code>，这里文件名一定要是 <code>Main</code>，文件后缀名为 <code>.java</code>。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>打开控制命令台，然后进入上述文件存放的路径，使用如下命令进行编译，然后会生成一个 <code>Main.class</code> 文件；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>运行，使用如下命令进行运行，然后就可以看到打印出的最终结果了！</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 知识点说明</h2>
<p>我们的 Hello World 是打印出来了，但是你肯定对里边的代码很感兴趣，这一节就主要针对我们的 Hello World 程序进行说明；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整的程序代码如上：</p>
<ul>
<li><code>public</code>：权限修饰符，表示这一个可以公开访问的类，类似的还有 <code>protected、default、private</code>，后续学习过程中再一一介绍；</li>
<li><code>class</code>：Java 关键字，表示这是一个类；</li>
<li><code>Main</code>： 表示我们的类名，在保存时文件一定要和它同名，否则你的程序是编译不了的。你可以试试，如果把我们上面的 <code>Main.java</code> 改成其他名字，你看看是不是还能编译成功呢？</li>
<li><code>public static void main(String[] args){}</code>：主方法，这是我们以后最常接触到的一个方法，每个主类当中都必须有一个 <code>main</code> 方法；</li>
<li><code>System.out.println("Hello World!")</code>：控制台输出语句，执行该语句会在控制台中输出字符串，字符串要用双引号 <code>""</code> 括起来，你可以把其中的 <code>Hello Wolrd!</code> 换成你想要打印的内容试试看。</li>
</ul>
<h2> 总结</h2>
<p>好了，今天的内容到此就结束了，主要介绍了如何在 Windows 和 macOS 中安装 JDK，具体过程可以总结如下：</p>
<ul>
<li>安装</li>
<li>配置</li>
<li>验证</li>
</ul>
<p>然后编写了我们的第一个 <code>Hello World</code> 程序，并利用安装好的的 JDK 对其进行编译和运行。最后，则是对我们的 <code>Hello World</code> 程序中的相关知识进行了介绍。</p>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">利用 IDEA 进行 Java 开发</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220703-learn-java-with-idea.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220703-learn-java-with-idea.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 利用 IDEA 进行 Java 开发</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/Pkf1WTj-x6JH4Jo8mOr8SQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Pkf1WTj-x6JH4Jo8mOr8SQ</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 利用 IDEA 进行 Java 开发</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/Pkf1WTj-x6JH4Jo8mOr8SQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Pkf1WTj-x6JH4Jo8mOr8SQ</a></p>
</div>
<h2> 前言</h2>
<p>上一篇中，我们讲了 <a href="https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ" target="_blank" rel="noopener noreferrer">如何搭建 Java 开发环境</a>。不过既然确定了要从事 Java 开发，那怎么能少得了一个趁手的 IDE 呢。正所谓工欲善其事。必先利其器，一个趁手的 IDE 就像电视剧里的神兵利器，能让我们功力大增，大大提高我们的效率。</p>
<p>但是目前市场上那么多的 IDE，有 Eclipse、IntelliJ IDEA、NetBeans …… 我们究竟该选择哪一个呢？既然做不了决定，那我就替你选择吧！要是都没接触过，那就直接 IDEA 吧，要是你之前是个 Eclipse 的忠实粉丝，也推荐你用一下 IDEA 试试，你只需要把 IDEA 的快捷键方式设置为 Eclipse 方式即可，相信过了一开始的阵痛期之后，就会喜欢上 IDEA 这一神器。那接下来，我们就来进行 IDEA 的安装工作！</p>
<h2> 安装前的准备工作</h2>
<p>开始安装之前，我们需要进行一些准备，首先是<strong>社区版和旗舰版该选谁</strong>，接着是<strong>软硬件的支持</strong>。</p>
<h3> 旗舰版 VS 社区版</h3>
<p>对于旗舰版和社区版，我从官网给出的对比从而摘选了如下图所示的区别。可以看出旗舰版无论在 <strong>语言支持、框架支持、Build 工具、部署工具、版本控制</strong> 等多方面都比社区版更加强大，但是最大的区别也是我们最为关心的一点：<strong>旗舰版收费，而社区版免费</strong>， 所以可以根据自己的需求进行选择。</p>
<figure><figcaption></figcaption></figure>
<h3> 软件</h3>
<ul>
<li>IntelliJ IDEA 安装包，下载地址：<a href="https://www.jetbrains.com/idea/download/%EF%BC%8C%E9%80%89%E6%8B%A9%E8%87%AA%E5%B7%B1%E7%B3%BB%E7%BB%9F%E5%AF%B9%E5%BA%94%E5%AE%89%E8%A3%85%E5%8C%85%E5%8D%B3%E5%8F%AF%E3%80%82" target="_blank" rel="noopener noreferrer">https://www.jetbrains.com/idea/download/，选择自己系统对应安装包即可。</a></li>
</ul>
<h3> 硬件</h3>
<table>
<thead>
<tr>
<th>配置项目</th>
<th style="text-align:left">最低配置</th>
<th>推荐配置</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>内存</strong></td>
<td style="text-align:left">2G +</td>
<td>8 G +</td>
</tr>
<tr>
<td><strong>硬盘</strong></td>
<td style="text-align:left">2.5 GB + 1 GB 缓存</td>
<td>至少 5GB+ 空间的 SSD</td>
</tr>
<tr>
<td><strong>显示器</strong></td>
<td style="text-align:left">1024 x 768</td>
<td>1920×1080</td>
</tr>
<tr>
<td><strong>操作系统</strong></td>
<td style="text-align:left">官方放出的 64 位操作系统：<br>1. Windows 8 +<br>2. macOS 10.13 +<br>3. Linux 的 Gnome、KDE、Unity 桌面环境的支持<br>4. 预览版系统可能支持不好</td>
<td>最新的 64 位 Windows、macOS、Linux 系统</td>
</tr>
</tbody>
</table>
<h2> 安装工作</h2>
<h3> Ubuntu</h3>
<h4> 安装</h4>
<ol>
<li>下载安装包，根据自己的需求选择旗舰版或是社区版</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>将下载好的安装包 <code>ideaIU-2020.1.1.tar.gz</code> 移动到平时存放软件的目录下进行解压缩</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption>解压</figcaption></figure>
<figure><figcaption>解压后的目录结构</figcaption></figure>
<ol start="3">
<li>进入解压后的 <code>bin</code> 目录，然后在终端启动如下命令即可：</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="4">
<li>进入初始化启动后的设置即可。</li>
</ol>
<p>首先是 UI 主题选择，根据自己的喜好选择 Light 还是 Darcula 模式；</p>
<figure><figcaption>图片源自 IDEA 官网</figcaption></figure>
<p>接着是否创建启动器脚本，同时选择自己的脚本保存目录</p>
<figure><figcaption>图片源自 IDEA 官网</figcaption></figure>
<p>接着选择自己想要的插件和禁用无关插件，根据自己的需求安装即可，如果不知道怎么选择，默认即可。</p>
<figure><figcaption>图片源自 IDEA 官网</figcaption></figure>
<p>选择额外的插件支持，按需安装，默认不勾选，后续也可以自行安装。</p>
<figure><figcaption>图片源自 IDEA 官网</figcaption></figure>
<h4> 卸载</h4>
<p>Linux 下卸载只需要将对应目录（即刚才解压后的目录）删除即可。</p>
<h3> Windows</h3>
<h4> 安装</h4>
<p>安装过程和 Ubuntu 大致相同，只是 Windows 中的安装包是可执行文件，只需要双击进行安装即可，然后后面选择自己的安装路径即可，安装好之后的设置和 Ubuntu 一致。</p>
<h4> 卸载</h4>
<p>进入 Windows 设置，然后进入应用，然后搜索 IDEA，选择卸载即可。</p>
<figure><figcaption></figcaption></figure>
<h3> macOS</h3>
<h4> 安装</h4>
<ol>
<li>首先去 <a href="https://www.jetbrains.com/idea/download/#section=mac" target="_blank" rel="noopener noreferrer">官网下载</a> 对应安装包；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>然后双击下载好的 <code>.dmg</code> 安装包，等待验证后拖拽到 <code>Applications</code> 即可；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>安装成功，打开的主页面如下图所示；</li>
</ol>
<figure><figcaption></figcaption></figure>
<h4> 卸载</h4>
<p>打开访达中的 <strong>应用程序</strong>，然后找到 IDEA，将其拖到 <strong>🗑️ 废纸篓</strong> 即可，也可以单击鼠标右键，然后 <strong>移到废纸篓</strong>；</p>
<figure><figcaption></figcaption></figure>
<h2> 创建 Java 项目</h2>
<p><a href="https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ" target="_blank" rel="noopener noreferrer">上一篇</a> 文章中，我们介绍了如何利用编辑器写我们的 <code>Hello World</code>，接下来就讲讲如何利用 IDEA 来创建并书写我们的 <code>Hello World</code> 程序。</p>
<ol>
<li>依次进入 <code>File -&gt; New -&gt; Project</code>，然后选择左侧 Java，配置项目 JDK；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>下一步之后，如果勾选上面的选项，就会从模板创建一个项目（一般都是 <code>HelloWorld</code>），不勾选就是一个空项目，看自己选择；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>再接下来，就是设置项目名以及项目存储目录了；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="4">
<li>最后点击完成，我们的普通 Java 项目就创建成功了；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="5">
<li>项目创建成功了，我们在项目 <code>src</code> 目录上右键新建一个 Java 类文件。注意，一般来讲，我们倾向于把类的命名方式定义为首字母大写的驼峰命名法。然后填入如下代码，一个 简单的 <code>HelloWorld</code> 就完成了；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="6">
<li>最后运行我们刚才写的代码，可以看到输出了 <code>Hello World</code>，和我们在上一篇文章中通过控制台打印出的一样！</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 总结</h2>
<p>今天的内容就到此为止了，主要介绍了 IDEA 的不同版本之间的区别，以及 IDEA 在不同系统中的安装和卸载工作，最后则是给大家演示了如何利用 IDEA 创建一个项目，编写我们最简单的 <code>Hello World!</code> 程序。</p>
<p>这里如果您想了解 IDEA 的更多使用技巧，可以关注一下，后边我会抽空写一个完整的教程系列，敬请期待吧！您要是等不及了，那就加我微信来催我更文吧！</p>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">变量与数据类型</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220704-variable-and-datatype.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220704-variable-and-datatype.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 变量与数据类型</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>原文：<a href="https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 变量与数据类型</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>原文：<a href="https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw</a></p>
</div>
<h2> 前情回顾</h2>
<p>在之前的文章中，我们已经介绍了如何搭建 Java 开发环境以及如何使用 IDEA，现在就开始正式学习 Java 语言的相关语法吧！😎</p>
<p>本期内容预告如下：</p>
<ol>
<li><strong>变量</strong></li>
<li><strong>数据类型</strong></li>
<li><strong>变量作用域</strong></li>
<li><strong>常量</strong></li>
</ol>
<p>本文将主要从以上四个方面出发，带领大家来看一下 Java 中的变量和数据类型。</p>
<h2> 变量</h2>
<h3> 什么是变量？</h3>
<p>所谓变量，就是用来命名一个数据的标识符，其定义格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中数据类型是用于限制存储数据的形式，后面会讲到 Java 中的常见数据类型；变量名称是用于代表变量的一个符号，就好比我们每个人的名字；初始值则代表该变量存储时的初始数据。</p>
<p>在 Java 中，变量主要分为两种：</p>
<ul>
<li><strong>基本类型的变量</strong></li>
<li><strong>引用类型的变量</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>int</code> 是基本数据类型，表示这是一个整型数；而 <code>String</code> 则是引用类型，表示这是一个引用类型；</p>
<p><code>id</code> 和 <code>name</code> 则是标识符，也就是我们所说的 <strong>变量</strong>；</p>
<p><code>=</code> 则是赋值操作符，而 <code>1</code> 则是基本类型的值，<code>村雨遥</code> 则是引用类型的值；</p>
<h3> 变量的特点</h3>
<p>在使用变量时，需要注意以下的几个问题。</p>
<ol>
<li>变量一定要先声明然后再使用。</li>
<li>声明一个变量的类型后，不能用它来存储其类型的数据。</li>
<li>变量定义时可以不赋初始值，但是在使用时必须赋值。</li>
<li>变量是有使用范围的，在同一使用范围内，不能重复定义同一个变量。</li>
<li>变量最重要的一个特点就是可以重新赋值。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 变量命名规则</h3>
<p>变量命名也是一门学问，并不是我们想怎么命名就怎么命名，日常开发中最常见的变量命名规则主要有如下几条：</p>
<ol>
<li><strong>强制</strong>：变量命名只能使用 <strong>字母（大小写均可）、数字、$、_</strong>；</li>
<li><strong>强制</strong>：变量名不能使用关键字（就是 Java 中内置的一些关键字，如 <code>int、for、long…</code>）；</li>
<li><strong>强制</strong>：变量第一个字符不能使用数字，只能用字母、<code>$</code>、<code>_</code>；</li>
<li>更多命名规则推荐参考阿里巴巴推出的《Java 开发手册》，下载链接：<a href="https://github.com/cunyu1943/ebooks" target="_blank" rel="noopener noreferrer">https://github.com/cunyu1943/ebooks</a></li>
</ol>
<h3> 常见关键字</h3>
<p>这是一种事先定义好的，有特定意义的标识符，也叫做保留字。对于 Java 编译器有着特殊意义，用来表示一种数据类型，或者表示程序的结构等。此外，关键字不能用作变量名、方法名、类名、包名和参数名。常见的关键字可以分为如下几类，具体的关键字如下图所示：</p>
<ul>
<li><strong>访问控制类</strong></li>
<li><strong>类、方法及变量修饰符类</strong></li>
<li><strong>程序控制类</strong></li>
<li><strong>错误处理</strong></li>
<li><strong>包相关</strong></li>
<li><strong>基本类型</strong></li>
<li><strong>变量引用</strong></li>
<li><strong>保留字</strong></li>
</ul>
<!-- ![](https://img-blog.csdnimg.cn/9f8fed4aeeda4dea9d1de0ff7677ca4a.png) -->
<figure><figcaption>Java 关键字</figcaption></figure>
<h2> 数据类型</h2>
<h3> 基本数据类型</h3>
<p>Java 中，共有 8 种基本数据类型，由 Java 语言预定好的，每个数据类型都属于关键字，而且每种基本变量都有其对应的封装类，这 8 种基本数据类型分别是：</p>
<ul>
<li><strong>整型（4 种）</strong></li>
<li><strong>浮点型（2 种）</strong></li>
<li><strong>字符型（1 种）</strong></li>
<li><strong>布尔型（1 种）</strong></li>
</ul>
<p>下面的表就是 Java 中 8 大数据类型所占的内存空间，对应封装类，数据表示范围以及默认值的一下相关情况。</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>bit</th>
<th>字节</th>
<th>封装类</th>
<th>数据范围</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>byte</code></td>
<td>8</td>
<td>1</td>
<td><code>Byte</code></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>7</mn></msup></mrow><annotation encoding="application/x-tex">-2^7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>7</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^7-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>short</code></td>
<td>16</td>
<td>2</td>
<td><code>Short</code></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>15</mn></msup></mrow><annotation encoding="application/x-tex">-2^{15}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">15</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>15</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{15}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">15</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>char</code></td>
<td>16</td>
<td>2</td>
<td><code>Character</code></td>
<td><code>\u0000</code> ~ <code>\uffff</code>（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>65535</mn></mrow><annotation encoding="application/x-tex">65535</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">65535</span></span></span></span>）</td>
<td><code>u0000</code></td>
</tr>
<tr>
<td><code>int</code></td>
<td>32</td>
<td>4</td>
<td><code>Integer</code></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding="application/x-tex">-2^{31}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{31}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>long</code></td>
<td>64</td>
<td>8</td>
<td><code>Long</code></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>63</mn></msup></mrow><annotation encoding="application/x-tex">-2^{63}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>63</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{63}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td><code>0L</code></td>
</tr>
<tr>
<td><code>float</code></td>
<td>32</td>
<td>4</td>
<td><code>Float</code></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.4</mn><msup><mi>e</mi><mrow><mo>−</mo><mn>45</mn></mrow></msup></mrow><annotation encoding="application/x-tex">1.4e^{-45}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1.4</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">45</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3.4</mn><msup><mi>e</mi><mn>38</mn></msup></mrow><annotation encoding="application/x-tex">3.4e^{38}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">3.4</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">38</span></span></span></span></span></span></span></span></span></span></span></span></td>
<td><code>0.0f</code></td>
</tr>
<tr>
<td><code>double</code></td>
<td>64</td>
<td>8</td>
<td><code>Double</code></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4.9</mn><msup><mi>e</mi><mrow><mo>−</mo><mn>324</mn></mrow></msup></mrow><annotation encoding="application/x-tex">4.9e^{-324}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">4.9</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">324</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1.8</mn><msup><mi>e</mi><mn>308</mn></msup></mrow><annotation encoding="application/x-tex">1.8e^{308}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1.8</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">308</span></span></span></span></span></span></span></span></span></span></span></span></td>
<td><code>0.0D</code></td>
</tr>
<tr>
<td><code>boolean</code></td>
<td>1</td>
<td>不确定</td>
<td><code>Boolean</code></td>
<td><code>true</code> 或 <code>false</code></td>
<td><code>false</code></td>
</tr>
</tbody>
</table>
<p><strong>注意：</strong></p>
<ol>
<li><code>boolean</code> 一般用 1 <code>bit</code> 来存储，但是具体大小并未规定，JVM 在编译期将 <code>boolean</code> 类型转换为 <code>int</code>，此时 1 代表 <code>true</code>，<code>0</code> 代表 <code>false</code>。此外，JVM 还指出 <code>boolean</code> 数组，但底层是通过 <code>byte</code> 数组来实现。</li>
<li>使用 <code>long</code> 类型时，需要在后边加上 <code>L/l</code>，否则将其作为整型解析，可能会导致越界。</li>
<li>浮点数如果没有明确指定 <code>float</code> 还是 <code>double</code>，统一按 <code>double</code> 处理。</li>
<li><code>char</code> 是用 <strong>单引号 <code>''</code></strong> 将内容括起来，<strong>只能存放一个字符</strong>，相当于一个整型值（ASCII 值），能够参加表达式运算；而 <code>String</code> 是用 <strong>双引号 <code>""</code></strong> 将内容括起来，代表的是一个地址值。</li>
<li><code>Java</code> 在内存中是采用 <code>Unicode</code> 表示，所以无论是一个中文字符还是英文字符，都能用 <code>char</code> 来表示。</li>
</ol>
<p>那么如何个一个基本类型变量赋值呢？</p>
<p>在 <code>Java</code> 中，基本数据类型属于 <code>Java</code> 的一种内置的特殊数据类型，不属于任何类，所以可以直接对其进行赋值；给基本类型的变量赋值的方式就叫做 <strong>字面值</strong>；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 引用数据类型</h3>
<h4> 常见引用数据类型</h4>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>数组</td>
<td><code>null</code></td>
</tr>
<tr>
<td>类</td>
<td><code>null</code></td>
</tr>
<tr>
<td>接口</td>
<td><code>null</code></td>
</tr>
</tbody>
</table>
<p>而对于引用数据类型，我们经常是需要 <code>new</code> 关键字来进行赋值，但是引用类型中的 <strong>接口是不能被实例化的，我们需要对其进行实现</strong>；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> String</h4>
<p>对于引用数据类型中的 <code>String</code>，我们需要特别关注。</p>
<p><code>String</code> 不同于 <code>char</code>，它属于引用类型，而 <code>char</code> 属于基本数据类型。用双引号 <code>""</code> 括起来表示字符串，一个字符串能够保存 0 个到任意个字符，它一旦创建就不能被改变。</p>
<p>而针对字符串，如果我们要打印一些特殊的字符，比如字符串本来就包含 <code>"</code>，那么这个时候就需要借助于转义字符 <code>\</code>，最常见的转义字符主要有：</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\"</code></td>
<td>字符 <code>"</code></td>
</tr>
<tr>
<td><code>\'</code></td>
<td>字符 <code>'</code></td>
</tr>
<tr>
<td><code>\\</code></td>
<td>字符 <code>\</code></td>
</tr>
<tr>
<td><code>\n</code></td>
<td>换行符</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>制表符 <code>Tab</code></td>
</tr>
<tr>
<td><code>\r</code></td>
<td>回车符</td>
</tr>
</tbody>
</table>
<blockquote>
<p>那多个字符串之间或者字符串和其他类型数据之间，该如何进行连接呢？</p>
</blockquote>
<p>Java 编译器中，对于字符串和其他数据类型之间，可以使用 <code>+</code> 进行连接，编译器会自动将其他数据类型自动转换为字符串，然后再进行连接；</p>
<blockquote>
<p><code>String</code> 既然是不可变，那有什么优点呢？</p>
</blockquote>
<ol>
<li><strong>用于缓存 <code>hash</code> 值</strong></li>
</ol>
<p>由于 <code>String</code> 的 <code>hash</code> 值被频繁使用，它的不可变性使得 <code>hash</code> 值也不可变，此时只需要进行一次计算；</p>
<ol start="2">
<li><strong>字符串常量池（String Pool）的需要</strong></li>
</ol>
<p>如果一个 <code>String</code> 对象已经被创建过，那么就会优先从字符串常量池中获取其引用，其不可变性确保了不同引用指向同一 <code>String</code> 对象；</p>
<ol start="3">
<li><strong>安全性</strong></li>
</ol>
<p>我们经常用 <code>String</code> 作为我们方法的参数，其不变性能够保证参数不可变；</p>
<ol start="4">
<li><strong>线程安全</strong></li>
</ol>
<p><code>String</code> 的不可变性让它天生 <strong>具备线程安全</strong>，能够在多个线程中方便使用而不用考虑线程安全问题。</p>
<blockquote>
<p><code>String、StringBuilder、StringBuffer</code> 对比，该如何选择？</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th>可变性</th>
<th>线程安全</th>
<th>适用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>String</code></td>
<td>不可变</td>
<td>安全</td>
<td>操作少量的数据</td>
</tr>
<tr>
<td><code>StringBuffer</code></td>
<td>可变</td>
<td>安全，内部使用 <code>synchronized</code> 进行同步</td>
<td>多线程操作字符串缓冲区下操作大量数据</td>
</tr>
<tr>
<td><code>StringBuilder</code></td>
<td>可变</td>
<td>不安全</td>
<td>单线程操作字符串缓冲区下操作大量数据，性能高于 <code>StringBuffer</code></td>
</tr>
</tbody>
</table>
<blockquote>
<p>通过 <code>new String(“xxx”)</code> 创建字符串的两种情况？</p>
</blockquote>
<p>使用 <code>new</code> 的方式创建字符串对象，会有两种不同的情况：</p>
<ol>
<li><strong>String Pool 中不存在 “xxx”</strong></li>
</ol>
<p>此时会创建两个字符串对象，“xxx” 属于字符串字面量，因此在编译期会在 String Pool 中创建一个字符串对象，用于指向该字符串的字面量 “xxx”；然后 <code>new</code> 会在堆中创建一个字符串对象。</p>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li><strong>String Pool 中存在 “xxx”</strong></li>
</ol>
<p>此时只需要创建一个字符串对象，由于 String Pool 中已经存在指向 “xxx” 的对象，所以直接在堆中创建一个字符串对象。</p>
<figure><figcaption></figcaption></figure>
<h3> 数据类型转换</h3>
<p>对于基本数据类型，不同类型之间是可以相互转换的，但是需要满足一定的条件；</p>
<blockquote>
<p><strong>从小到大自动转，从大到小强制转</strong>。</p>
</blockquote>
<p>即就是，对于低精度的数据类型，如果要转换为高精度的数据类型，直接将低精度的值赋给高精度的值即可；</p>
<p>但对于高精度的数据类型，如果想要转换为低精度的数据类型，则需要采用 <strong>强制转换</strong> 的手段，但此时需要承担精度丢失的风险，就像从一个大杯子往一个小杯子里倒水，你要做好小杯子可能装不下溢出的情况；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 隐式转换（自动类型转换）</h4>
<p>当满足如下条件时，如果将一种类型的数据赋值给另一种数据类型变量时，将执行自动类型转换：</p>
<blockquote>
<ol>
<li>两种数据类型彼此兼容；</li>
<li>目标数据类型的取值范围大于源数据类型；</li>
</ol>
</blockquote>
<p>一般而言，隐式转换的规则是从低级类型数据转换为高级类型数据，对应规则如下：</p>
<blockquote>
<ul>
<li><strong>数值类型</strong>：<code>byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</code></li>
<li><strong>字符类型转整型</strong>：<code>char -&gt; int</code></li>
</ul>
</blockquote>
<h4> 显式转换（强制类型转换）</h4>
<p>那既然满足上述两个条件时会发生隐式转换，那不满足我们又想进行数据类型转换时，我们该怎么办呢？</p>
<p>这个时候就需要我们的 <strong>显式转换</strong> 登场了，其语法格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们举个例子来说下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**注意：**强制转换可能会导致精度丢失，所以一般情况下尽量能不用就不用。</p>
<h4> 常见数据类型转换方法</h4>
<ol>
<li><strong>字符串与其他类型之间的转换</strong></li>
</ol>
<ul>
<li><strong>其他类型 -&gt; 字符串</strong></li>
</ul>
<blockquote>
<ol>
<li>调用类的串转换方法：<code>X.toString()</code>；</li>
<li>自动转换：<code>"" + X</code>；</li>
<li>利用 <code>String</code> 的方法：<code>String.valueOf(X)</code>；</li>
</ol>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>字符串 - &gt; 其他类型</strong></li>
</ul>
<ol>
<li>调用 <code>parseXXX</code> 方法，比如 <code>parseLong、parseFloat、parseDouble...</code>；</li>
<li>先调用 <code>valueOf()</code>，方法，然后再调用 <code>xxxValue()</code> 方法；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>int、float、double</strong> 之间的转换</li>
</ol>
<ul>
<li><code>float -&gt; double</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>double -&gt; float</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>double -&gt; int</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>int -&gt; double</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 变量作用域</h2>
<p>我们已经学会了如何定义变量，也知道了使用各种数据类型来定义变量。但是还有一点不知道大家有没有注意到，如果我们的定义变量在不同的位置，其作用是不是相同的呢？</p>
<p>这就涉及到变量的作用域，一般根据其作用域的不同，可以分为：</p>
<ul>
<li><strong>成员变量</strong>：定义在方法体和语句块外，不属于任何一个方法，能在整个类中起作用；</li>
<li><strong>局部变量</strong>：定义在方法或方法体中的变量，作用域是其所在的代码块；</li>
</ul>
<h3> 成员变量</h3>
<p>成员变量又可以分为 <strong>全局变量（又叫实例变量）</strong> 和 <strong>静态变量（也叫类变量）</strong>，两者的区别如下：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>修饰符</th>
<th>访问方式</th>
<th>生命周期</th>
</tr>
</thead>
<tbody>
<tr>
<td>全局变量</td>
<td>无</td>
<td>对象名.变量名</td>
<td>一旦对象被引用，则实例变量就存在</td>
</tr>
<tr>
<td>静态变量</td>
<td><code>static</code></td>
<td>类名.变量名</td>
<td>同类共生死，只有当类被 GC 回收时才会被销毁</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 局部变量</h3>
<p>成员变量指定义在方法或方法体中的变量，作用域是其所在的代码块，可以分为如下三种：</p>
<ul>
<li>形参</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>方法内定义</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>代码块定义</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 常量</h2>
<h3> 简介</h3>
<p>既然有变量，那就有与之相对的常量（也就是值是固定的，不能再变）。</p>
<p>常量又叫做字面常量，是通过数据直接来表示的，在程序运行过程中不能发生改变。通常我们把 Java 中用 <code>final</code> 关键字所修饰的成员变量叫做常量，它的值一旦给定就无法再进行改变！</p>
<h3> 分类</h3>
<p>Java 中使用 <code>final</code> 关键字来声明常量，其语法格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常量可以分为如下 3 种类型：</p>
<ul>
<li><strong>静态常量</strong>：<code>final</code> 之前用 <code>public staic</code> 修饰，表示该常量的作用域是全局的，我们不用创建对象就能够访问它。</li>
<li><strong>成员常量</strong>：类似于成员变量，但是最大的不同在于它不能被修改。</li>
<li><strong>局部常量</strong>：作用类似于局部变量，不同之处也在于不能修改。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS：<code>final</code> 修饰变量后，该变量则变为常量。而 <code>final</code> 也还可以用来修饰类和方法，修饰方法时，表示这个方法不能被重写（但可以重载）；修饰类时，则表明该类无法被继承。这些东西这时候你可能会觉得很陌生，不过等我们后续学习了面向对象之后，你就会发现其实很简单。</p>
<h2> 总结</h2>
<p>以上就是本期文章的所有内容了，集中介绍了 Java 中的变量、数据类型、变量作用域以及常量等主要知识点。内容虽然蛮多的，但如果大家能够静下心来慢慢学习，掌握起来还是不难的。</p>
<p>最后，码字不易，如果觉得本文对您有所帮助，可以点赞关注，帮忙分享一波哦！🙏</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">常用进制转换</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220705-binary-convert.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220705-binary-convert.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 常用进制转换</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/2f_dODoVco-tSS66lF0U5A" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/2f_dODoVco-tSS66lF0U5A</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 常用进制转换</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/2f_dODoVco-tSS66lF0U5A" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/2f_dODoVco-tSS66lF0U5A</a></p>
</div>
<h2> 前言</h2>
<p>所谓进制转换，就是人们利用符号来计数的方法。进制转换由一组数码符号和两个基本因素“基数”和“位权”所构成。其中<strong>基数</strong>是指进位计数制中所采用的数码的个数，逢 <code>n</code> 进 1 中的 <code>n</code> 就是基数。而<strong>位权</strong>则指的是进位制中每一个固定位置所对应的单位制，而每一种进制中的某一个数的每位上都有一个权值 <code>m</code>，而且权值是位数减一，比如个位上的数的权值为 <code>0</code>（位数 1 - 1 = 0），而十位的权值为 <code>1</code>（位数 2 - 1 = 1）。</p>
<p>在 Java 学习中，我们难免会和各种进制打交道。今天就来看看，在 Java 中最常用的几个进制的相关概念，以及如何利用 Java 来实现他们之间的相互转换！</p>
<h2> 二进制</h2>
<p>二进制是计算机中采用最广泛的一种数制，用 0 和 1 两个数码来表示，其进位规则是逢二进一，而借位规则则是借一当二。</p>
<p>如果要将二进制转换为十进制，则采用 <strong>按权展开求和</strong>方法，其步骤是先将二进制的数写成加权系数展开式，然后再更具十进制的加法规则进行求和。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mn>1011</mn><msub><mo stretchy="false">)</mo><mn>2</mn></msub><mo>=</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>3</mn></msup><mo>+</mo><mn>0</mn><mo>∗</mo><msup><mn>2</mn><mn>2</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>1</mn></msup><mo>+</mo><mn>1</mn><mo>∗</mo><msup><mn>2</mn><mn>0</mn></msup><mo>=</mo><mo stretchy="false">(</mo><mn>11</mn><msub><mo stretchy="false">)</mo><mn>10</mn></msub></mrow><annotation encoding="application/x-tex">
(1011)_2=1*2^3+0*2^2+1*2^1+1*2^0 = (11)_{10}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1011</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">11</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<h2> 十进制</h2>
<p>而一个十进制数要转换为二进制数，则需要将整数和小数部分分别转换，最后再进行组合。其中，整数部分采用<strong>除二取余，逆序排序</strong>的方法。具体方法是用 2 来整除一个十进制数，从而得到一个商和余数；然后再用 2 去除以商，从而又得到一个商和余数，重复这个步骤，直到最后得到的商小于 1 时为止。最后把按照得到余数的先后顺序，逆序依次排列，得到的数即为这个十进制数的二进制表示。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mn>15</mn><msub><mo stretchy="false">)</mo><mn>10</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mn>1111</mn><msub><mo stretchy="false">)</mo><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">
(15)_{10}=(1111)_2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">15</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1111</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<figure><figcaption>整数部分</figcaption></figure>
<p>小数部分则不同于整数部分，小数部分要使用<strong>乘 2 取整法</strong>，即用十进制的小数部分乘以 2，然后取结果的整数部分，然后再用剩下的小数重复刚才的步骤，直到最后剩余的小数为 0 时停止。最后将每次得到的整数部分按照先后顺序正序排列，从而得到对应的二进制表示。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mn>0.25</mn><msub><mo stretchy="false">)</mo><mn>10</mn></msub><mo>=</mo><mo stretchy="false">(</mo><mn>0.01</mn><msub><mo stretchy="false">)</mo><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">
(0.25)_{10}=(0.01)_2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0.25</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0.01</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<figure><figcaption></figcaption></figure>
<h2> 八进制</h2>
<p>所谓八进制，就是每 3 位二进制作为一个单元，其中最小的数是 0，最大的数是 7，一共 8 个数字。</p>
<p>要将二进制的数转换为八进制，需要将 3 个连续的数拼成一组，然后再独立转成八进制中的数字。</p>
<p>例如，二进制的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>111101011110</mn></mrow><annotation encoding="application/x-tex">111101011110</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">111101011110</span></span></span></span> 可以转换为八进制中的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>7536</mn></mrow><annotation encoding="application/x-tex">7536</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">7536</span></span></span></span>。</p>
<figure><figcaption></figcaption></figure>
<h2> 十六进制</h2>
<p>所谓十六进制，就是每 4 位二进制作为一个单元，其中最小数是 0，最大数是 15，一共 16 个数字，分别用 0 ~ 9、A、B、C、D、E、F 表示。</p>
<p>要将二进制转换为十六进制，需要将 4 个连续的数拼成一组，然后再独立转换为十六进制中对应的数字。</p>
<p>例如，二进制的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1111100111010111</mn></mrow><annotation encoding="application/x-tex">1111100111010111</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1111100111010111</span></span></span></span> 可以转换为十六进制中的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi><mn>9</mn><mi>D</mi><mn>7</mn></mrow><annotation encoding="application/x-tex">F9D7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord">9</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">7</span></span></span></span>。</p>
<figure><figcaption></figcaption></figure>
<h2> 常用进制转换</h2>
<p>当然，Java 中也已经将常用的进制转换方法封装好了，我们只需要调用对应方法即可。</p>
<table>
<thead>
<tr>
<th>转换</th>
<th>方法</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>十进制 -&gt; 二进制</td>
<td><code>Integer.toBinary(int num)</code></td>
<td>二进制字符串</td>
</tr>
<tr>
<td>十进制 -&gt; 八进制</td>
<td><code>Integer.toOctalString(int num)</code></td>
<td>八进制字符串</td>
</tr>
<tr>
<td>十进制 -&gt; 十六进制</td>
<td><code>Integer.toHexString(int num)</code></td>
<td>十六进制字符串</td>
</tr>
<tr>
<td>十进制 -&gt; N 进制</td>
<td><code>Integer.toString(int num, int N)</code></td>
<td>N 进制字符串</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>相反的，如果我们要将一个 <code>N</code> 进制的字符串 <code>str</code> 转换为十进制数，那么可以使用以下方法。</p>
<table>
<thead>
<tr>
<th>转换</th>
<th>方法</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>N 进制 -&gt; 十进制</td>
<td><code>Integer.parseInt(String str, int N)</code></td>
<td>十进制数</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>以上就是有关二进制、十进制、八进制、十六进制相关的知识点了。此外还介绍了 Java 中如何进行十进制向其他进制的转换方法，以及如何将其他进制转换为十进制。如果你刚好这些内容对你有所帮助，那就来个一键三连吧！</p>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">操作符</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220706-operator.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220706-operator.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 操作符</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 操作符</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g</a></p>
</div>
<h2> 前言</h2>
<p><a href="https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw" target="_blank" rel="noopener noreferrer">之前的文章</a> 中介绍了 Java 变量和数据类型，那么如何对他们进行运算呢？这就要用到运算符的相关知识点了。所谓运算符，就是指 Java 中对变量或者字面量进行操作的符号。下面就来具体看看，常用的操作符。</p>
<p>本文主要内容预告如下：</p>
<ul>
<li><strong>算术运算符</strong></li>
<li><strong>关系运算符</strong></li>
<li><strong>位运算符</strong></li>
<li><strong>逻辑运算符</strong></li>
<li><strong>赋值运算符</strong></li>
<li><strong>条件运算符</strong></li>
</ul>
<p>好了，话不多说，开始正式内容吧！</p>
<h2> 算术运算符</h2>
<p>常见的算术运算符主要有下表中的几种，主要是针对整型和浮点类型的运算。</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>+</code></td>
<td style="text-align:left">加法 - 相加运算符两侧的值</td>
</tr>
<tr>
<td style="text-align:left"><code>-</code></td>
<td style="text-align:left">减法 - 左操作数减去右操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>*</code></td>
<td style="text-align:left">乘法 - 相乘操作符两侧的值</td>
</tr>
<tr>
<td style="text-align:left"><code>/</code></td>
<td style="text-align:left">除法 - 左操作数除以右操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>％</code></td>
<td style="text-align:left">取余 - 左操作数除以右操作数的余数</td>
</tr>
<tr>
<td style="text-align:left"><code>++</code></td>
<td style="text-align:left">自增: 操作数的值增加1</td>
</tr>
<tr>
<td style="text-align:left"><code>--</code></td>
<td style="text-align:left">自减: 操作数的值减少1</td>
</tr>
</tbody>
</table>
<p><strong>注意</strong>：<code>++</code> 和 <code>--</code> 可以放在操作数之前，也可以放在操作数之后；<strong>位于操作数之前时，先自增/减，再赋值；位于操作数之后，先赋值，再自增/减</strong>；总结起来就是<strong>符号在前就先加/减，符号在后就后加/减</strong>。</p>
<p>以下是部分算术运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>这里不难看出，无论是 <code>++</code> 还是 <code>--</code>，当它们单独写一行时，不管是放在变量前边还是后边，其最终结果都是一样的。但如果将它们参与运算，此时的效果就不一样了，这里需要注意。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码中，先进行了 <code>b = a</code> 的赋值操作，所以此时 <code>b</code> 的值是 <code>10</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而此时，先要对 <code>a</code> 进行加一的操作之后，再将 <code>a</code> 的值赋予 <code>b</code>，所以此时 <code>b</code> 的值为 <code>11</code>。</p>
<h2> 关系运算符</h2>
<p>关系运算符主要是指两个数据间的关系，两者之间的比较结果用逻辑值来表示，常用来比较判断两个变量或常量的大小。常见的关系运算符及含义如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>==</code></td>
<td style="text-align:left">检查如果两个操作数的值是否相等，如果相等则条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>!=</code></td>
<td style="text-align:left">检查如果两个操作数的值是否相等，如果值不相等则条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt; </code></td>
<td style="text-align:left">检查左操作数的值是否大于右操作数的值，如果是那么条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt; </code></td>
<td style="text-align:left">检查左操作数的值是否小于右操作数的值，如果是那么条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;=</code></td>
<td style="text-align:left">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;=</code></td>
<td style="text-align:left">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真</td>
</tr>
</tbody>
</table>
<p>以下是部分关系运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 位运算符</h2>
<p>位运算符主要用来对操作数二进制的位进行运算，其运算结果是整型的。常见的位运算符及功能描述如下表所示：</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>＆</code></td>
<td>如果相对应位都是 1，则结果为 1，否则为 0</td>
</tr>
<tr>
<td><code>|</code></td>
<td>如果相对应位都是 0，则结果为 0，否则为 1</td>
</tr>
<tr>
<td><code>^</code></td>
<td>如果相对应位值相同，则结果为 0，否则为 1</td>
</tr>
<tr>
<td><code>〜</code></td>
<td>按位取反运算符翻转操作数的每一位，即 0 变成 1，1 变成 0</td>
</tr>
<tr>
<td><code>&lt;&lt;</code></td>
<td>按位左移运算符。左操作数按位左移右操作数指定的位数</td>
</tr>
<tr>
<td><code>&gt;&gt;</code></td>
<td>按位右移运算符。左操作数按位右移右操作数指定的位数</td>
</tr>
<tr>
<td><code>&gt;&gt;&gt;</code></td>
<td>按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充</td>
</tr>
</tbody>
</table>
<p>以下是部分位运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 逻辑运算符</h2>
<p>逻辑运算符通过将关系表达式连接起来，从而组成一个复杂的逻辑表达式，从而判断程序中的表达式是否成立，其结果返回 <code>true</code> 或 <code>false</code>。</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>&amp;&amp;</code></td>
<td style="text-align:left">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真</td>
</tr>
<tr>
<td style="text-align:left"><code>||</code></td>
<td style="text-align:left">称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>!</code></td>
<td style="text-align:left">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为 <code>true</code>，则逻辑非运算符将得到 <code>false</code></td>
</tr>
</tbody>
</table>
<p>以下是逻辑运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 赋值运算符</h2>
<p>赋值运算符表示一个动作，将其右侧的值送到左侧的变量中。常见的赋值运算符及含义如下表所示：</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>=</code></td>
<td style="text-align:left">简单的赋值运算符，将右操作数的值赋给左侧操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>+=</code></td>
<td style="text-align:left">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>-=</code></td>
<td style="text-align:left">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>*=</code></td>
<td style="text-align:left">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>/=</code></td>
<td style="text-align:left">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>％=</code></td>
<td style="text-align:left">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;&lt; =</code></td>
<td style="text-align:left">左移位赋值运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;&gt;=</code></td>
<td style="text-align:left">右移位赋值运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>＆=</code></td>
<td style="text-align:left">按位与赋值运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>^=</code></td>
<td style="text-align:left">按位异或赋值操作符</td>
</tr>
<tr>
<td style="text-align:left"><code>|=</code></td>
<td style="text-align:left">按位或赋值操作符</td>
</tr>
</tbody>
</table>
<p>以下是部分赋值运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 条件运算符（? :）</h2>
<p>也叫作三元运算符，共有 3 个操作数，且需要判断布尔表达式的值，常用来取代某个 <code>if-else</code> 语句。其语法结构如下所示：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下是条件运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> instanceof</h2>
<p>用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型），其语法结构如下。该知识点涉及到类与对象，此处就不做展开，等到后边学习类与对象之后，就能理解了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 运算符优先级</h2>
<p>运算符有很多，如果我们将多个运算符组合在一起，那它们又该先计算哪一个，然后再计算哪一个呢？其实就像我们日常排队一样，运算符也是有优先级的。<br>
常用运算符的优先级如下表所示，在我们使用时，如果涉及到一个表达式中含有多个运算符，一定要注意运算符的优先级。当然了，让我们背下来这些也是挺难的。不过不要紧，我们只需要学会灵活运用 <code>()</code> 就好了。我们可以利用 <code>()</code> 将需要先计算的表达式括起来，然后再去进行下一步的运算。</p>
<table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>.</code>、<code>()</code>、<code>{}</code></td>
</tr>
<tr>
<td>2</td>
<td><code>!</code>、<code>~</code>、<code>++</code>、<code>--</code></td>
</tr>
<tr>
<td>3</td>
<td><code>*</code>、<code>/</code>、<code>%</code></td>
</tr>
<tr>
<td>4</td>
<td><code>+</code>、<code>-</code></td>
</tr>
<tr>
<td>5</td>
<td><code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code></td>
</tr>
<tr>
<td>6</td>
<td><code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>instanceof</code></td>
</tr>
<tr>
<td>7</td>
<td><code>==</code>、<code>!=</code></td>
</tr>
<tr>
<td>8</td>
<td><code>&amp;</code></td>
</tr>
<tr>
<td>9</td>
<td><code>^</code></td>
</tr>
<tr>
<td>10</td>
<td><code>|</code></td>
</tr>
<tr>
<td>11</td>
<td><code>&amp;&amp;</code></td>
</tr>
<tr>
<td>12</td>
<td><code>||</code></td>
</tr>
<tr>
<td>13</td>
<td><code>?:</code></td>
</tr>
<tr>
<td>14</td>
<td><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>&amp;=</code></td>
</tr>
</tbody>
</table>
<h2> equals() 和 ==</h2>
<ul>
<li><code>==</code></li>
</ul>
<p>基本数据类型用 <code>==</code> 比较的是值，而 用于引用数据类型时判断两个对象的内存地址是否相等，即两对象是否是同一个对象；</p>
<blockquote>
<p>本质来讲，由于 Java 中只有值传递，所以不管是基本数据类型还是引用数据类型，比较的其实都是值，只不过引用类型变量存的值是对象的地址；</p>
</blockquote>
<ul>
<li><code>equals()</code></li>
</ul>
<p>作用也是判断两个对象是否相等，但是 <strong>不能用于基本数据类型变量的比较</strong>。存在于 <code>Object()</code> 类中，所以所有类都具有 <code>equals()</code> 方法存在两种使用情况：</p>
<ol>
<li><strong>类未覆盖 <code>equals()</code> 方法</strong>：此时通过 <code>equals()</code> 比较该类的两个对象时，等价于 <code>==</code> 比较这两个对象，默认使用  <code>Object</code> 类中的 <code>equals()</code> 方法；</li>
<li><strong>类覆盖了 <code>equals()</code> 方法</strong>：一旦覆盖了该方法，则用来比较两个对象的内容是否相等，如我们常用的 <code>String、BitSet、Data、File</code> 就覆盖了 <code>equals()</code> 方法；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>好了，以上就是有关操作符系列的相关知识点了。老规矩，如果您觉得对您有所帮助，那就点个赞吧 🥳.</p>
<p>对于文中所遗漏或者存在错误的知识点，也欢迎大家评论指正呀！</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<figure><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</div>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">流程控制</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220707-control-process.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220707-control-process.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 流程控制</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/3WU5l37DpPkR6o7CnFiStA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/3WU5l37DpPkR6o7CnFiStA</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 流程控制</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/3WU5l37DpPkR6o7CnFiStA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/3WU5l37DpPkR6o7CnFiStA</a></p>
</div>
<h2> 前言</h2>
<p>我们在 <a href="https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g" target="_blank" rel="noopener noreferrer">上一篇文章</a> 中讲了各种操作符的使用技巧，接上一篇文章中的内容，本次文章主要将流程控制，文章主要内容安排如下：</p>
<ul>
<li><strong>输入输出</strong></li>
<li><strong>顺序结构</strong></li>
<li><strong>分支结构</strong></li>
<li><strong>循环结构</strong></li>
</ul>
<h2> 输入输出</h2>
<p>之前的学习中，我们会发现都是通过定义变量并赋初值的方式来得到一个实现固定好值得变量。加入我们现在不想再以这种方式获取变量值，而想要直接控制变量值，又该怎么做呢？这就涉及到 Java 中的输入输出相关知识了，以下就先来看看，如何实现从控制台输入，并从控制台输出吧。</p>
<h3> 输入</h3>
<p>先来看一个实例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>要实现从控制台输入并读取到我们的程序中时，需要借助 <code>Scanner</code> 类，它属于标准输入流，其步骤总结如下：</p>
<ol>
<li>首先，需要导入 <code>Scanner</code> 类。即 <code>import java.util.Scanner</code>，其中 <code>import</code> 表示导入某个类，并且只能放在程序的开头。</li>
<li>然后创建 <code>Scanner</code> 对象。这里需要注意，创建时需要传入 <code>System.in</code>，表示标准输入流，与之对应的 <code>System.out</code> 则代表标准输出流。</li>
<li>最后就是读取用户输入即可。这里读取时，调用不同的方法 <code>Scanner</code> 会自动转换数据类型，不用我们去进行手动转换。</li>
</ol>
<p>从控制台获取不同类型的输入，其常用方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>boolean</code></td>
<td><code>hasNext()</code></td>
<td>如果还有输入，则返回 <code>true</code>，否则返回 <code>false</code></td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>next()</code></td>
<td>返回输入的字符串，以空格为分隔符</td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>nextLine()</code></td>
<td>返回输入的字符串，以换行为分隔符</td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>nextInt()</code></td>
<td>输入整型数</td>
</tr>
<tr>
<td><code>long</code></td>
<td><code>nextLong()</code></td>
<td>输入长整型数</td>
</tr>
<tr>
<td><code>float</code></td>
<td><code>nextFloat()</code></td>
<td>输入单精度数</td>
</tr>
<tr>
<td><code>double</code></td>
<td><code>nextDouble</code></td>
<td>输入双精度数</td>
</tr>
</tbody>
</table>
<p>这里值得注意的是 <code>next()</code> 和 <code>nextLine</code> 两个方法，虽然他们的作用都是用于获取输入的 <code>String</code> 类型的内容，但是它们具体的处理机制又会有所区别。<br>
针对 <code>next()</code> 而言，它会自动消除有效字符前的空格，从而只返回输入的字符，得到的字符串都不会带有空格。也就是说，当使用 <code>next()</code> 时，如果遇到空格，此时就会停止录入，只录入空格前的内容，而空格后的内容则会保留到缓冲区。除了空格之外，<code>next()</code> 也会对制表符和换行符采用同样的处理方式。<br>
而对 <code>nextLine()</code> 来说，它会返回换行符之前的所有内容，甚至是带空格的字符串。</p>
<p>因此，在使用时一定要注意它们之间的区别，合理搭配使用，从而得到自己想要的结果。</p>
<h3> 输出</h3>
<p>其实从一开始的 <code>hello world</code> 到目前的代码中，我们已经接触过输出了，也就是我们的 <code>System.out.println()</code>。</p>
<p>其中 <code>println</code> 表示输出并换行，如果我们不想换行，则使用 <code>print</code> 就可以了。</p>
<p>通过上述方式所输出的内容都是挤在一起的，十分不方便我们阅读。为了更加清晰的打印出我们所需要的结果，可以使用格式化输出。</p>
<p>要使用格式化输出，需要使用 <code>System.out.printf()</code> 或者 <code>System.out.format()</code> 搭配占位符，然后在后面的参数格式化成指定格式即可，两者达成的效果是等价的。常见的占位符如下：</p>
<table>
<thead>
<tr>
<th>占位符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>%d</code></td>
<td>格式化输出整数</td>
</tr>
<tr>
<td><code>%f</code></td>
<td>格式化输出浮点数</td>
</tr>
<tr>
<td><code>%s</code></td>
<td>格式化输出字符串</td>
</tr>
<tr>
<td><code>%x</code></td>
<td>格式化输出十六进制整数</td>
</tr>
<tr>
<td><code>%e</code></td>
<td>格式化输出科学计数法表示的浮点数</td>
</tr>
</tbody>
</table>
<p>此外，我们还可以使用各种转义字符来使得我们的输出更为简洁，常见的转义字符及意义如下表所示。</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\n</code></td>
<td>换行</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>水平制表符</td>
</tr>
<tr>
<td><code>\\</code></td>
<td>表示一个反斜杠</td>
</tr>
<tr>
<td><code>\'</code></td>
<td>表示一个单引号</td>
</tr>
<tr>
<td><code>\"</code></td>
<td>表示一个双引号</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 顺序结构</h2>
<figure><figcaption>顺序结构</figcaption></figure>
<p>顺序结构如上图所示，它可以说是最简单的，只需要按照解决问题的顺序写出对应的语句即可，其执行顺序是自上而下，依次执行的。就类似于我们求解一道数学题，你得根据题意一步一步来，直至解出最后的答案。</p>
<h2> 分支结构</h2>
<p><br>
上图是分支结构，顺序结构虽然能够处理计算、输出等问题，当遇到需要判断选择时，顺序结构已经不能很好的解决了，此时就需要使用分支结构。<br>
Java 中，分支结构相关的语句主要涉及到 <code>if</code> 和 <code>switch</code> 相关，下面就分别来看一下。</p>
<h3> if</h3>
<ol>
<li><strong>单次判断</strong></li>
</ol>
<p>当我们只进行一次判断时，可以使用一个 <code>if</code> 语句包含一个条件表达式，其语法格式如下；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其执行逻辑如下图所示，如果条件表达式的值为 <code>true</code>，则执行 <code>if</code> 语句块中的执行语句，否则就执行 <code>if</code> 语句块后边的代码；</p>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li><strong>多次判断</strong></li>
</ol>
<p>要进行多次判断时，可以使用 <code>if…else</code> 的形式，其语法格式如下；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其执行逻辑如下图所示，如果条件表达式 1 为 <code>true</code>，则执行执行语句 1，否则接着判断条件表达式 2，若为 <code>true</code>，则执行执行语句 2，以此类推，直到完成最后一个条件表达式的判断。</p>
<figure><figcaption></figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> switch</h3>
<p>当我们需要使用 <code>if</code> 进行判断时，难免显得有些繁琐。此时，我们就可以使用 <code>switch</code> 来进行替代，通过判断一个变量所属范围，从而划分出不同的分支。</p>
<p><code>switch</code> 分支的语法格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过判断表达式的值，然后执行对应值下的执行语句，而 <code>default</code> 下的执行语句表示如果 <code>switch</code> 表达式未匹配到对应的值时所执行的语句；</p>
<p>一个 <code>switch</code> 的实例如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上面的形式之外，也可以使用以下形式：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在使用 <code>switch</code> 分支语法时，需要遵循一定的规则：</p>
<ol>
<li><code>switch</code> 中的变量类型可以是：<code>byte</code>、<code>short</code>、<code>int</code>、<code>char</code>、<code>String</code> （自 JDK 1.7 开始）；</li>
<li><code>switch</code> 语句根据表达式的结果跳转到对应的 <code>case</code> 结果，然后执行其后跟着的语句，直到遇到 <code>break</code> 才结束执行；</li>
<li>默认情况下，一般都会跟着一个 <code>default</code> 的分支，用于未匹配到对应情况时的执行情况；</li>
</ol>
<h2> 循环结构</h2>
<p><br>
上图为循环结构示意，让程序中遇到需要反复执行某一个功能时，我们发现顺序结构以及分支结构实现起来都太过于繁琐，于是又提出了循环结构的相关概念。<br>
通过循环结构，我们就可以通过判断循环语句，然后判断是否进入循环体。Java 中，循环结构主要涉及的语句有 <code>while</code>、<code>for</code>、<code>continue</code>、<code>break</code> 等。</p>
<h3> while</h3>
<p>假设我们现在有一个题目，需要你计算 <code>1 + 2 + 3 + …… + 50</code> 的结果，你会怎么办呢？</p>
<p>这么写么：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这么写就太麻烦了，计算到 50 的值就已经很多了，假如有 1000,10000 甚至更大，那我们岂不是写个好久才能写完。这个时候我们就得找找有没有简单的方法，能够只写几句就实现相同的效果呢？答案是：Yes，这就是我们这一小节将要讲到的循环。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>从上面的实例，利用 <code>while</code> 循环，我们就能轻易达成循环的效果。其语法格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要表达式为 <code>true</code>，就会不断循环执行其中的执行语句，直到表达式为 <code>false</code>，此时便跳出循环，不再执行其中的执行语句。</p>
<p>除开上面的形式之外，还有另一种 <code>while</code> 形式：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两者的最大区别在于：<code>do……while</code> 无论 <code>表达式</code> 是否为 <code>true</code>，都至少会执行一次。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>观察以上两个实例，在 <code>while</code> 程序中，我们定义 <code>num = 10</code>，然后假设 <code>num &lt;= 9</code> 时就进入循环体，而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>10</mn><mo>&gt;</mo><mn>9</mn></mrow><annotation encoding="application/x-tex">10 &gt; 9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">9</span></span></span></span>，所以不进入循环体，直接打印 <code>sum</code> 的值为 <code>0</code>。而在 <code>do…while</code> 程序中，我们同样定义 <code>num = 10</code>，然后假设 <code>num &lt; 10</code> 时继续循环，很明显不满足该情况，理应跳出循环，打印出 <code>sum</code> 的值为 <code>10</code>，说明此时还是进行了一次循环。</p>
<p>因此，当我们需要在 <code>while</code> 和 <code>do……while</code> 之间做出选择时，如果我们最少需要进行一次循环，则选择 <code>do……while</code>，其他情况下选用两者都可以。</p>
<h3> for</h3>
<ul>
<li><strong>普通 for 循环</strong></li>
</ul>
<p>除开 <code>while</code> 和 <code>do……while</code> 之外，我们还有 <code>for</code> 循环来达成同样的结果，只是表达方法不一样。同样以上面计算 <code>1 + 2 + …… + 50</code> 为例，可以写成如下的形式：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p><code>for</code> 循环的语法形式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>for</code> 循环的执行步骤如下：</p>
<ol>
<li>首先执行初始条件，可以声明一种类型，但可以初始化一个或多个循环控制变量，甚至可以放空。</li>
<li>接着判断终止条件，如果为 <code>true</code>，则进入循环体执行循环语句；如果为 <code>false</code>，则终止循环，执行循环体后面的语句。</li>
<li>一次循环完成后，执行更新语句来更新循环控制变量。</li>
<li>最后再次判断终止条件，循环以上三个步骤。</li>
</ol>
<p><code>for</code> 和 <code>while</code> 最大的区别就在于 <code>for</code> 循环一般都是事先知道需要循环的次数的，而 <code>while</code> 循环则不需要。</p>
<ul>
<li><strong>增强 for 循环</strong></li>
</ul>
<p>自 Java 5 后，引入了一种增强型 <code>for</code> 循环，主要用于数字遍历，其语法格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>其中，声明语句一般是声明一个同数组数据类型相同的局部变量，而表达式则是要访问的数组名或者返回值是数组的方法。</p>
<h3> for 和 while 的区别</h3>
<p>经过上面的学习，我们可以发现，基本能用 <code>for</code> 循环的，都能将其改写成 <code>while</code> 循环。而使用 <code>while</code> 循环的，也可以在一定程度上改写成 <code>for</code> 循环。两者的运行规则都是一样的，那针对什么场景该使用 <code>for</code>，什么场景又该使用 <code>while</code> 呢？</p>
<p>通常，如果我们知道循环的次数或者循环的范围，那么我们优先使用 <code>for</code> 循环。如果不知道循环的次数和范围，而只知道循环的结束条件，那么此时优先使用 <code>while</code> 循环。</p>
<h3> continue &amp; break</h3>
<h3> break</h3>
<p>主要用在循环语句或者 <code>switch</code> 语句中，表示跳出最里层的循环，然后继续执行该循环下的语句。</p>
<p><code>break</code> 在 <code>switch</code> 语句中的用法已经见识过了，我们就来看看它在循环中的应用。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>观察结果可知，当 <code>i == 5</code> 时，我们执行了 <code>break</code> 语句，此时就直接跳出了 <code>for</code> 循环，而不再进行下一次的循环。</p>
<h3> continue</h3>
<p><code>continue</code> 也同样是应用在循环控制结构中，主要是让程序跳出当次循环，进而进入下一次循环的迭代。</p>
<p>在 <code>for</code> 循环中，执行 <code>continue</code> 语句后，直接跳转到更新语句，而不再执行 <code>continue</code> 后的语句。而在 <code>while</code> 或 <code>do……while</code> 循环中，执行 <code>continue</code> 语句后，直接跳转到表达式的判断。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>观察上述结果可知，当 <code>i == 5</code> 时，我们执行了 <code>continue</code> 语句，此时便跳出了当次循环，不再进行后边的打印语句，然后继续下一次的循环，所以最终打印的结果没有 5.</p>
<h2> 总结</h2>
<p>今天的内容到此就结束了，老规矩，如果大家觉得有用的话，就给个点赞关注吧！</p>
<p>其次就是对于文中遗漏或者存在欠缺的知识点，还请大家不吝赐教，在评论区指出来！</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<figure><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</div>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">数组操作的奇技淫巧</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220708-how-to-operate-array.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220708-how-to-operate-array.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 数组操作的奇技淫巧</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/2Ff14d3cwjVflhtz67k3vQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/2Ff14d3cwjVflhtz67k3vQ</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 数组操作的奇技淫巧</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/2Ff14d3cwjVflhtz67k3vQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/2Ff14d3cwjVflhtz67k3vQ</a></p>
</div>
<h2> 前言</h2>
<p>前边已经讲过了 Java 中的 8 大基本数据类型，这篇文章主要就来讲讲引用类型中的数组。主要内容安排如下：</p>
<ul>
<li><strong>数组简介</strong></li>
<li><strong>遍历</strong></li>
<li><strong>排序</strong></li>
<li><strong>常用方法</strong></li>
</ul>
<h2> 数组简介</h2>
<p>所谓数组，其实就是多个相同数据类型的元素按一定顺序排列而成的集合。即将有限个类型相同的变量放到一个容器中，然后按照编号去访问各个元素，而这个容器的名字就叫做数组名，各个元素的编号就叫做索引位置。而其中索引位置是从 <code>0</code> 开始计数，而不是我们日常所习惯的 <code>1</code>。</p>
<p>要定义一个数组类型的遍历，其语法为 <code>数据类型 []</code>，比如 <code>int[]</code>，而且在初始化时必须指定数组大小，如 <code>int[] arr = new int[10]</code>，表示 <code>arr</code> 数组可以容纳 <code>10</code> 个 <code>int</code> 类型的元素。</p>
<p>数组的特点：</p>
<ul>
<li>数组中的元素初始化时都是有默认值的，整型对应 <code>0</code>，浮点型对应 <code>0.0</code>，而布尔型对应 <code>false</code>。</li>
<li>数组一经创建，其大小（长度）就不可再变。</li>
<li>要访问数组中的某一元素，需要用到索引，索引从 <code>0</code> 开始。</li>
<li>如果要修改数组中的某一元素，直接对对应索引位置的元素使用赋值语句即可。</li>
</ul>
<p>和变量一样，既然定义了，那么就要对数组进行初始化。所谓数组的初始化，指的是在内存中，为数组容器开辟空间，然后将数据存入容器中的过程。而常用的初始化方式主要有两种：</p>
<ul>
<li><strong>静态初始化</strong></li>
<li><strong>动态初始化</strong></li>
</ul>
<h3> 一维数组</h3>
<h4> 初始化</h4>
<ol>
<li><strong>静态初始化</strong></li>
</ol>
<p>所谓静态初始化，就是在定义数组的同时将其初始化。</p>
<p>静态初始化的完整格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但在开发时，为了方便，也可以对上面的代码进行简写：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>两种方式最终得到的结果是一样的，但第二种更加简洁方便。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>动态初始化</strong></li>
</ol>
<p>动态初始化，就是先声明数组长度定义之后，再由系统对其分配初始值。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS：注意数组的索引位置不能超过数组的长度，如上面例子中的数组长度为 <code>5</code>，所以我们数组的索引位置最大只能为 <code>4</code>，否则就会报数组越界错误。</p>
<h4> 求数组长度</h4>
<p>求数组的长度，利用数组的 <code>length</code> 属性即可；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 二维数组</h3>
<h4> 初始化</h4>
<ol>
<li><strong>静态初始化</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li><strong>动态初始化</strong></li>
</ol>
<p>二维数组动态声明时，一种是把行和列的长度都指定，而另一种是只需要指定行的长度，不用指定列的长度，列的长度会在初始化时自动确认。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 求数组长度</h4>
<p>不同于一维数组，因为二维数组有行和列，所需求长度时需要分别求。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 静态初始化和动态初始化的区别</h3>
<p>上面分别对一维数组和二维数组进行了静态初始化和动态初始化，通过比较总结出两者的区别如下：</p>
<p><strong>动态初始化</strong>：手动指定数组长度，然后由系统给出默认初始化值。</p>
<p><strong>静态初始化</strong>：手动指定数组元素，然后系统会根据元素个数计算出数组长度。</p>
<h2> 数组遍历</h2>
<p>既然我们已经学会了数组的声明及初始化，接下来就是对数组进行操作，而最常见的则是遍历数组。所谓遍历，就是将数组中的所有元素取出来，然后操作这些取出来的元素。</p>
<p>假设我们有一个数组如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 标准 for 循环</h3>
<p>首先，我们来使用标准的 <code>for</code> 循环来遍历该数组，只需要通过数组的索引位置来访问即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 增强 for 循环</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p><strong>两者的区别</strong>：标准 <code>for</code> 循环是通过计数器来进行遍历，我们能够很清晰的得知每个元素所对应的索引位置，而增强 <code>for each</code> 循环则是直接访问数组中的元素值，而不关心每个元素对应的索引位置。</p>
<h3> 标准库遍历</h3>
<p>通过调用标准库 <code>Arrays</code> 中的 <code>toString()</code> 方法，我们可以将任意类型的数组转换为一个字符串表示形式，从而打印出来。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>以上的遍历主要是针对一维数组，而针对二维数组，当我们要访问其中的一个元素时，可以使用 <code>array[row][col]</code> 来进行访问，而对于二维及更多维的数组，可以使用 <code>Arrays.deepToString()</code>。</p>
<h2> 数组排序</h2>
<h3> 使用排序算法</h3>
<p>排序算法多样，最常用的则有 <strong>冒泡排序、插入排序、快速排序等</strong>，进行排序时会修改数组本身；</p>
<p>冒泡排序：经过一轮循环，将最大的数置换到末尾，然后进入下一轮循环，每轮均比上一轮的结束位置靠前一位；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 标准库排序</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 常用方法</h2>
<p>对于数组而言，Java 标准库中已经内置了许多方法，常用的有如下一些方法：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>static String</code></td>
<td><code>toString(Object[] a)</code></td>
<td>输出数组的字符串形式</td>
</tr>
<tr>
<td><code>static &lt;T&gt; List&lt;T&gt;</code></td>
<td><code>asList(T…… a)</code></td>
<td>数组转 <code>List</code></td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>数组相关的内容就到此结束了，主要从 4 个方面简单介绍了数组的一些相关用法，如果你有更多想要了解的内容，欢迎评论区留言交流。最后，都看到这儿了，不给个赞和关注再走么 🤔.</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<figure><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</div>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">面向对象的 3、5 知识点</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220709-oop-1.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220709-oop-1.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 面向对象的 3、5 知识点</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/Z4F7tsjLkPbTGy4_gJPQTw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Z4F7tsjLkPbTGy4_gJPQTw</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 面向对象的 3、5 知识点</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/Z4F7tsjLkPbTGy4_gJPQTw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Z4F7tsjLkPbTGy4_gJPQTw</a></p>
</div>
<h2> 前言</h2>
<p>前面已经讲了 Java 的一些环境搭建、IDE 使用、变量及数据类型、操作符、控制流程以及数组操作，今天就来看看 Java 里边的一个核心思想 - <strong>面向对象编程</strong>。</p>
<h2> 什么是面向对象？</h2>
<p>所谓面向对象，是一种通过对象的方式，将现实中的事物映射到计算机模型的一种编程方法。</p>
<p>对象的含义指的是具体的某一个事物，即我们在现实生活中能够看得见摸得着的。在面向对象程序设计中，对象指的是计算机系统中的某一个成分，主要有两层含义。一个是指 <strong>数据</strong>，另一个则是 <strong>动作</strong>。即对象是两者的结合体，通过对象不仅能够进行操作，还能对操作的结果进行记录。</p>
<p>在这之前，另一种编程方式是 <strong>面向过程</strong>，用一个具体的例子来讲，可以描述成下面这样：</p>
<blockquote>
<p>假如有一天你很想吃酸菜鱼，那么你该怎么办呢？下面就以面向对象和面向过程给你两个选择，让你决定来选哪一个！</p>
<ol>
<li><strong>面向对象</strong>：打开手机，打开外卖软件，搜索酸菜鱼，然后下单，等着外卖送到家就行！</li>
<li><strong>面向过程</strong>：先去买菜，鱼、酸菜、调料……，然后回家杀鱼、切酸菜、切调料……，再接着开始炒，最后做好盛到盘子里！</li>
</ol>
</blockquote>
<p>对比可以发现两者的优缺点：</p>
<ul>
<li><strong>面向过程</strong>
<ul>
<li><strong>优点</strong>：性能好；以例子来说自己做比起点外卖，经济又实惠，还吃得放心。</li>
<li><strong>缺点</strong>：不易维护、不易复用、不易扩展；以例子来讲，要是我们自己做，临时又想吃其他的菜，又得跑去买材料啥的，麻烦！但外卖就不一样了，直接打开手机再点就是。</li>
</ul>
</li>
<li><strong>面向对象</strong>
<ul>
<li><strong>优点</strong>：易维护、易复用、易扩展，也就是面向过程的缺点。</li>
<li><strong>缺点</strong>：性能较差；比起自己做，点外卖成本啥的可能就比较高了。</li>
</ul>
</li>
</ul>
<h2> 面向对象的 5 大原则</h2>
<ol>
<li><strong>单一职责原则 SRP</strong></li>
</ol>
<p>又称为单一功能原则，它规定了一个类应该只有一个发生变化的原因。也就是说类的功能要单一，不能太复杂。</p>
<p>举个例子来说，学校里边有学生、老师、管理员，如果将这些人统一封装在一个类中，那么到时候难以对他们的身份作区分，那么此时按照 SRP 原则，我们就可以将他们各自分为一个类，从而方便管理。</p>
<ol start="2">
<li><strong>开放封闭原则 OCP</strong></li>
</ol>
<p>指一个模块对于扩展是开放的，但对于修改则是封闭的。也就是说可以增加功能，但是不能修改功能。</p>
<p>也就是说，一个类可以进行扩展（添加属性或者方法），但是对于类中已有的属性和方法，不要修改它们。</p>
<ol start="3">
<li><strong>里氏替换原则 LSP</strong></li>
</ol>
<p>指子类能够替换父类出现在父类能够出现的任何地方。</p>
<p>假设有两个类 <code>Father</code> 和 <code>Child</code>，其中 <code>Father</code> 是 <code>Child</code> 的父类，那么在进行调用时，<code>Father</code> 类可以引用 <code>Child</code> 类，反之却不行。</p>
<ol start="4">
<li><strong>依赖倒置原则 DIP</strong></li>
</ol>
<p>高层次的模块不应该依赖于低层次的模块，而应该都依赖于抽象。抽象不应该依赖于具体实现，但具体实现应该依赖于抽象。</p>
<p>也就是说，我们可以将同类事物的共性抽取出来，将其作为这一类事物的“高层次模块”，然后由“低层次模块”来继承或者实现“高层次模块”。</p>
<ol start="5">
<li><strong>接口分离原则 ISP</strong></li>
</ol>
<p>指设计时可以采用多个与特定客户类相关的接口，而不是采用一个通用的接口。</p>
<h2> 面向对象的 3 大特性</h2>
<h3> 封装</h3>
<p>利用抽象数据类型把数据和方法封装在一起，然后共同构成一个相互关联的对象。从而隐藏对象的属性和实现细节，只对外提供访问的接口，提高代码的复用性和安全性。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于以上的 <code>Hero</code> 类，它封装了 <code>name</code> 、<code>skill</code> 等属性，如果我们想要获取 <code>Hero</code> 的 <code>name</code> 和 <code>skill</code> 属性值，那么就只能通过 <code>get()</code> 方法来获取，而如果我们想要改变这两个属性值，也只能通过 <code>set()</code> 方法来进行设置。</p>
<p>封装时，需要注意其原则，对象代码表什么，就封装对应的数据，并提供数据所对应的行为。</p>
<h3> 继承</h3>
<p>定义父类之后，子类可以从基础类进行继承，这样一来，子类就可以获得父类中非 <code>private</code> 的属性和方法，从而提高了代码的复用性。</p>
<p>继承实现了 <code>IS-A</code> 关系，假设我们现在有一个类 <code>Shooter</code> 继承自 <code>Hero</code>，那么此时我们就可以定义一个父类引用，然后将该引用指向它的子类对象。</p>
<p><code>Java</code> 中提供了一个关键字 <code>extends</code>，从而让一个类和另一个类建立起继承关系，其格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，被继承的类叫做父类（也叫超类或基类），如上述代码中的 <code>Hero</code>，另外一个类则叫做子类（也叫派生类），比如上面的 <code>Shooter</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是要注意一点：<strong>在 Java 中，类只能单继承</strong>。</p>
<h3> 多态</h3>
<p>所谓多态，就是同类型的对象，表现出的不同形态，表现形式为：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指的是父类或者接口定义的引用变量可以指向子类或具体实现类的实例对象，提高程序的扩展性。</p>
<p>多态又可以分为编译时多态和运行时多态，其中，编译时多态是指方法的重载，而运行时多态则指的是程序中定义的对象引用所指向的具体类型在运行期间才能确定下来。</p>
<p>要确定一个多态是编译时还是运行时多态，可以通过以下三个条件来区分：</p>
<ul>
<li><strong>继承</strong></li>
<li><strong>覆盖（重写）</strong></li>
<li><strong>向上转型</strong></li>
</ul>
<p>如果同时满足以上三个条件，那么此时多态是运行时多态。</p>
<p>多态中，调用成员变量和成员方法时，遵循以下原则。</p>
<ol>
<li><strong>调用成员变量：编译看左边，运行也看左边</strong>：指 <code>javac</code>  编译时，会看左边的父类中是否有该变量，如果有则编译成功，如果没有就会编译失败。而用 <code>java</code>  运行代码时，实际获取的成员变量是父类中的值。</li>
<li><strong>调用成员方法：编译看左边，运行看右边</strong>：指 <code>javac</code> 编译时，会看左边的父类中是否有该方法，如果有则编译成功，如果没有就会编译失败。而用 <code>java</code> 运行代码时，实际调用的是子类中的方法。</li>
</ol>
<h2> 总结</h2>
<p>以上就是关于面向对象编程思想的一些简单知识介绍了，主要讲了面向对象的概念，面向对象的 3 大特性以及面向对象的 5 大原则。如果觉得本文对你有所帮助，那就来个一键三连再走吧！</p>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">类的相关知识</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220710-oop-2.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220710-oop-2.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 类的相关知识</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/1BPFnyNuC3fdYBVxP7J3VA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/1BPFnyNuC3fdYBVxP7J3VA</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 类的相关知识</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/1BPFnyNuC3fdYBVxP7J3VA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/1BPFnyNuC3fdYBVxP7J3VA</a></p>
</div>
<h2> 前言</h2>
<p>学习了面向对象编程的思想，今天就来看看面向对象编程思想在 Java 中的体现 - 类。以及有关类的相关知识，比如属性、方法、引用等。</p>
<h2> 类与对象</h2>
<p>以我们日常生活为例，我们现在很多人都养宠物，而宠物 <strong>都有一些共同状态</strong>，比如名字、毛色、年龄…… 这样一来我们就可以设计一个叫做<strong>类</strong>的东西，用来 <strong>代表宠物</strong> 这一类事物。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这个类之后，它就相当于我们的一个模板，根据这个模板我们就能够创建一个个具体的宠物，而这些宠物，就叫做 <strong>对象</strong>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结起来，类就是对对象所共有特征的描述，而对象则是真实存在的具体实例。在 Java 中，必须先设计类，然后才能创建并使用对象。</p>
<h2> 属性</h2>
<p>每个宠物都有自己的名字、毛色和年龄等一系列状态，而这些状态就叫做一个类的<strong>属性</strong>。而属性的类型既可以是基本类型（比如上述例子中的 <code>int</code>），也可以是引用类型（上述例子中的 <code>String</code>）。而在 Java 语言中，这些属性就叫做成员变量。成员变量的命名虽然没有强制规定，但是一般都是有一套大家通用的命名方法，即：</p>
<blockquote>
<p>若成员变量是一个单词组成，那么一般都是小写。</p>
<p>若成员变量是多个单词组成，那么则采用驼峰法。</p>
<p>关于更多的命名规定，推荐参考阿里巴巴出品的 《Java 开发手册》，下载地址：<a href="https://github.com/cunyu1943/ebooks" target="_blank" rel="noopener noreferrer">https://github.com/cunyu1943/ebooks</a></p>
</blockquote>
<p>成员变量的完整定义格式语如下，一般来说无需指定初始化值，它是存在默认值的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>数据类型</th>
<th>明细</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>基本类型</td>
<td><code>byte</code>、<code>short</code>、<code>char</code>、<code>int</code>、<code>long</code></td>
<td>0</td>
</tr>
<tr>
<td>基本类型</td>
<td><code>float</code>、<code>double</code></td>
<td>0.0</td>
</tr>
<tr>
<td>基本类型</td>
<td><code>boolean</code></td>
<td><code>false</code></td>
</tr>
<tr>
<td>引用类型</td>
<td>类、接口、数组、<code>String</code></td>
<td><code>null</code></td>
</tr>
</tbody>
</table>
<p>要访问属性，通常需要先创建一个对象，然后通过<strong>对象名.成员变量</strong>的方式来进行访问。</p>
<h2> 方法</h2>
<h3> 方法的定义</h3>
<p>而除开属性之后，每个对象还能够有许多其他的功能，就像宠物都能吃东西、会叫……，那么这些他们能够做的事情，在类里边就可以用 <strong>方法</strong> 来进行表示。所谓方法就是程序中最小的执行单元，一般用于封装重复且具有独立功能的代码，从而提高代码的复用性和可维护性。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法的定义格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，修饰符主要有以下 4 种不同的访问权限：</p>
<ol>
<li><code>default</code>：默认什么都不写的情况，表示在同一个包内可见，主要用于修饰类、接口、变量、方法。</li>
<li><code>private</code>：表示在同一类中可见，常用于修饰变量和方法，但要注意，它不能用来修饰类（外部类）。</li>
<li><code>protected</code>：表示对同一个包内的类和所有子类可见，常用于修饰变量、方法，同样的，它也不能修饰类（外部类）。</li>
<li><code>public</code>：表示对所有类可见，常用于修饰类、接口、变量、方法。</li>
</ol>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>当前类</th>
<th>同一包内</th>
<th>子类（同一包）</th>
<th>子类（不同包）</th>
<th>其他包</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>private</code></td>
<td>✅</td>
<td>❎</td>
<td>❎</td>
<td>❎</td>
<td>❎</td>
</tr>
<tr>
<td><code>default</code></td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❎</td>
<td>❎</td>
</tr>
<tr>
<td><code>protected</code></td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❎</td>
</tr>
<tr>
<td><code>public</code></td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
</tbody>
</table>
<p>同样的，和属性一样，如果要调用一个方法，那么也需要先创建一个 Java 对象，然后通过**对象名.方法名(……)**的形式调用。</p>
<h3> 方法的分类</h3>
<p>而对于方法，也有需要注意的几点：</p>
<ol>
<li>方法是可以有返回值的，如果要返回对应值，则其返回值的类型要与返回值相对于，对于不需要返回值的方法，则将其返回类型设置为 <code>void</code>；</li>
<li>方法是可以有参数的，我们上述例子的方法中都是不带参数的，但如果我们有需要，就可以加上自己需要的参数，但此时注意要带上参数的类型；</li>
</ol>
<p>总结起来，可以分为如下四种方法：</p>
<ol>
<li><strong>无参无返回值</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>无参有返回值</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li><strong>有参无返回值</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li><strong>有参有返回值</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而对于方法命名的方式，也是有一定讲究的。因为一般而言方法都是一个类的动作行为，所以 <strong>一般都是以动词开头，而如果有多个单词组合，则除开第一个单词全部小写之外，后面每个单词的第一个字母都要使用大写</strong>。</p>
<p>注意到这里有个关键字 <code>return</code>，它主要用于设置方法的返回。</p>
<p>如果一个方法没有返回值，那么此时可以省略不写，一旦书写，那么就代表着该方法结束。比如，以下这个方法的两种书写方式最终效果都是一样的。</p>
<ul>
<li>带 <code>return</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>不带 <code>return</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而如果一个方法有返回值，那么此时 <code>return</code> 就必须写，它表示结束方法并返回结果。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 重写与重载</h3>
<p>此外，既然提到了方法，那肯定少不了重写和重载了，下面就来看看重写和重载之间的区别。</p>
<ol>
<li><strong>重写</strong></li>
</ol>
<p>所谓重写，其实就是子类对父类中允许访问的方法的实现过程进行加工重新编写，是面向对象编程中多态性的体现，通常发生在父类和子类之间。</p>
<p>重写时，方法的参数和返回值都不能改变。通过重写，子类可以根据自己的需要，从而去重新定义区别于父类的行为。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>重载</strong></li>
</ol>
<p>而重载则是让类以统一的方式来处理不同类型数据的一种方式。一个类中存在多个同名方法，但他们具有不同的参数个数或者类型。</p>
<p>简单来说，就是在 Java 的一个类中，我们可以创建多个相同名字的方法，但是这些方法之间的参数和返回值有所不同。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 参数传递机制</h3>
<p>了解参数传递前，先来了解下形参和实参的相关概念。</p>
<p><strong>实参</strong>，指在调用时所传递给方法的参数，可以是常量、变量、表达式、函数等。无论实参是何种类型的值，在进行方法调用时，都必须有确定的值，从而将这些值传递给形参。</p>
<p><strong>形参</strong>，在方法定义时，<code>()</code> 中所声明的参数，目的是用来接收调用方法时传入的参数。不是实际存在的变量，所以又叫做虚拟变量。</p>
<p>Java 中，方法的参数传递都是通过<strong>值传递</strong>的机制来实现的。所谓值传递，就是在传输实参给方法的形参时，并非传输的是实参变量本身，而是通过传输实参变量中所存储的值。</p>
<p>但是要注意区分的是，Java 中的<strong>基本数据类型的参数传输的是存储的数据值</strong>，而<strong>引用类型的参数传输的是存储的地址值</strong>。</p>
<h2> 构造方法</h2>
<p>上面我们说了实例（也就是对象）和属性，那么当我们创建一个实例的时候，通常我们想要把它的属性也给它设置好。为了实现这一功能，这时候我们可以添加方法，从而达到这一目的，以上述设置宠物的年龄为例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现通过上述调用方法的方式是可以完成这一目的的，但假设我们需要设置的属性很多，此时要全部设置属性值时就需要调用许多次 <code>setter</code> 方法，一旦遗漏一个，则实例内部状态就紊乱了。那我们就想了，有没有一种简单点的方法，能够让我们在创建实例对象的同时就把内部属性初始化了呢？</p>
<p>答案是：Yes！🎉🎉🎉</p>
<p>这时候我们就可以用到一类特殊的方法 - <strong>构造方法</strong>，所谓构造方法，就是定义在类中可以用来初始化一个类的对象，并返回对象的地址，以下就来看看这个构造方法的特殊之处。构造方法的格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实在上面我们创建实例的时候就已经调用了构造方法了，只不过它是没有带任何参数的构造方法。以上述动物类 <code>Pet</code> 为实例，我们来看看如何编写它的构造方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上我们只是给出了无参的构造方法和带了所有属性的构造方法，除了上面的两个构造方法之外，我们还可以根据需要创建带有部分属性的构造方法。</p>
<p>其中，无参构造方法（默认存在）在初始化对象时，成员变量的数据均采用的默认值，而有参构造方法在初始化对象时，同时可以接收参数来给对象赋值。</p>
<p>经过对比可以发现，相比于普通的方法，构造方法有着明显的特点：</p>
<ol>
<li><strong>没有返回值</strong>：是的，无论是带参还是不带参的构造函数，它们都是没有返回值的，而它也是 <strong>每个类默认的构造方法</strong>。</li>
<li><strong>方法名同类名一样</strong>：必须确保构造方法的名字和类名一致，否则它就不是构造方法了。</li>
</ol>
<p>有了构造方法之后，我们创建实例时就可以直接给它初始化了，而不用再去麻烦地调用各个 <code>setter</code> 方法来初始化实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🎈 Tips：对于实例的属性值，在未经构造方法初始化时，各数据类型都有默认值，整型默认值为 <code>0</code>，浮点型默认值为 <code>0.0</code>，布尔类型默认值为 <code>false</code>，引用类型默认值为 <code>null</code>。</p>
<h2> 引用</h2>
<p>既然知道了什么是面向对象以及面向对象中的一些关键知识点如对象、属性、方法的概念，那我们就趁热来看看啥是引用。</p>
<p>所谓引用，其实在之前学习的时候就已经涉及到了。你是否还记得 <code>String</code> 这个特殊的数据类型，其实在我们创建一个 <code>String</code> 对象时，也就创建了一个引用。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 <code>str</code> 既是一个变量，也是一个引用，指向一个值为 <code>"村雨遥"</code> 的 <code>String</code> 对象，后续如果我们要访问这个 <code>String</code> 对象，就需要使用 <code>str</code> 这个引用来代表它。</p>
<figure><figcaption></figcaption></figure>
<p>以上我们说的是一个引用指向一个对象，但是我们也可以用多个引用指向同一个对象。就好比你家买了一辆车，不仅你可以开，你老婆也可以开，你爸妈也可以开。而这时候的车就好比一个“对象”，而使用它的人就是多个“引用”。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> JavaBean</h2>
<p><code>JavaBean</code> 也可以称为实体类，其对象可以用在程序中封装数据。对于一个标准的 <code>JavaBean</code>，定义时需要满足以下要求：</p>
<ul>
<li>成员变量均使用 <code>private</code> 修饰。</li>
<li>提供成员变量所对应的 <code>getXxx()/setXxx()</code> 方法。</li>
<li>必须提供一个标准的无参构造器，而有参构造器则是可写可不写。</li>
</ul>
<h2> 总结</h2>
<p>今天的内容就到此结束了，主要对面向对象中的类、对象、属性、方法、构造方法以及引用做了介绍，关于更多面向对象的知识，我们下一篇文章再见！</p>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">包和 jar 文件的创建</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220711-oop-3.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220711-oop-3.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 包和 jar 文件的创建</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/l4O4bhDMgHamQ5DVPcqUYA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/l4O4bhDMgHamQ5DVPcqUYA</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 包和 jar 文件的创建</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/l4O4bhDMgHamQ5DVPcqUYA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/l4O4bhDMgHamQ5DVPcqUYA</a></p>
</div>
<h2> 前言</h2>
<p>在之前的文章中，讲到了面向的 3 大特性（<strong>封装、继承、多态</strong>）和面向对象设计的 5 大原则（SRP、OCP、LSP、DIP、ISP）。此外，我们还讲了如何创建一个类，并且在创建类后如何构造一个对象。然后还介绍了类中的属性和方法，并对构造方法和引用也做了简单的讲解。</p>
<p>有了上面的基础之后，今天我们来继续学习面向对象的相关知识，主要内容预告如下：</p>
<ul>
<li><strong>包</strong></li>
<li><strong>注释</strong></li>
<li><strong>jar 文件的创建</strong></li>
</ul>
<h2> 包</h2>
<p>假设现在有这么一种情况，诸葛亮、周瑜、曹操共同开发一款程序。其中，周瑜和曹操均在自己代码模块中写了一个 <code>PublicUtil</code> 类，现在诸葛亮要调用周瑜和曹操模块中代码，需要同时用到他们中的 <code>PublicUtil</code> 类，这时候就犯难了，诸葛亮在他的代码中使用 <code>PublicUtil</code> 类时，该怎么区分是调用周瑜的，还是调用的曹操的呢？</p>
<p>针对这个问题，开发 Java 的前辈们当然也想到了。于是，他们在 Java 中定义了一种名字空间，也就是我们今天要讲的包：<code>package</code>。通过使用包机制，就十分容易区别类名的命名空间了。</p>
<p>一般包名的规则为：公司域名反写 + 包的作用，而且全部都要用英文小写。</p>
<p>假设曹操的 <code>PublicUtil</code> 类代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>周瑜的 <code>PublicUtil</code> 类代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，如果诸葛亮要同时使用他们俩代码中的 <code>PublicUtil</code> 类，此时就可以通过引入他们俩的包，然后通过使用 <code>包名.类名</code> 的引用方式来进行区分即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码中的 <code>import</code> 你可能也在其他代码中见到过，但你不知道啥作用。其实它就是为了包的使用而生，如果我要使用另一个人的包，那该怎么做呢？其实很简单，只需要在程序中使用关键字 <code>import</code> 即可完成包的导入。</p>
<p>通过使用包，可以达到以下的作用：</p>
<ol>
<li>将功能类似或或相关的类以及接口组织放在同一个包中，方便类的查找与使用。</li>
<li>包也像文件夹一样，采用了树形目录的存储方式。同一个包中的类名不同，不同包中的类名可以相同。当同时调用两个不同包中的同一类名的类时，通过加上完整的包名就可以加以区分，从而避免类名冲突。</li>
<li>同时包也限定了访问权限，只有拥有包访问权限的类才能间接去访问包中的类。</li>
</ol>
<h2> 注释</h2>
<p>所谓注释，就是写在程序里边对代码进行结束说明的文字，既方便自己也方便他人查看，更快理解程序含义。而且注释是不影响程序的执行的，在我们对 Java 源代码进行编译后，字节码文件中不含源代码中的注释内容。</p>
<p>在 Java 中，通常支持三种注释方式，它们分别是：</p>
<ul>
<li><code>//</code>：单行注释</li>
<li><code>/* */</code>：多行注释</li>
<li><code>/** */</code>：文档注释</li>
</ul>
<h3> 单行注释</h3>
<p>单行注释是以双斜杠 <code>//</code> 来标识，表示只注释当前行内容，一般用在需要注释的内容较少的地方，以下就是一个单行注释的实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 多行注释</h3>
<p>通常我们把要注释的内容放在 <code>/*</code> 和 <code>*/</code> 之间，表示在两者之间的内容都是我们的注释内容，以下是一个多行注释的实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 文档注释</h3>
<p>文档注释和多行注释很像，它是将我们所需要注释的内容包含在 <code>/**</code> 和 <code>*/</code> 之间。而文档注释和其他两种注释最大的区别就在于：我们可以利用 <code>javadoc</code> 工具来提取文档注释，然后生成一个 HTML 文档，类似于 Java 官网所提供的 API 文档，以下是一个文档注释的实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们通过终端，使用 <code>javadoc</code> 命令就可以为上述文件生成一个 HTML 文档。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而文档注释相比于其他两种注释，也有更多值得注意的地方，下面就分别来看看需要留意的地方。</p>
<ol>
<li><strong>常用文档注释分类</strong></li>
</ol>
<ul>
<li><strong>类注释</strong></li>
</ul>
<p>顾名思义，所谓类注释，就是针对整个类的说明，它必须放在 <code>import</code> 之后，但又必须放在类定义之前。以下是一个类注释的实例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要注意的是，在 <code>/**</code> 和 <code>*/</code> 之间的其他行注释，<code>*</code> 是可有可无的，之所以加上，更大情况出于美观的考虑，上面的实例写成如下样式也是合法的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>方法注释</strong></li>
</ul>
<p>同样的，方法注释也就是针对类中方法的注释，它必须放在所描述的方法之前。而一般情况下，除开说明该方法的功能之外，我们经常使用如下标记来对方法进行注释。</p>
<table>
<thead>
<tr>
<th>标记</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@param variable description</code></td>
<td>用于介绍当前方法的参数，可以占据多行</td>
</tr>
<tr>
<td><code>@return description</code></td>
<td>用于描述当前方法的返回值，可以跨多行</td>
</tr>
<tr>
<td><code>@throws class description</code></td>
<td>用于表示该方法有可能抛出的异常</td>
</tr>
</tbody>
</table>
<p>以下就是一个方法注释的实例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>字段注释</strong></li>
</ul>
<p>字段注释顾名思义，也就是对于类中字段的说明，用于描述字段的含义，以下是一个字段注释的例子。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，如果你不喜欢把一个字段的注释分成多行的话，也可以写成以下格式。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两种方式都是可以的，也没有优劣之分，可以根据自己的风格来选择。但是在 IntelliJ IDEA 等 IDE 中，如果对代码进行格式化，IDEA 会将第二种方式格式化成第一种方式，这一点需要注意。</p>
<ol start="2">
<li><strong>如何提取文档注释</strong></li>
</ol>
<p>假设有以下一段代码，我们需要生成关于代码的文档说明。那么就可以使用 JDK 中所提供的 <code>javadoc</code> 命令来提取代码的文档注释。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后利用以下命令就可以生成我们的文档注释。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上命令的意思就是，对名为 <code>HelloWorld.java</code> 的提取其中的文档注释，并将输出的文件放在 <code>helloworld</code> 文件夹下，并且在文档中包含程序作者和版本，编码方式为 <code>UTF-8</code>。</p>
<figure><figcaption></figcaption></figure>
<p>生成的文件列表详情见下图，打开其中的 <code>index.html</code> 就可以查看提取的文档注释。</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h2> jar 文件的创建</h2>
<p>其实关于这个，我在之前的文章也写过。不过我是利用 IntelliJ IDEA 来对进行代码的打包，如果感兴趣，可以点击下方传送门去看看。</p>
<blockquote>
<p><a href="https://cunyu1943.github.io/JavaPark/dev-tools/idea/java-quick-start-with-idea" title="如何利用 IntelliJ IDEA 创建 Java 入门应用" target="_blank" rel="noopener noreferrer">如何利用 IntelliJ IDEA 创建 Java 入门应用</a></p>
</blockquote>
<p>不过那是借助工具来生成的，今天我们来看看如何利用 JDK 所提供的命令行工具，来创建一个能打印出 <code>Hello World!</code> 的 <code>jar</code> 包。</p>
<p>同样的，我们仍然是需要先准备一个能输出 <code>Hello World!</code> 的 Java 源代码，命名为 <code>HelloWorld.java</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，利用 <code>javac</code> 命令对该文件进行编译，然后会生成 <code>HelloWorld.class</code> 字节码文件。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，利用 <code>jar</code> 命令来对生成的字节码文件进行打包。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 <code>c</code> 表示创建一个新 <code>jar</code> 包，<code>v</code> 表示创建过程中打印创建过程中的信息，<code>f</code> 则表示对新生成的 <code>jar</code> 命名。</p>
<p>最后，利用以下命令来运行 <code>jar</code> 包。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不过并不会顺利出现我们想要的结果，此时会报错 <code>hello.jar</code> 中没有主清单属性。这是因为我们还没有在 <code>MENIFEST.MF</code> 文件中添加 <code>Main-Class</code> 属性。<br>
</p>
<p>用压缩软件打开刚创建的 <code>hello.jar</code>，里边除了 <code>HelloWorld.class</code> 文件之外，还会多一个 <code>META-INF</code> 文件夹，里边还有一个 <code>MENIFEST.MF</code> 文件，此时我们只需要用编辑器打开该文件，然后在文件中加入以下代码。（<strong>记得添加之后要保证整个文件最后保留一行空行</strong>）</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>添加完成之后，再次运行 <code>java -jar hello.jar</code> ，就可以成功在控制台打印 <code>Hello World!</code> 了。</p>
<h2> 总结</h2>
<p>以上就是今天博客的所有内容了，如果您觉得本文不错，那就来个一键三连吧，您的关注就是我坚持的不懈动力！</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<figure><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</div>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">成员变量、实例变量、静态变量、局部变量</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220712-all-kinds-of-variable.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220712-all-kinds-of-variable.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 成员变量、实例变量、静态变量、局部变量</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>学习 Java 的过程中，一开始很容易被这些各种变量绕晕，这篇博客主要介绍了这几种变量之间的关系和区别。</p>
<h2> 实例</h2>
<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>cunyu<span class="token punctuation">.</span>demo</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token comment">//成员变量、实例变量</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token comment">//成员变量、实例变量</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token constant">ID</span><span class="token punctuation">;</span>  <span class="token comment">//成员变量、实例变量</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> school <span class="token operator">=</span> <span class="token string">"卡塞尔学院"</span><span class="token punctuation">;</span>  <span class="token comment">//成员变量、静态变量(类变量)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> level <span class="token operator">=</span> <span class="token string">"SSS"</span><span class="token punctuation">;</span>    <span class="token comment">//成员变量、静态变量(类变量)</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">ID</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token constant">ID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">ID</span> <span class="token operator">=</span> <span class="token constant">ID</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">String</span> subject1 <span class="token operator">=</span> <span class="token string">"屠龙"</span><span class="token punctuation">;</span>  <span class="token comment">//局部变量</span>
            <span class="token class-name">String</span> subject2 <span class="token operator">=</span> <span class="token string">"炼金术"</span><span class="token punctuation">;</span> <span class="token comment">//局部变量</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学习科目： "</span> <span class="token operator">+</span> subject1 <span class="token operator">+</span> <span class="token string">"、"</span> <span class="token operator">+</span> subject2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Demo</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        demo<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        demo<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">14000001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        demo<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"楚子航"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ID: "</span> <span class="token operator">+</span> demo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Age: "</span> <span class="token operator">+</span> demo<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Name: "</span> <span class="token operator">+</span> demo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"主修科目： "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        demo<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学院："</span> <span class="token operator">+</span> <span class="token class-name">Demo</span><span class="token punctuation">.</span>school<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"等级："</span> <span class="token operator">+</span> <span class="token class-name">Demo</span><span class="token punctuation">.</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></summary>
    <content type="html"><![CDATA[<h1> 成员变量、实例变量、静态变量、局部变量</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>学习 Java 的过程中，一开始很容易被这些各种变量绕晕，这篇博客主要介绍了这几种变量之间的关系和区别。</p>
<h2> 实例</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 各变量联系与区别</h2>
<h3> 成员变量</h3>
<p>作用范围是整个类，相当于 C 语言中的全局变量，定义在方法体和语句块之外，一般定义在类的声明之下；成员变量包括实例变量和静态变量(类变量)。</p>
<h3> 实例变量</h3>
<p>独立于与方法之外的变量，无 <code>static</code> 修饰，声明在一个类中，但在方法、构造方法和语句块之外，数值型变量默认值为 0，布尔型默认值为 <code>false</code>，引用类型默认值为 <code>null</code>。</p>
<h3> 静态变量(类变量)</h3>
<p>独立于方法之外的变量，用 <code>static</code> 修饰，默认值与实例变量相似，一个类中只有一份，属于对象共有，存储在静态存储区，经常被声明为常量，调用一般是类名.静态变量名，也可以用对象名.静态变量名调用。</p>
<h3> 局部变量</h3>
<p>类的方法中的变量，访问修饰符不能用于局部变量，声明在方法、构造方法或语句块中，在栈上分配，无默认值，必须经初始化。</p>
<h3> 成员变量 VS 局部变量</h3>
<table>
<thead>
<tr>
<th>区别</th>
<th>成员变量</th>
<th>局部变量</th>
</tr>
</thead>
<tbody>
<tr>
<td>类中位置不同</td>
<td>类中、方法外</td>
<td>方法中</td>
</tr>
<tr>
<td>初始化值不同</td>
<td>有初始值，无需初始化</td>
<td>无默认值，使用前需完成赋值</td>
</tr>
<tr>
<td>内存位置不同</td>
<td>堆内存</td>
<td>栈内存</td>
</tr>
<tr>
<td>生命周期不同</td>
<td>随对象创建而存在，随对象的消失而消失</td>
<td>随方法的调用而存在，随方法的运行结束而消失</td>
</tr>
<tr>
<td>作用域</td>
<td></td>
<td>所属大括号</td>
</tr>
</tbody>
</table>
<h2> 总结</h2>
<p>以上就是关于 Java 编程中，静态变量、类变量、实例变量、局部变量以及成员变量之间的相关区别了。读完本文，你是否对这几个变量之间能进行一定程度上的区分了呢？</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<figure><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</div>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">String 详解</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220713-string.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220713-string.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> String 详解</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 概述</h2>
<p><code>String</code> 类代表字符串，定义的变量可以用来指向字符串对象，然后操作该字符串，同时还提供了许多用于操作字符串的功能。Java 中，所有的字符串都用双引号 <code>""</code> 括起来。</p>
<p>此外，<code>String</code> 是不可变的字符串类型，它的对象一旦创建，就不能够再被更改。</p>]]></summary>
    <content type="html"><![CDATA[<h1> String 详解</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 概述</h2>
<p><code>String</code> 类代表字符串，定义的变量可以用来指向字符串对象，然后操作该字符串，同时还提供了许多用于操作字符串的功能。Java 中，所有的字符串都用双引号 <code>""</code> 括起来。</p>
<p>此外，<code>String</code> 是不可变的字符串类型，它的对象一旦创建，就不能够再被更改。</p>
<p>但在实际使用过程中，给我们的实际观感可能会觉得 <code>String</code> 是可变的，但实际上 <code>String</code> 每次的修改都是产生并指向了新的字符串对象，原来的字符串对象实际上是没有改变的。</p>
<h2> 创建对象的两种方式</h2>
<ol>
<li>直接赋值</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li>通过构造方法创建</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>构造方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public String()</code></td>
<td>创建一个不含任何内容的空白字符串对象</td>
</tr>
<tr>
<td><code>public String(String original)</code></td>
<td>根据传入的字符串内容来创建字符串对象</td>
</tr>
<tr>
<td><code>public String(char[] chs)</code></td>
<td>根据字符串数组的内容来创建字符串对象</td>
</tr>
<tr>
<td><code>public String(bytes[] chs)</code></td>
<td>根据字节数组的内容来创建字符串对象</td>
</tr>
</tbody>
</table>
<p>两者的区别在于，利用 <code>""</code> 方式所给出的字符串对象，存储在字符串常量池中，而且相同内容只会在其中存储一份。但是通过构造方法 <code>new</code> 对象，每次 <code>new</code> 都会产生一个新对象，它们是存放在堆内存中的。</p>
<p>这里要注意，任何类型的数据与字符串相加时，得到的会是一个字符串。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 字符串常用 API</h2>
<h3> public boolean equals(Object anotherObject)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>将此字符串与指定对象比较，只关心字符串内容是否一致。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> public boolean equalsIgnoreCase(String anotherString)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>将此字符串与指定对象进行比较，忽略大小写比较字符串内容是否一致。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> public int length()</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>求字符串长度。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> public char charAt(int index)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>获取某个索引位置处的字符。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> public char[] toCharArray()</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>字符串转换为字符串数组。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> public String substring(int beginIndex, int endIndex)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>根据开始和结束索引进行截取得到新的子串（左闭右开）。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> public String replace(CharSequence target, CharSequence replacement)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>使用新值将字符串中的旧值替换得到新字符串。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> public String[] split(String regex)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>通过正则规则切割字符串，得到字符串数组。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> StringBuilder</h2>
<p><code>StringBuilder</code> 可以看做一个容器，创建后其中的内容可变，主要是为了提高字符串 <code>String</code> 的操作效率。</p>
<h3> 构造方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public StringBuilder()</code></td>
<td>创建一个不含任何内容的空白可变字符串对象</td>
</tr>
<tr>
<td><code>public StringBuilder(String str)</code></td>
<td>根据字符串内容，创建可变字符串对象</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 常用方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public int length()</code></td>
<td>返回字符串长度</td>
</tr>
<tr>
<td><code>public String toString()</code></td>
<td>将 <code>StringBuilder</code> 转换为 <code>String</code></td>
</tr>
<tr>
<td><code>public StringBuilder append(Object obj)</code></td>
<td>添加数据并返回对象本身</td>
</tr>
<tr>
<td><code>public StringBuilder reverse()</code></td>
<td>反转容器中的内容</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> StringJoiner</h2>
<p>类似于 <code>StringBuilder</code>，都可以把它们看做是一个容器，而且它们里面的内容还是可变的，而它的出现也是为了提高操作字符串的效率。</p>
<h3> 构造方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public StringJoiner(间隔符)</code></td>
<td>创建一个 <code>StringJoiner</code> 对象并指定拼接时的间隔符</td>
</tr>
<tr>
<td><code>public StringJoiner(间隔符, 开始符号, 结束符号)</code></td>
<td>创建一个 <code>StringJoiner</code> 对象并指定拼接时的间隔符、开始符号、结束符号</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 常用方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public StringJoiner add(Object obj)</code></td>
<td>添加数据后返回对象本身</td>
</tr>
<tr>
<td><code>public int length()</code></td>
<td>返回字符串长度</td>
</tr>
<tr>
<td><code>public String toString()</code></td>
<td>将 <code>StringJoiner</code> 转换为 <code>String</code></td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>以上就是关于 <code>Java</code> 中字符串的相关知识点了，主要介绍了 <code>String</code> 类创建对象的两种方式以及常用 <code>API</code>。此外，为了提高字符串的操作效率，还了解 <code>StringBuilder</code> 和 <code>StringJoiner</code> 的构造方法以及常用方法，方便后续编程中使用。</p>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">ArrayList 详解</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220714-arraylist.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220714-arraylist.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> ArrayList 详解</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 概述</h2>
<p><code>ArrayList</code> 代表的是集合类，集合是一种容器，类似于数组。不同的是数组一旦定义后，其类型和长度就固定了，但集合的大小却是动态变化的，而且其中的元素类型也是动态的。</p>
<p>因此，数组更适合数据个数和类型确定的场景，而集合则更适合数据个数不确定，且需要做增删元素的场景。</p>]]></summary>
    <content type="html"><![CDATA[<h1> ArrayList 详解</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 概述</h2>
<p><code>ArrayList</code> 代表的是集合类，集合是一种容器，类似于数组。不同的是数组一旦定义后，其类型和长度就固定了，但集合的大小却是动态变化的，而且其中的元素类型也是动态的。</p>
<p>因此，数组更适合数据个数和类型确定的场景，而集合则更适合数据个数不确定，且需要做增删元素的场景。</p>
<h2> 泛型支持</h2>
<p><code>ArrayList&lt;E&gt;</code> 实际上就是一个泛型类，能够在编译阶段约束集合对象只能操作某种数据类型。而且这里的数据类型只能是引用类型，而不能是基本数据类型。</p>
<table>
<thead>
<tr>
<th>正确</th>
<th>错误</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;;</code></td>
<td><code>ArrayList&lt;int&gt; list = new ArrayList&lt;&gt;;</code></td>
</tr>
</tbody>
</table>
<h2> 构造方法</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public ArrayList()</code></td>
<td>创建一个初始容量为 10 的空列表</td>
</tr>
<tr>
<td><code>public ArrayList(int initialCapacity)</code></td>
<td>创建一个指定容量的空列表</td>
</tr>
<tr>
<td><code>public ArrayList(Collection&lt;? extends E&gt; c)</code></td>
<td>创建一个包含指定集合中元素的列表</td>
</tr>
</tbody>
</table>
<h2> 常用方法</h2>
<h3> 元素个数</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public int size()</code></td>
<td>返回集合中的元素个数</td>
</tr>
</tbody>
</table>
<h3> 元素获取</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public E get(int index)</code></td>
<td>获取索引位置为 <code>index</code> 的元素</td>
</tr>
</tbody>
</table>
<h3> 元素新增</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void add(int index, E element)</code></td>
<td>在指定索引位置 <code>index</code> 新增元素 <code>element</code></td>
</tr>
<tr>
<td><code>boolean add(E element)</code></td>
<td>在列表末尾新增一个元素 <code>element</code></td>
</tr>
</tbody>
</table>
<h3> 元素删除</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public E remove(int index)</code></td>
<td>删除指定索引处的元素并返回被删除的元素</td>
</tr>
<tr>
<td><code>public boolean remove(Object obj)</code></td>
<td>删除指定元素并返回是否删除成功</td>
</tr>
</tbody>
</table>
<h3> 元素修改</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public E set(int index, E element)</code></td>
<td>修改指定索引处的元素，返回被修改的元素</td>
</tr>
</tbody>
</table>
<h3> 元素遍历</h3>
<ol>
<li><strong>for 循环</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>增强 for 循环</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li><strong>迭代器</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>本文主要讲解了 <code>ArrayList</code> 的定义、泛型支持、构造方法以及常用方法等。主要针对的是日常中的使用，更多关于 <code>ArrayList</code>&nbsp; 底层原理的一些知识，抽个时间再聊吧！</p>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">输入输出流</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220715-in-out-stream.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220715-in-out-stream.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 输入输出流</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>我们日常开发过程中，有许多方面都涉及到 IO 流，比如上传下载、传输、设计模式等等。而所有的一切都是基于 IO 流来进行，所以今天就来看看 Java 中 IO 流的相关知识点。</p>
<p>本文主要内容安排如下：</p>
<ul>
<li><strong>文件对象</strong></li>
<li><strong>流简介</strong></li>
<li><strong>字节流</strong></li>
<li><strong>字符流</strong></li>
</ul>]]></summary>
    <content type="html"><![CDATA[<h1> 输入输出流</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>我们日常开发过程中，有许多方面都涉及到 IO 流，比如上传下载、传输、设计模式等等。而所有的一切都是基于 IO 流来进行，所以今天就来看看 Java 中 IO 流的相关知识点。</p>
<p>本文主要内容安排如下：</p>
<ul>
<li><strong>文件对象</strong></li>
<li><strong>流简介</strong></li>
<li><strong>字节流</strong></li>
<li><strong>字符流</strong></li>
</ul>
<h2> 文件对象</h2>
<h3> 文件路径</h3>
<p>Java 标准库 <code>java.io</code> 提供了 <code>File</code> 对象用于操作文件和目录，也就是说我们的文件和目录都是可以通过 <code>File</code> 封装成对象的。构造 <code>File</code> 对象时，需要传入我们的文件或目录的路径名，常用的构造方法如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>File(String pathName)</code></td>
<td>通过将给定路径名字符串转换为抽象路径名来创建新实例</td>
</tr>
<tr>
<td><code>File(String parent, String child)</code></td>
<td>从父路径名字符串和子路径名字符串创建新实例</td>
</tr>
<tr>
<td><code>File(File parent, String child)</code></td>
<td>从父抽象路径名和子路径名字符串创建新实例</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>对于我们传入文件的路径，既可以使用绝对路径，也可以使用相对路径。</p>
<ul>
<li><strong>相对路径</strong>：以当前文件所在位置为参考，然后建立出另一个文件所在位置路径。我们最常用的有 <code>.</code> 和 <code>..</code>，前者表示当前目录，而后者则表示当前目录的上一级目录。假设我们当前目录为 <code>/home/cunyu1943/data</code>，则 <code>.</code> 仍然表示该目录，而 <code>..</code> 则表示 <code>/home/cunyu1943</code> 目录。</li>
<li><strong>绝对路径</strong>：又可以分为 <strong>本地绝对路径</strong> 和 <strong>网络绝对路径</strong>。本地绝对路径以根目录为参考，指文件在硬盘中真实存在的路径，比如在 Windows 系统，我们的一个绝对路径是 <code>D:\\Softwares\\Typora\\Typora.exe</code>，而在类 <code>Unix</code> 系统中则为 <code>/home/cunyu1943/IO.md</code>，此时需要注意平台间的分隔符是不一样的，但为了同一，推荐同一写成 <code>/</code>，这样程序在不同系统中迁移时也不会出现问题。而网络绝对位置则指带有网址的路径，比如 <code>https://cunyu1943.site/index.html</code>。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 文件和目录操作</h3>
<h4> 创建与删除</h4>
<p>既然拿到了 <code>File</code> 对象，接下来就是通过操作该对象来进行创建和删除文件或目录了，以下是一些 <code>File</code> 类常用的创建和删除方法。</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>boolean</code></td>
<td><code>createNewFile()</code></td>
<td>当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件；存在时，则创建失败</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>mkdir()</code></td>
<td>创建由此抽象路径名命名的目录</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>mkdirs()</code></td>
<td>创建由此抽象路径名命名的多级目录，包括任何必需但不存在的父目录</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>delete()</code></td>
<td>删除由此抽象路径名命名的文件或目录，删除目录的前提是该目录必须为空</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p><strong>注意</strong>：</p>
<ul>
<li>
<p>创建文件时，调用的是 <code>createNewFile()</code> 方法，而创建目录时调用的是 <code>mkdir()</code> 或者 <code>mkdirs()</code> 方法。我们在调用时要注意区分，否则就算你的路径是文件，当调用了创建目录的方法后它也会创建成目录而非文件。对应的，就算你给定的路径是目录，当调用创建文件的方法后它也会创建成文件而非目录。</p>
</li>
<li>
<p>删除目录时，若目录中有内容（目录、文件），则 <strong>不能直接删除</strong>，而是应该先删除目录中的内容，然后才能删除目录；</p>
</li>
</ul>
<h4> 相关属性</h4>
<p>获取到 <code>File</code> 对象后，我们可以对其相关属性进行判断，常用方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>long</code></td>
<td><code>length()</code></td>
<td>该抽象路径名表示的文件的所占字节大小</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>canRead()</code></td>
<td>该抽象路径名表示的文件是否可读</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>canWrite()</code></td>
<td>该抽象路径名表示的文件是否可写</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>canExecute()</code></td>
<td>该抽象路径名表示的文件是否可执行</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h4> 判断和获取</h4>
<p>获取到 <code>File</code> 对象后，我们既可以用它来表示文件，也可以用来表示目录。而对于文件和目录的判断和获取功能，可以使用如下常用的方法：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>boolean</code></td>
<td><code>isFile()</code></td>
<td>测试此抽象路径名表示的文件是否为普通文件</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>isDirectory()</code></td>
<td>测试此抽象路径名表示的文件是否为目录</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>exists()</code></td>
<td>测试此抽象路径名表示的文件或目录是否存在</td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>getPath()</code></td>
<td>将抽象路径转换为路径字符串</td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>getAbsolutePath()</code></td>
<td>返回此抽象路径名的绝对路径名字符串</td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>getName()</code></td>
<td>返回由此抽象路径名表示的文件或目录的名称</td>
</tr>
<tr>
<td><code>String[]</code></td>
<td><code>list()</code></td>
<td>返回字符串数组，表示该抽象路径名表示目录下的文件和目录</td>
</tr>
<tr>
<td><code>File[]</code></td>
<td><code>listFiles()</code></td>
<td>返回抽象路径名数组，表示该抽象路径名表示目录下的文件</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 练习</h3>
<p>假设我们要遍历 Windows 下 C 盘的 Windows 目录，并且列出其中文件名和文件大小，而不用列出目录名，我们可以利用如下代码来实现：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 流</h2>
<h3> 什么是流</h3>
<p>所谓流，就是一系列数据的组合。当我们需要进行数据交互的时候，比如在服务器和客户端之间进行数据交互时，我们此时就可以使用 Java 中的流来实现。Java 中，数据的输入和输出都是以流的形式来进行的。根据数据流方向的不同，我们可以将其分为：<strong>输入流</strong>、<strong>输出流</strong>。而根据处理的数据单位不同，可分为：<strong>字节流</strong>、<strong>字符流</strong>。两者的关系可以描述为下表：</p>
<table>
<thead>
<tr>
<th></th>
<th>字节流</th>
<th>字符流</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>输入流</strong></td>
<td><code>InputStream</code></td>
<td><code>Reader</code></td>
</tr>
<tr>
<td><strong>输出流</strong></td>
<td><code>OutputStream</code></td>
<td><code>Writer</code></td>
</tr>
</tbody>
</table>
<p>而对于字节流和字符流的选用原则，我们建议遵循如下规则：<strong>如果数据能够通过 Windows 自带笔记本软件打开并且能够读懂其中的内容，则选用字符流，否则选择字节流。而如果我们也不知道应该使用何种类型的流，则默认使用字节流</strong>。</p>
<p>下图描述了字节流和字符流的类层次图，注意：<strong>无论是字节流还是字符流，其子类名都是以其父类名作为子类名的后缀的</strong>。</p>
<figure><figcaption></figcaption></figure>
<h3> InputStream</h3>
<figure><figcaption></figcaption></figure>
<p>注意，<code>InputStream</code> 并非是并不是一个接口，而是所有字节输入流所有类的父类。下面我们主要以 <code>FileInputStream</code> 来举例，所谓 <code>FileInputStream</code>，就是从文件流中读取数据，然后将数据从文件中读取到内存，常用方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>int</code></td>
<td><code>available()</code></td>
<td>返回该输入流中可以读取的字节数的估计值</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>close()</code></td>
<td>关闭输入流并释放相关资源</td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>read(bytep[] b)</code></td>
<td>从输入流读取一些字节数，并将其存储到缓冲区 b</td>
</tr>
</tbody>
</table>
<p>下面是一个从文件中读取数据到内存中的实例，文件内容如下：</p>
<figure><figcaption></figcaption></figure>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> OutputStream</h3>
<figure><figcaption></figcaption></figure>
<p><code>OutputStream</code> 并非是并不是一个接口，而是所有输出字节流的所有类的父类。下面我们主要以 <code>FileOutputStream</code> 来举例，所谓 <code>FileOutputStream</code>，就是从内存中读取数据，然后将数据从内存存放到文件中，常用方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void</code></td>
<td><code>write(byte[] b)</code></td>
<td>将 <code>b.length</code> 个字节从指定字节数组写入此文件输出流</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>close()</code></td>
<td>关闭文件输出流并释放相关资源</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>需要注意的点：</p>
<ul>
<li>字节流写入数据时如何实现换行？</li>
</ul>
<p>写入换行的转义字符的字节数组即可，但是需要注意，不同系统下换行的转义字符不同，Windows 下为 <code>\r\n</code>，macOS 下为 <code>\r</code>，而 Linux 下为 <code>\m</code>。</p>
<ul>
<li>字节流写入数据时如何实现追加？</li>
</ul>
<p>调用 <code>public FileOutputStream(String name, boolean append)</code> 这个构造方法即可，当 <code>append</code> 为 <code>true</code> 时，表示追加，默认情况下是 <code>false</code>，表示不追加。</p>
<h3> 字符串中的编解码问题</h3>
<h4> 编码</h4>
<ul>
<li><code>byte[] getBytes()</code>：使用平台默认字符集将该字符串编码成一系列字节，然后将结果存储到新的字节数组中；</li>
<li><code>byte[] getBytes(String charsetName)</code>：使用指定字符集将该字符串编码为一系列字节，然后将结果存储到新的字节数组中；</li>
</ul>
<h4> 解码</h4>
<ul>
<li><code>String(byte[] bytes)</code>：使用平台默认字符集解码指定的字节数来构造新的字符串；</li>
<li><code>String(byte[] bytes, String charsetName)</code>：通过指定的字符集解码指定的字节数组来构造新的字符串；</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> Writer</h3>
<figure><figcaption></figcaption></figure>
<p>当我们要写入基于字符的数据到数据源中时，需要使用写入器 <code>Writer</code>. 以其中的 <code>FileWriter</code> 具体展开，其常用方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void</code></td>
<td><code>close()</code></td>
<td>先刷新再关闭流，不能再写数据</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>flush()</code></td>
<td>刷新流，可以继续写数据</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>newLine()</code></td>
<td>写入行分隔符</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>write()</code></td>
<td>写入字符或字符串</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> Reader</h3>
<figure><figcaption></figcaption></figure>
<p>当我们要从数据源读取基于字符的数据时，需要使用读取器 <code>Reader</code>. 我们以 <code>FileReader</code> 实践，其常用的方法有：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void</code></td>
<td><code>close()</code></td>
<td>关闭流并释放相关资源</td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>read()</code></td>
<td>读取一个字符</td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>readLine()</code></td>
<td>读一行文字</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>ready()</code></td>
<td>获取该流是否准备好被读取</td>
</tr>
</tbody>
</table>
<p>我们以从文件中读取内容为例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>好了，关于 IO 流的知识点到此就结束了，赶紧学起来！如果你觉得本文对你有所帮助，那就点赞关注一波吧！</p>
<p>对于文中遗漏或者错误的知识点，欢迎大家评论留言，咱们评论区见！</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<figure><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</div>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">反射机制详解</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220716-reflection.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220716-reflection.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 反射机制详解</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/f0sJpAhgI6B7oirsJfv9jQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/f0sJpAhgI6B7oirsJfv9jQ</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 反射机制详解</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/f0sJpAhgI6B7oirsJfv9jQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/f0sJpAhgI6B7oirsJfv9jQ</a></p>
</div>
<h2> 反射概述</h2>
<h3> 什么是反射</h3>
<p>将类的各个组成部分封装为其他对象的过程就叫做 <strong>反射</strong>，其中 <strong>组成部分</strong> 指的是我们类的 <strong>成员变量（Field）</strong>、<strong>构造方法（Constructor）</strong>、<strong>成员方法（Method）</strong>。</p>
<h3> 使用反射的优缺点</h3>
<ul>
<li>
<p><strong>优点</strong></p>
<ol>
<li>在 <strong>程序运行过程中</strong> 可以操作类对象，增加了程序的灵活性；</li>
<li>解耦，从而提高程序的可扩展性，提高代码的复用率，方便外部调用；</li>
<li>对于任何一个类，当知道它的类名后，就能够知道这个类的所有属性和方法；而对于任何一个对象，都能够调用它的一个任意方法。</li>
</ol>
</li>
<li>
<p><strong>缺点</strong></p>
<ol>
<li><strong>性能问题</strong>：Java 反射中包含了一些动态类型，JVM 无法对这些动态代码进行优化，因此通过反射来操作的方式要比正常操作效率更低。</li>
<li><strong>安全问题</strong>：使用反射时要求程序必须在一个没有安全限制的环境中运行，如果程序有安全限制，就不能使用反射。</li>
<li><strong>程序健壮性</strong>：反射允许代码执行一些平常不被允许的操作，破坏了程序结构的抽象性，导致平台发生变化时抽象的逻辑结构无法被识别。</li>
</ol>
</li>
</ul>
<h2> Class 对象的获取及使用</h2>
<h3> 获取 Class 对象的方式</h3>
<ol>
<li><code>Class.forName("全类名")</code></li>
</ol>
<p>源代码阶段，它能将字节码文件加载进内存中，然后返回 <code>Class</code> 对象，多用于 <strong>配置文件</strong> 中，将类名定义在配置文件中，通过读取配置文件来加载类。</p>
<ol start="2">
<li><code>类名.class</code></li>
</ol>
<p>类对象阶段，通过类名的 <code>class</code> 属性来获取，多用于 <strong>参数的传递</strong>。</p>
<ol start="3">
<li><code>对象.getClass()</code></li>
</ol>
<p>运行时阶段，<code>getClass()</code> 定义在 <code>Object</code> 类中，表明所有类都能使用该方法，多用于 <strong>对象的获取字节码</strong> 的方式。</p>
<p>我们首先定义一个 <code>Person</code> 类，用于后续反射功能的测试；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义好 <code>Person</code> 类之后，我们尝试用 3 种不同的方式来获取 <code>Class</code> 对象，并比较它们是否相同。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>上述代码中，会发现最后输出的比较结果返回的是两个 <code>true</code>，说明通过上述三种方式获取的 <code>Class</code> 对象都是同一个，<strong>同一个字节码文件（<code>*.class</code>）在一次运行过程中只会被加载一次</strong>。</p>
<h3> Class 对象的使用</h3>
<h4> 获取成员变量</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Field[] getFields()</code></td>
<td>返回包含一个数组 <code>Field</code>对象反射由此表示的类或接口的所有可访问的公共字段类对象</td>
</tr>
<tr>
<td><code>Field getField(String name)</code></td>
<td>返回一个 <code>Field</code>对象，它反映此表示的类或接口的指定公共成员字段类对象</td>
</tr>
<tr>
<td><code>Field[] getDeclaredFields()</code></td>
<td>返回的数组 <code>Field</code>对象反映此表示的类或接口声明的所有字段类对象</td>
</tr>
<tr>
<td><code>Field getDeclaredField(String name)</code></td>
<td>返回一个 <code>Field</code>对象，它反映此表示的类或接口的指定已声明字段类对象</td>
</tr>
</tbody>
</table>
<ul>
<li><code>Field[] getFields()</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>回顾下我们的 <code>Person</code> 类，可以发现 <code>id</code>、<code>grade</code> 成员变量都是被 <code>public</code> 所修饰的，说明该方法是用于获取类中所有被 <code>public</code> 所修饰的成员变量（<strong>包括父类</strong>）。</p>
<ul>
<li><code>Field getField(String name)</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>从上面的结果分析可知，该方法只能用于获取类中指定名称的 <code>public</code> 所修饰的成员变量，对于 <code>protected</code>、<code>private</code> 所修饰的成员变量，该方法是无法获取的（<strong>包括父类</strong>）。而获取或设置成员变量值时，可以通过 <code>get/set</code> 方法来操作，具体操作方法如下。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>Field[] getDeclaredFields()</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>观察上面的结果可知，该方法可用于获取所有的成员变量，不用考虑修饰符的限制（<strong>不包括父类</strong>）。</p>
<ul>
<li><code>Field getDeclaredField(String name)</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>观察上面的结果可知，该方法可用于获取指定的成员变量，不用考虑成员变量修饰符的限制（<strong>不包括父类</strong>）。但是在利用 <code>set</code>、<code>get</code> 方法来获取和设置 <code>private</code>、<code>protected</code> 修饰的成员变量时，需要利用 <code>setAccessible()</code> 来忽略访问全新啊修饰符的安全检查，否则程序将会报错。</p>
<h4> 获取构造方法</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Constructor&lt;?&gt;[] getConstructors()</code></td>
<td>返回包含一个数组 <code>Constructor</code>对象反射由此表示的类的所有公共构造类对象</td>
</tr>
<tr>
<td><code>Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)</code></td>
<td>返回一个 <code>Constructor</code> 对象，该对象反映 <code>Constructor</code>对象表示的类的指定的公共类函数</td>
</tr>
<tr>
<td><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></td>
<td>返回一个反映 <code>Constructor</code> 对象表示的类声明的所有 <code>Constructor</code> 对象的数组类</td>
</tr>
<tr>
<td><code>Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)</code></td>
<td>返回一个 <code>Constructor</code> 对象，该对象反映 <code>Constructor</code> 对象表示的类或接口的指定类函数</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ul>
<li>
<p><code>Constructor&lt;?&gt;[] getConstructors()</code></p>
<p>类似于通过 <code>Class</code> 实例来获取成员变量，该方法用于获取所有 <code>public</code> 所修饰的构造方法（<strong>包括父类</strong>）；</p>
</li>
<li>
<p><code>Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)</code></p>
</li>
</ul>
<p>该方法用于获取某一指定参数类型后的 <code>public</code> 所修饰的构造方法（<strong>包括父类</strong>）；</p>
<ul>
<li><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></li>
</ul>
<p>该方法用于获取所有 <code>public</code> 所修饰的构造方法（<strong>不包括父类</strong>）；</p>
<ul>
<li><code>Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)</code></li>
</ul>
<p>该方法用于获取某一指定参数类型后的 <code>public</code> 所修饰的构造方法（<strong>不包括父类</strong>）；</p>
<p>而获取到构造方法之后，我们就可以利用 <code>newInstance()</code> 方法来创建类的实例。特殊的，如果我们的构造方法是无参的，此时则可以直接利用 <code>Class.newInstance()</code> 来构造实例。</p>
<h4> 获取成员方法</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Method[] getMethods()</code></td>
<td>返回包含一个数组 方法对象反射由此表示的类或接口的所有公共方法 类对象，包括那些由类或接口和那些从超类和超接口继承的声明</td>
</tr>
<tr>
<td><code>Method getMethod(String name, 类&lt;?&gt;... parameterTypes)</code></td>
<td>返回一个方法对象，它反映此表示的类或接口的指定公共成员方法 类对象</td>
</tr>
<tr>
<td><code>Method[] getDeclaredMethods()</code></td>
<td>返回包含一个数组方法对象反射的类或接口的所有声明的方法，通过此表示 类对象，包括公共，保护，默认（包）访问和私有方法，但不包括继承的方法</td>
</tr>
<tr>
<td><code>Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)</code></td>
<td>返回一个方法对象，它反映此表示的类或接口的指定声明的方法类对象</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ul>
<li><code>Method[] getMethods()</code></li>
</ul>
<p>用于获取当前类的所有 <code>public</code> 所修饰的成员方法（<strong>包括父类</strong>）。</p>
<ul>
<li><code>Method getMethod(String name, 类&lt;?&gt;... parameterTypes)</code></li>
</ul>
<p>用于获取当前类的某一个指定名称 <code>public</code> 所修饰的成员方法（<strong>包括父类</strong>）。</p>
<ul>
<li><code>Method[] getDeclaredMethods()</code></li>
</ul>
<p>用于获取当前类的所有 <code>public</code> 所修饰的成员方法（<strong>不包括父类</strong>）。</p>
<ul>
<li><code>Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)</code></li>
</ul>
<p>用于获取当前类的某一个指定名称 <code>public</code> 所修饰的成员方法（<strong>不包括父类</strong>）。</p>
<p>而当我们获取到类的成员方法后，如果要执行某一个方法，可以使用 <code>invoke()</code> 方法来执行该方法。</p>
<h4> 获取类名</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ul>
<li><code>String getName()</code></li>
</ul>
<p>从上述程序的结果可知，当我们获取到 <code>Class</code> 对象之后，如果不知道类的全名，就可以使用 <code>getName()</code> 来获取该类的全名。</p>
<h2> 反射实例</h2>
<p>假设我们有如下需求：在不改变类的代码的前提下，我们能够创建任意类的对象，并执行其中的方法。</p>
<p>此时，我们可以通过 <strong>配置文件 + 反射</strong> 的方式来实现这一效果，而这也就是我们现在所用框架中的基础，当我们使用反射后，只需要通过修改配置文件中的内容就能够不用去改代码就实现对应的功能。</p>
<p>假设我们有两个类，一个 <code>Student</code>，一个 <code>Teacher</code>，两者的定义如下；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要实现我们的需求，通常需要如下步骤：</p>
<ol>
<li>将要创建对象的全类名和要执行的方法都配置在配置文件中；</li>
</ol>
<p>定义的配置文件 <code>prop.properties</code> ，其中主要内容包括 <code>className</code> 和 <code>methodName</code> 两个属性，分别代表类的全类名和要调用方法的名字。一个具体实例如下，分别代表名为 <code>Student</code> 的类和名为 <code>study</code> 的方法。</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>然后在主方法中加载读取配置文件；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>利用反射技术将类加载到内存中；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li>接着利用 <code>newInstance()</code> 方法创建对象；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li>最后则是利用 <code>invoke()</code> 方法来执行方法；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将整个流程汇总起来就是：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，我们只需要改动配置文件 <code>prop.properties</code> 中的配置即可输出不同结果；</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>好了，感谢耐心看到这里的各位。如果您觉得本文对您有所帮助，那就给我点个赞吧！</p>
<p>最后，对于文中知识点有错误或欠缺的地方，还请大家见谅，欢迎大家评论留言给我指正~</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<figure><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</div>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">JDBC 入门指南</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220717-jdbc-introduction.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220717-jdbc-introduction.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> JDBC 入门指南</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/DOXFxk5dk9WBfAVK0UJUng" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/DOXFxk5dk9WBfAVK0UJUng</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> JDBC 入门指南</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/DOXFxk5dk9WBfAVK0UJUng" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/DOXFxk5dk9WBfAVK0UJUng</a></p>
</div>
<h2> 前言</h2>
<p>在我们日常使用的 APP 或网站中，往往需要存取数据，比如在微信中，需要存储我们的用户名、手机号、用户密码…… 等一系列信息。依靠之前所学习的 Java 相关知识已经无法满足这一需求。现在的应用程序中最基本、应用最广的也就是关系型数据库，如 MySQL。Java 语言中为了实现与关系型数据库的通信，制定了标准的访问接口，即 JDBC（Java Database Connectivity）。本文主要介绍在 Java 中使用 JDBC 的相关知识，主要内容如下：</p>
<ul>
<li><strong>JDBC 简介</strong></li>
<li><strong>数据的增删改查</strong></li>
<li><strong>事务</strong></li>
<li><strong>连接池</strong></li>
</ul>
<h2> JDBC 简介</h2>
<p>JDBC（Java Database Connectivity），即 Java 数据库连接。是 Java 语言中用于规范客户端程序如何来访问数据库的应用程序接口，它是面向关系型数据库的，提供了查询和更新数据库中数据的方法。</p>
<p>本文以 MySQL 来演示如何使用 JDBC，所以需要事先在你的机器上准备好 MySQL，而且最好是懂一些 MySQL 的使用。</p>
<p>首先我们需要建立 MySQL 与 Java 程序间的联系，所以需要事先好 mysql-connector-java 这个第三方包，下载地址：<a href="https://downloads.mysql.com/archives/c-j/" target="_blank" rel="noopener noreferrer">https://downloads.mysql.com/archives/c-j/</a></p>
<h3> 导入驱动包</h3>
<p>以在 IDEA 中导入 jar 包为例，当我们建立好项目后，导包过程如下：</p>
<ol>
<li>首先依次打开 <code>File -&gt; Project Structure -&gt; Modules -&gt; Dependencies</code>；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>然后点击 <code>+</code> 号，选择 <code>1 JARs or Directories</code>，找到你下载好的 jar 包导入；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>导入成功，点击 <code>OK</code> 即可；</li>
</ol>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h3> 初始化并建立连接</h3>
<p>导入我们的 jar 包之后，就需要进行初始化工作。新建一个类，用于初始化并连接。先将驱动类加载到 JVM 中，加载过程中会执行其中的静态初始化块，从而完成驱动的初始化工作。然后建立数据库与程序之间的连接，此时需要提供数据库的 IP 地址、端口号、数据库名、编码方式、用户名、用户密码等信息。</p>
<p>首先，我们在数据库中建立一个表 <code>student</code>，建表语句如下，用于后续实践。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>创建好数据库及表之后，我们就可以进行初始化和连接工作了，这里的步骤主要分为如下几步：</p>
<ol>
<li>首先需要加载驱动，主要是利用 <code>Class.forName()</code> 将驱动类加载到 JVM；</li>
<li>建立程序和数据库之间的连接，主要是创建 <code>Connection</code> 对象；</li>
<li>接着是创建用于执行 SQL 语句的 <code>Statement</code> 对象；</li>
<li>最后则是关闭连接从而释放资源，先关闭 <code>Statement</code> ，再关闭 <code>Connection</code> ；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>对于上述关闭 <code>Connection</code> 和 <code>Statement</code> 的方式，可能略显繁琐，为了进一步简化，可以使用 <code>try-with-source</code> 的方式自动关闭，简化后的代码如下；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JDBC 增删改查</h2>
<p>当我们初始化并建立 JDBC 连接之后，我们就可以对数据库进行 CRUD （增加、查询、更新、删除）等操作。</p>
<p>在正式开始 CRUD 前，我们最好先了解下 MySQL 中的数据类型在 Java 中所对应的数据类型，以便后续操作数据。一般来讲，两者中的数据类型对应关系如下表所示。</p>
<table>
<thead>
<tr>
<th>SQL 中的数据类型</th>
<th>对应的 Java 数据类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>BIT</code>、<code>BOOL</code></td>
<td><code>boolean</code></td>
</tr>
<tr>
<td><code>INTEGER</code></td>
<td><code>int</code></td>
</tr>
<tr>
<td><code>BIGINT</code></td>
<td><code>long</code></td>
</tr>
<tr>
<td><code>REAL</code></td>
<td><code>float</code></td>
</tr>
<tr>
<td><code>FLOAT</code>、 <code>DOUBLE</code></td>
<td><code>double</code></td>
</tr>
<tr>
<td><code>CHAR</code>、 <code>VARCHAR</code></td>
<td><code>String</code></td>
</tr>
<tr>
<td><code>DECIMAL</code></td>
<td><code>BigDecimal</code></td>
</tr>
<tr>
<td><code>DATE</code></td>
<td><code>java.sql.Date</code>、<code>LocalDate</code></td>
</tr>
<tr>
<td><code>TIME</code></td>
<td><code>java.sql.Time</code>、 <code>LocalTime</code></td>
</tr>
</tbody>
</table>
<p>此外，虽然我们在 JDBC 的简介部分在初始化和建立连接时使用的是用 <code>Statement</code> 来创建一个对象并用于后续操作，但是在实际使用过程中时，SQL 参数基本都是从方法参数传入的，这时使用 <code>Statement</code> 就十分容易引起 SQL 注入，为了解决这一问题，大牛们提出了如下两个办法：</p>
<ol>
<li>对字符串中的参数进行转义，然后利用转义后的参数来进行操作。但是转义十分麻烦，而且一使用 SQL，我们就必须增加转义代码。</li>
<li>利用 <code>PreparedStatement</code>，它利用 <code>?</code> 作为占位符，将数据联通 SQL 本身传递给数据库，从而保证每次传给数据库的 SQL 语句都是保持一致的，每次变动的只是占位符中的数据不同。通过使用 <code>PreparedStatement</code>，我们就能够 <strong>完全避免 SQL 注入 问题</strong>。</li>
</ol>
<p>针对后续利用 JDBC 操作数据库的过程，为了尽量避免 SQL 注入问题，我们优先采用 <code>PreparedStatement</code> 而非 <code>Statement</code>.</p>
<h3> 查询数据</h3>
<p>首先，我们来进行查询操作。进行查询时，可以总结为如下几个步骤：</p>
<ol>
<li>通过创建一个 <code>Connection</code> 对象从而建立连接；</li>
<li>然后利用 <code>prepareStatement()</code> 方法创建一个 <code>PreparedStatement</code> 对象并传入 SQL 语句，用于执行查询操作；</li>
<li>接着执行 <code>PreparedStatement</code> 对象所提供的 <code>executeQuery()</code> 方法，获取查询结果并返回到一个 <code>ResultSet</code> 结果集中；</li>
<li>最后则是利用 <code>ResultSet</code> 对象的 <code>next()</code> 方法去读取我们所查询返回的结果；</li>
</ol>
<blockquote>
<p>需要注意的地方：</p>
<ol>
<li>如果你不是利用 <code>try-with-source</code> 的方式，那么一定要记得在使用完连接之后记得释放资源；</li>
<li>结果集 <code>ResultSet</code> 中，索引位置是从 <code>1</code> 开始的，而不是从 <code>0</code> 开始，这一点要特别注意！</li>
</ol>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 增加数据</h3>
<p>即插入一条新记录，和查询语句很像，但是区别在于最后 <code>PreparedStatement</code> 对象执行的不是 <code>executeQuery()</code>，而是 <code>executeUpdate()</code>. 插入记录的步骤总结如下：</p>
<ol>
<li>创建 <code>Connection</code> 对象从而建立连接；</li>
<li>利用 <code>prepareStatement()</code> 方法创建一个 <code>PreparedStatement</code> 对象并传入 SQL 语句，用于执行插入操作；</li>
<li>然后依次设置占位符所代表的值；</li>
<li>执行 <code>PreparedStatement</code> 对象所提供的 <code>executeUpdate()</code> 方法，此时返回的是一个 <code>int</code> 类型的数，表示插入记录的条数；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新增数据后，接着查询数据，得到如下结果，可以看到我们新插入的数据成功加入到了数据库中！</p>
<figure><figcaption></figcaption></figure>
<h3> 删除数据</h3>
<p>删除数据和新增数据的方式基本一样，两者最大的区别在于 SQL 语句的不同，删除操作利用的是 <code>DELETE</code> 语句，能一次删除若干列。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除数据后，接着查询数据，得到如下结果，可以看到 <code>id = 101</code> 的数据列已经被删除了，说明我们删除数据成功了！</p>
<figure><figcaption></figcaption></figure>
<h3> 修改数据</h3>
<p>修改数据的方式同删除数据和新增数据基本一致，最大的区别在于 SQL 语句的不同，修改操作利用的是 <code>UPDATE</code> 语句，能一次更新若干列。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改数据后，接着查询数据，得到如下结果，可以看到 <code>id = 201</code> 对应的数据列中，<code>name</code> 从小黄变成了村雨遥，说明数据更新成功。</p>
<figure><figcaption></figcaption></figure>
<h3> 注意</h3>
<p>当我们的数据库表设置自增主键后，在新增数据时无需指定主键也会自动更新。但是在获取自增主键的值时，不能先插入再查询，否则可能会导致冲突。要正确获取自增主键，需要在创建 <code>PreparedStatement</code> 时，指定一个标志位 <code>RETURN_GENERATED_KEYS</code>，用于表示 JDBC 驱动必须返回插入的自增主键。</p>
<p>假设我们创建表时，设置了自增长的键：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时无论是 <code>executeQuery()</code> 还是 <code>execureUpdate()</code> 都不会返回这个自增长的 <code>id</code>，所以需要在创建 <code>PreparedStatement</code> 对象时加入 <code>Statement.RETURN_GENERATED_KEYS</code> 参数以确保会返回自增长 ID，然后通过 <code>getGeneratedKeys</code> 获取该字段；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> JDBC 工具类</h3>
<p>观察上面的代码，我们可以注意到每次都需要注册驱动、传递参数，关闭连接等操作，为了提高工具通用性，我们利用配置文件来配置数据库相关信息，然后创建一个 JDBC 工具类来简化上述操作。</p>
<ol>
<li>首先在 <code>src</code> 目录下创建一个配置文件 <code>jdbc.properties</code>，并且填入数据库的相关信息；</li>
</ol>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>创建工具类</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JDBC 事务</h2>
<h3> 事务 4 大特性</h3>
<p>事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行结果必须使数据库从一种一致性状态切换到另一中一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。事务能够在数据库提交工作时确保要么所有修改都保存，要么所有修改都不保存。<strong>即事务是逻辑上的一组操作，要么都执行，要么都不执行</strong>。</p>
<ol>
<li><strong>原子性（Atomicity）</strong></li>
</ol>
<p>原子性是整个数据库事务中不可分割的工作单位，只有事务中的所有的数据库操作都执行成功，才代表整个事务成功，如果其中任一环节执行失败，那么就算已经执行成功的 SQL 语句也必须撤销，回滚到事务执行前的状态。即原子性能够保证 <strong>动作要么全部完成，要么完全不起作用。</strong> <strong>即事务是最小的执行单位，不允许分割</strong>。</p>
<ol start="2">
<li><strong>一致性（Consistency）</strong></li>
</ol>
<p>指事务将数据库从一种一致性状态变为另一种一致性状态。在事务开始前后，数据库的完整性约束未被破坏。<strong>在事务执行前后，数据能够保持一致，多个事务对统一数据读取的结果相同</strong>。</p>
<ol start="3">
<li><strong>隔离性（Isolation）</strong></li>
</ol>
<p>并发访问数据库时，隔离性要求每个读写事务对其他事务的操作对象能够相互分离，即一个用户的事务不被其他事务所干扰，各并发事务间数据库是独立的；</p>
<ol start="4">
<li><strong>持久性（Durability）</strong></li>
</ol>
<p>表示事务一旦被提交，其结果就是永久性的，它对数据库中数据的改变是持久的，即便数据库发生故障也不应该对其产生影响；</p>
<h3> 脏读、幻读 &amp; 不可重复读</h3>
<p>了解事务隔离级别之前，先来看看这几个读的概念：</p>
<ol>
<li><strong>脏读（Dirty Read）</strong></li>
</ol>
<p>表示某一事务已经更新了一份数据，另一个事务在此时读取了同一份数据。当前一个事务撤销操作后，就会导致后一个事务所读取的数据不正确。</p>
<ol start="2">
<li><strong>幻读（Phantom Read）</strong></li>
</ol>
<p>在一个事务的两次查询中数据量不一致，假如有一个事务查询了几列数据，同时另一个事务中在此时查询了新的数据，则查询事务在后续查询中，就会发现数据比最开始的查询数据更丰富。</p>
<ol start="3">
<li><strong>不可重复读（Non-repeatable Read）</strong></li>
</ol>
<p>一个事务中两次查询数据不一致，有可能是因为两次查询过程中插入了一个更新原有数据的事务。</p>
<p><strong>注意：不可重复读和幻读的区别在于：</strong></p>
<blockquote>
<p><strong>不可重复读的重点在于修改，</strong> 比如多次读取一条记录发现其中某些列的值被修改，而 <strong>幻读的重点在于新增或删除</strong>，比如多次读取一条记录发现记录增多或减少了。</p>
</blockquote>
<h3> 隔离级别</h3>
<p>SQL 标准定义了 4 个隔离级别，隔离级别从低到高分别是：</p>
<ol>
<li><strong>READ-UNCOMMITTED（读取未提交）</strong></li>
</ol>
<p>最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能导致脏读、幻读或不可重复读</strong>。</p>
<ol start="2">
<li><strong>READ-COMMITTED（读取已提交）</strong></li>
</ol>
<p>允许读取并发事务已经提交的数据，<strong>能够阻止脏读，但可能导致幻读或不可重复读</strong>。</p>
<ol start="3">
<li><strong>REPEATABLE-READ（可重复读）</strong></li>
</ol>
<p>对同一字段的多次读取结果时一致的，除非数据是被本身事务自己所修改，<strong>能够阻止脏读和不可重复读，但可能导致幻读</strong>。</p>
<ol start="4">
<li><strong>SERIALIZABLE（可串行化）</strong></li>
</ol>
<p>最高的隔离级别，完全服从 ACID 的隔离级别，所有事务依次逐个执行，这样事务之间就完全不可能产生干扰，<strong>能够防止脏读、幻读以及不可重复读</strong>。</p>
<p>以下是 SQL 隔离级别和各种读之间的关系：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>READ-UNCOMMITTED</code></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>READ-COMMITTED</code></td>
<td>❌</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>REPEATABLE-READ</code></td>
<td>❌</td>
<td>❌</td>
<td>✔</td>
</tr>
<tr>
<td><code>SERIALIZABLE</code></td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
</tr>
</tbody>
</table>
<h3> 实例</h3>
<p>关于回滚，主要涉及 <code>Connection</code> 对象，常用的三个方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void</code></td>
<td><code>setAutoCommit(boolean autoCommit)</code></td>
<td>设定连接的自动提交模式，<code>true</code> 表示自动提交，<code>false</code> 表示手动提交</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>commit()</code></td>
<td>使上次提交/回滚以来所做的所有更改成为永久更改，并释放此 <code>Connection</code> 对象当前持有的所有数据库锁</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>rollback()</code></td>
<td>撤销当前十五中所做的所有更改，并释放此 <code>Connection</code> 对象当前持有的所有数据库锁</td>
</tr>
</tbody>
</table>
<p>以下是一个回滚实例，我们当我们第一次插入一条数据时，由于是新数据，所以不会报错，但是如果我们执行一次程序之后再次执行，此时按理来说就会报错，因为插入的数据重复，这时候利用事务就可以十分方便的解决这个问题，我们设置插入出错就回滚到未出错之前的状态，这样就能保证插入数据不会报错了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上述回滚的方式外，JDBC 还支持设置保存点的方式，我们可以使用事务回滚到指定的保存点，主要涉及的方法如下：</p>
<ul>
<li><code>setSavepoint(String savePointName)</code>：创建新的保存点，返回一个 <code>SavePoint</code> 对象；</li>
<li><code>rollback(String savePointName)</code>：回滚到指定保存点；</li>
</ul>
<h2> 连接池</h2>
<h3> 简介</h3>
<p>当我们使用多线程时，每个线程如果都需要连接数据库来执行 SQL 语句，那么每个线程都得创建一个连接，然后在使用之后关闭。这个创建和关闭连接的过程是十分耗时的，一旦多线程并发时，就容易导致系统卡顿。针对这一问题，提出使用数据库连接池。数据库连接池，其实就相当于一个集合，是一个存放数据库连接的容器。当我们的系统初始化好之后，集合就被创建，集合中会申请一些连接对象，当用户来访问数据库时，从集合中获取连接对象，一旦用户访问完毕，就将连接对象返还给容器。</p>
<p>使用数据库连接池的优点：一来是节约资源，二来提高了用户访问的效率。</p>
<h3> 常用数据库连接池</h3>
<h4> C3P0</h4>
<ol>
<li>导包</li>
</ol>
<p>首先需要导包，先去下载 C3P0 对象的 jar 包，下载地址：<a href="https://sourceforge.net/projects/c3p0/%EF%BC%8C%E7%84%B6%E5%90%8E%E5%B0%86%E5%85%B6%E4%B8%AD%E7%9A%84%E5%A6%82%E4%B8%8B%E4%B8%A4%E4%B8%AA%E5%8C%85%E5%AF%BC%E5%85%A5%EF%BC%9B" target="_blank" rel="noopener noreferrer">https://sourceforge.net/projects/c3p0/，然后将其中的如下两个包导入；</a></p>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>定义配置文件</li>
</ol>
<p>创建 C3P0 对应的配置文件，注意：配置文件一般放在 <code>src</code> 路径下，而且文件的名称要必须为以下其中的一个：</p>
<ul>
<li><code>c3p0.properties</code></li>
<li><code>c3p0-config.xml</code></li>
</ul>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>
<p>创建连接池对象</p>
</li>
<li>
<p>获取连接对象</p>
</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h4> Druid</h4>
<ol>
<li>导包</li>
</ol>
<p>导入 Druid 的 jar 包，下载地址：<a href="https://repo1.maven.org/maven2/com/alibaba/druid/" target="_blank" rel="noopener noreferrer">https://repo1.maven.org/maven2/com/alibaba/druid/</a></p>
<ol start="2">
<li>定义配置文件</li>
</ol>
<p>配置文件名称无要求，但是后缀名为 <code>.properties</code>，而且可以存放在任意目录下；</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>加载配置文件</li>
<li>创建连接池对象</li>
<li>获取连接对象</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>今天的内容到此就结束了，老规矩，点赞关注走一波 🧐。</p>
<p>对于文中有错或遗漏的地方，还烦请各位大佬在评论区指出来。我是村雨遥，一个技术栈主要为 Java 的菜鸟程序员，关注我，一起学习成长吧！</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<figure><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</div>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">是时候拥抱 Junit 单元测试了</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220718-test-with-junit.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220718-test-with-junit.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 是时候拥抱 Junit 单元测试了</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/_FWd0Bj3DlbCReex6pqJKQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/_FWd0Bj3DlbCReex6pqJKQ</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 是时候拥抱 Junit 单元测试了</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/_FWd0Bj3DlbCReex6pqJKQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/_FWd0Bj3DlbCReex6pqJKQ</a></p>
</div>
<h2> 何为测试</h2>
<p>在计算机领域中，所谓测试，描述的是一种用来鉴定软件正确性、完整性和质量的过程。而软件测试又一般可以分为黑盒测试和白盒测试，两者的相关定义如下。</p>
<h3> 黑盒测试</h3>
<blockquote>
<p>黑盒测试（<code>black-box testing</code>），也称黑箱测试，是软件测试方法，测试应用程序的功能，而不是其内部结构或运作。测试者不需具备应用程序的代码、内部结构和编程语言的专门知识。测试者只需知道什么是系统应该做的事，即当键入一个特定的输入，可得到一定的输出。测试案例是依应用系统应该做的功能，照规范、规格或要求等设计。测试者选择有效输入和无效输入来验证是否正确的输出。</p>
</blockquote>
<p>黑盒测试方法可适合大部分的软件测试，例如集成测试（<code>integration testing</code>）以及系统测试（<code>system testing</code>）。</p>
<h3> 白盒测试</h3>
<blockquote>
<p>白盒测试（<code>white-box testing</code>），又称透明盒测试 <code>glass box testing</code>、结构测试 <code>structural testing</code> 等）是一个测试软件的方法，测试应用程序的内部结构或运作，而不是测试应用程序的功能（即黑盒测试）。在白盒测试时，以编程语言的角度来设计测试案例。测试者输入资料验证资料流在程序中的流动路径，并确定适当的输出，类似测试电路中的节点。</p>
</blockquote>
<p>白盒测试可以应用于单元测试（<code>unit testing</code>）、集成测试（<code>integration testing</code>）和系统的软件测试流程，可测试在集成过程中每一单元之间的路径，或者主系统跟子系统中的测试。尽管这种测试的方法可以发现许多的错误或问题，它可能无法检测未使用部分的规范。</p>
<p>介绍一下黑白盒测试，主要是为了大家有一个概念，明白两者之间的区别，关于更多测试的内容，这里就不展开讲了，毕竟我们的重点是 JUnit。</p>
<h2> JUnit 简介</h2>
<h3> 什么是 JUnit</h3>
<blockquote>
<p>官网：<a href="https://junit.org/" target="_blank" rel="noopener noreferrer">https://junit.org/</a></p>
</blockquote>
<p>JUnit 是一个编写可重复测试的简单框架，是单元测试框架 xUnit 的一个实例，属于白盒测试。</p>
<p>针对 Java 语言而言，程序中最小的功能单元是方法，因此，对 Java 程序进行单元测试就是针对单个 Java 方法的测试。</p>
<p>在我们简单的小程序中，平常测试使用的方法是在主类中创建对象，然后调用对应方法。但是这样一来存在两个缺点：</p>
<ol>
<li>不能将测试代码和业务代码分离；</li>
<li>未打印出测试结果和期望结果；</li>
</ol>
<p>因此此时我们就需要一种新的测试框架来帮助我们编写测试，而 JUnit 则是专门针对 Java 而设计的一种标准单元测试框架。作为一个 Java 开发者，学习 JUnit 来进行测试是必备技能。</p>
<h3> 如何安装 JUnit</h3>
<ul>
<li><strong>本地安装</strong></li>
</ul>
<p>对于这种方法，我们只需要去下载 JUnit 最新的包，当前有 Junit4 和 Junit5 两个版本，可以根据自己的需要进行选择然后导入我们 IDE 的依赖文件即可，依赖文件下载地址如下：</p>
<blockquote>
<p>JUnit4：<a href="https://github.com/junit-team/junit4/releases/" target="_blank" rel="noopener noreferrer">https://github.com/junit-team/junit4/releases/</a></p>
<p>JUnit5：<a href="https://github.com/junit-team/junit5/releases/" target="_blank" rel="noopener noreferrer">https://github.com/junit-team/junit5/releases/</a></p>
</blockquote>
<p>以 IDEA 为例，依次打开 <code>File -&gt; Project Structure -&gt; Project Settings -&gt; Modules -&gt; Dependencies -&gt; 点击 + -&gt; Library... -&gt; Java</code>，最后找到下载的 JUnit 文件即可；</p>

<ul>
<li><strong>Maven 安装</strong></li>
</ul>
<p>当使用 Maven 之后，我们就能十分简单地安装 JUnit 了，只需要在项目的 <code>pom.xml</code> 配置文件中导入依赖即可；</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 使用 Junit 进行单元测试</h3>
<p>首先我们需要有一个主类，然后基于该类来进行测试，这里我们以简单的运算器为例；</p>
<p>创建一个简易计算机类 <code>Calc</code>，然后包括加法 <code>add</code> 和减法 <code>sub</code> 两个方法；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义好上述主类之后，我们来进行测试，测试步骤如下；</p>
<ol>
<li><strong>定义测试类</strong></li>
</ol>
<p>定义测试类时，我们推荐定义类名时就是 <strong>主类 Test</strong> 的形式，比如我们上面的类为 <code>Calc</code>，我们要对其进行测试，则测试类的类名为 <code>CalcTest</code>；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>定义测试方法</strong></li>
</ol>
<p>测试类定义好之后，我们就可以定义测试方法了，而定义测试方法时，我们也有几点建议；</p>
<ul>
<li>测试方法名是在主类方法名前加上 <code>test</code>，比如我们上边的方法为 <code>add</code>，则我们对应的测试方法名为 <code>testAdd</code>；</li>
<li>针对测试方法的返回值，因为我们只需要在方法内给出结果即可，不用再供其他人调用，所以建议返回值设置为 <code>void</code>；</li>
<li>针对测试方法的参数列表，由于我们主要还是针对传统建类调用方法测试的方法，所以此时最好是保持参数列表为空；</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>@Test</code> 为注解，用来注释一个普通的方法为一条测试用例。<code>assertEquals</code> 方法用于断言两个值是否相等。</p>
<p>如果测试成功，则在 IDE 中会出现如下提示。</p>
<figure><figcaption></figcaption></figure>
<p>一般来讲，测试成功一般是绿色，而测试失败则是红色。</p>
<ul>
<li>测试成功的界面</li>
</ul>
<figure><figcaption></figcaption></figure>
<ul>
<li>测试失败的界面</li>
</ul>
<figure><figcaption></figcaption></figure>
<p>总结起来，我们针对一个方法的具体测试的步骤如下：</p>
<ol>
<li>首先是创建被测试类的对象；</li>
<li>然后调用被测试的方法；</li>
<li>最后加入断言，判断调用方法得到结果和实际的结果之间是否相同；</li>
</ol>
<h2> JUnit 常用注解</h2>
<p>由于现在主要用到的有 Junit4 和 Junit5 两个版本，而两者之间也是存在一些区别的，所以在这里给出两者中常用注解的一些差异。</p>
<p>下表中，给出了 Junit4 和 Junit5 中所共有功能的对应注解：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Junit4 注解</th>
<th>Junit5 注解</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>@Test</code></td>
<td><code>@Test</code></td>
<td style="text-align:left">标识一条测试用例</td>
</tr>
<tr>
<td style="text-align:center"><code>@Ignore</code></td>
<td><code>@Disable</code></td>
<td style="text-align:left">忽略的测试用例</td>
</tr>
<tr>
<td style="text-align:center"><code>@Before</code></td>
<td><code>@BeforeEach</code></td>
<td style="text-align:left">每一个测试方法之前运行</td>
</tr>
<tr>
<td style="text-align:center"><code>@After</code></td>
<td><code>@AfterEach</code></td>
<td style="text-align:left">每一个测试方法之后运行</td>
</tr>
<tr>
<td style="text-align:center"><code>@BefreClass</code></td>
<td><code>@BeforeAll</code></td>
<td style="text-align:left">所有测试开始之前运行</td>
</tr>
<tr>
<td style="text-align:center"><code>@AfterClass</code></td>
<td><code>@AfterAll</code></td>
<td style="text-align:left">所有测试结果之后运行</td>
</tr>
<tr>
<td style="text-align:center"><code>@Category</code></td>
<td><code>@Tag</code></td>
<td style="text-align:left">标记和过滤</td>
</tr>
</tbody>
</table>
<p>而相对于 Junit4，Junit5 也有做出升级，其特有的一些注解如下：</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@TestFactory</code></td>
<td>测试工厂进行动态测试</td>
</tr>
<tr>
<td><code>@Nested</code></td>
<td>嵌套测试</td>
</tr>
<tr>
<td><code>@ExtendWith</code></td>
<td>注册自定义扩展</td>
</tr>
</tbody>
</table>
<h2> 常用断言方法</h2>
<p>而在测试中，我们经常用到断言方法。这些断言方法都来自于由继承了 <code>java.lang.Object</code> 的 <code>Assert</code> 类，用于提供编写测试。</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>void assertArrayEquals([String message],expected array, result array)</code></td>
<td style="text-align:left">断言预期数组和结果数组相等</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertEquals([String message],expected value, actual value)</code></td>
<td style="text-align:left">断言两个值是否相等。类似于字符串比较使用的 <code>equals()</code> 方法</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertNotEquals(String message], first, second)</code></td>
<td style="text-align:left">查看两个对象是否不相等</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertNull(String message], object)</code></td>
<td style="text-align:left">查看对象是否为空</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertNotNull(String message], object)</code></td>
<td style="text-align:left">查看对象是否不为空</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertSame(String message], expected, actual)</code></td>
<td style="text-align:left">查看两个对象的引用是否相等。类似于使用 <code>==</code> 比较两个对象</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertNotSame(String message], unexpected, actual)</code></td>
<td style="text-align:left">查看两个对象的引用是否不相等。类似于使用 <code>!=</code> 比较两个对象</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertTrue(String message], boolean condition)</code></td>
<td style="text-align:left">查看运行结果是否为 <code>true</code></td>
</tr>
<tr>
<td style="text-align:left"><code>void assertFalse([String message], boolean condition)</code></td>
<td style="text-align:left">查看运行结果是否为 <code>false</code></td>
</tr>
<tr>
<td style="text-align:left"><code>void assertThat([String message], actual, matcher)</code></td>
<td style="text-align:left">查看实际值是否满足指定的条件</td>
</tr>
<tr>
<td style="text-align:left"><code>fail()</code></td>
<td style="text-align:left">让测试失败</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>好了，以上就是有关单元测试 Junit 的简单使用指南了。虽说大家现在还是有很多人在使用 Junit4，但如果你之前并未接触过 Junit，个人建议那就直接学习 Junit5 吧。当然了，Junit4 了解也是很有必要的，毕竟技多不压身，多一份技能少求人嘛。</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">Lombok 安装及使用指南</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220719-lombok-install-and-usage.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220719-lombok-install-and-usage.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Lombok 安装及使用指南</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/t4h5VRfbYqNIRZVlMaqPEg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/t4h5VRfbYqNIRZVlMaqPEg</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> Lombok 安装及使用指南</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/t4h5VRfbYqNIRZVlMaqPEg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/t4h5VRfbYqNIRZVlMaqPEg</a></p>
</div>
<h2> 简介</h2>
<p>为了减少写一些 <code>get/set/toString</code> 方法，让项目代码更加整洁，提高开发效率，发现大家都开始采用 Lombok 这个工具。Lombok 是一个 Java 类库，它会自动插入编辑器和构建工具，用于帮助开发人员消除 Java 中冗长样板代码。而我们开发人员所要做的，仅仅是添加几个 Lombok 中的注解，就可以替换掉原来的多行 <code>get/set/toString</code> 方法代码，既简洁也易于维护。下面我们就来看看，如何安装并使用这一工具。</p>
<h2> 安装 Lombok</h2>
<p>日常开发中，相信大多数人现在使用的都是 IDEA 这个 Java 神器了，如果你还在使用 Eclipse 或者 MyEclipse 等工具，那强烈推荐你去体验一把 IDEA，相信你一用上它就会爱上它的强大！下面我就以在 IDEA 中使用 Lombok 为例，看看如何安装并使用它。</p>
<p>在先前 IDEA 的版本中，Lombok 是需要通过插件来安装的，安装方法如下：依次进入<code>File -&gt; Settings -&gt; Plugins</code>，然后搜索 Lombok ，最后进行安装即可。而在新版本的 IDEA 中，Lombok 已经被集成到 IDEA 中，我们不用再去安装它就可以直接使用，可以说是十分方便了。</p>
<ul>
<li>老版本 IDEA 安装 Lombok</li>
</ul>

<ul>
<li>新版本中集成了 Lombok</li>
</ul>

<p>以上就是 Lombok 的安装过程了，是不是十分简单？那接下来我们就来看看，如何在我们的项目中使用 Lombok！</p>
<h2> Lombok 使用</h2>
<p>现在大家进行项目管理时用的工具大多应该都是 Maven，所以我们直接在需要使用 Lombok 的项目中加入 Lombok 编译支持，也就是在 <code>pom.xml</code> 文件中加入以下依赖。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入相关依赖之后，接下来就是具体使用过程了。</p>
<h3> 具体使用</h3>
<p>在需要的实体类中引入相关注解即可，只不过注解不同它们所对应的功能也不同，而且同一个注解可能在不同位置的功能也不一样。如下图；</p>
<figure><figcaption></figcaption></figure>
<h3> 常用注解</h3>
<h4> @Data</h4>
<p>注解在 <strong>类</strong> 上：给类的所有属性提供 <code>get</code> 和 <code>set</code> 方法，此外还有 <code>equals、canEqual、hashCode、toString</code> 方法以及 <strong>默认参数为空的构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Setter</h4>
<p>注解在 <strong>类</strong> 上：为该类所有属性均提供 <code>set</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注解在 <strong>属性</strong> 上：为该属性提供 <code>set</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Getter</h4>
<p>注解在 <strong>类</strong> 上：为该类所有属性均提供 <code>get</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注解在 <strong>属性</strong> 上：为该属性提供 <code>get</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @ToString</h4>
<p>注解在 <strong>类</strong> 上：生成所有参数的 <code>toString()</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Value</h4>
<p>注解在 <strong>类</strong> 上：生成 <code>get</code> 方法，以及 <code>equals、hashCode、toString</code> 方法，同时提供 <strong>含所有参数的构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @AllArgsConstructor</h4>
<p>注解在 <strong>类</strong> 上：为类提供一个 <strong>全参构造方法</strong>，但此时不再提供默认构造方法；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @NoArgsConstructor</h4>
<p>注解在 <strong>类</strong> 上：为类提供一个 <strong>无参构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @RequiredArgsConstructor</h4>
<p>注解在 <strong>类</strong> 上：使用类中所有带 <code>@NonNull</code> 注解的或带有 <code>final</code> 修饰的成员变量生成对应构造方法；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @NonNull</h4>
<p>注解在 <strong>属性</strong> 上，自动生成一个关于该参数的非空检查，若参数为 <code>null</code>，则抛出一个空指针异常，同时提供 <strong>默认构造方法</strong>，具体用法可以参照上面的例子；</p>
<h4> @EqualsAndHashCode</h4>
<p>注解在 <strong>类</strong> 上，生成 <code>equals、canEquals、hasnCode</code> 方法，同时会生成默认构造方法；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Cleanup</h4>
<p>注解在 <strong>局部变量</strong> 前，保证该变量代表的资源使用后自动关闭，默认调用资源的 <code>close()</code> 方法，若该资源有其它关闭方法，可用 <code>@Cleanup("方法名")</code> 来指定要调用的方法，同时提供 默认构造方法；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Synchronized</h4>
<p>注解在 <strong>类方法 或 实例方法</strong>：效果与 <code>synchronized</code> 关键字相同，区别在于锁对象不同，对于类方法和实例方法，<code>synchronized</code> 关键字的锁对象分别是 <strong>类的</strong> <code>**class**</code> <strong>对象和</strong> <code>**this**</code> <strong>对象</strong>，而 <code>@Synchronized</code> 的锁对象分别是 <strong>私有静态</strong> <code>**final**</code> <strong>对象</strong> <code>**lock**</code> <strong>和 私有</strong> <code>**final**</code> <strong>对象</strong> <code>**lock**</code>，也可以自己指定锁对象，同时提供默认构造方法；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @SneakyThrows</h4>
<p>注解在 <strong>方法</strong> 上：将方法中的代码用 <code>try-catch</code> 语句包裹，捕获异常并在 <code>catch</code> 中用 <code>Lombok.sneakyThrow(e)</code> 将异常抛出，还可以用 <code>@SneakyThrows(Exception.class)</code> 的形式指定抛出异常类型，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Log</h4>
<p>注解在 <strong>类</strong> 上：主要用于我们记录日志信息，同时提供 <strong>默认构造方法</strong>。它封装了多个主流 <code>Log</code> 库，主要有如下几个；</p>
<ul>
<li>
<p><code>@Log</code></p>
</li>
<li>
<p><code>@Slf4j</code></p>
</li>
<li>
<p><code>Log4j</code></p>
</li>
<li>
<p><code>Log4j2</code></p>
</li>
</ul>
<h2> 总结</h2>
<p>以上就是关于 Lombok 的相关使用小技巧了，如果你还没有使用过它，那就赶紧去试试吧！</p>
<p>最后，创作不易，如果你觉得我的文章对你有所帮助，那就来个一键三连吧！</p>
<h2> 参考资料</h2>
<ol>
<li><a href="https://projectlombok.org/features/all" target="_blank" rel="noopener noreferrer">https://projectlombok.org/features/all</a></li>
</ol>
<p><strong>关注公众号，获取最新文章更新</strong></p>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">Fastjson V2 简单使用手册</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220720-fastjson2-quickstart.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220720-fastjson2-quickstart.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Fastjson V2 简单使用手册</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>在日常 Java 企业级开发中，可能避不开 <code>JSON</code> 这个格式。 <code>JSON</code> 源于 1999 年的 <code>JS</code> 语言规范 <code>ECMA262</code> 的一个子集，然后又在 2003 年作为一种数据格式 <code>ECMA404</code> 发布，到了 2006 年，又作为 <code>rfc4627</code> 发布。直到现在，<code>JSON</code> 的应用已经十分广泛了。</p>]]></summary>
    <content type="html"><![CDATA[<h1> Fastjson V2 简单使用手册</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>在日常 Java 企业级开发中，可能避不开 <code>JSON</code> 这个格式。 <code>JSON</code> 源于 1999 年的 <code>JS</code> 语言规范 <code>ECMA262</code> 的一个子集，然后又在 2003 年作为一种数据格式 <code>ECMA404</code> 发布，到了 2006 年，又作为 <code>rfc4627</code> 发布。直到现在，<code>JSON</code> 的应用已经十分广泛了。</p>
<p><code>JSON</code> 基于纯文本，所以阅读起来也十分轻松，而且规范简单，容易处理，能够做到开箱即用，最最重要的是，<code>JSON</code> 和平台无关，所以能够作为不同系统间的传输格式协议。</p>
<p><code>JSON</code> 有 7 大基本数值，分别是：<code>false</code>、<code>null</code>、<code>true</code>、<code>object</code>、<code>array</code>、<code>number</code>、<code>string</code>。其结构也非常简单，只有两种结构：一个是 <strong>数组</strong>，一个是<strong>对象中的键值对集合</strong>。其中，对象用 <code>{}</code> 来表示，其内部是 <code>key:value</code> 形式，而数组则是用 <code>[]</code> 来表示，不同值之间用逗号 <code>,</code> 分隔。</p>
<p>以下就是一个 <code>JSON</code> 的简单示例：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在 Java 中，主流的 <code>JSON</code> 库只要有以下三个：</p>
<ol>
<li><code>Fastjson</code>：国内阿里巴巴公司所开发的 <code>JSON</code> 库，性能出众且快速。</li>
<li><code>Jackson</code>：<code>Spring</code> 默认的 <code>JSON</code> 库，社区十分活跃，更新迭代快。</li>
<li><code>Gson</code>：谷歌出品的 <code>JSON</code> 库，算是目前来说功能最全的 <code>JSON</code> 库了。</li>
</ol>
<p>得益于 <code>Fastjson</code> 的超高性能，国内的大部分公司都选择了阿里出品的 <code>Fastjson</code> 作为处理 <code>JSON</code> 的工具库。本文就来看看，<code>Fastjson</code> 的一些常用的使用技巧。</p>
<h2> 使用技巧</h2>
<p>首先，我们创建一个 <code>Maven</code> 项目，用来演示 <code>Fastjson</code> 的使用，也方便我们管理依赖。同时，这里选择 <code>Fastjson v2</code> 来作为今天的演示主角。</p>
<p>当然，首要的工作就是创建一个 <code>Maven</code> 项目，如果你还有点摸不着头脑，那可以移步先去看看前备知识：</p>
<blockquote>
<p><a href="https://cunyu1943.github.io/JavaPark/md/java/maven/20220104-maven-project-with-idea" target="_blank" rel="noopener noreferrer">Maven 教程：使用 IDEA 创建 Maven 项目</a></p>
</blockquote>
<p>当我们创建完成一个 <code>Maven</code> 项目之后，首要的工作就是在项目的 <code>pom.xml</code> 中添加 <code>Fastjson V2</code> 的依赖。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们创建一个 <code>Hero</code> 类，方便后续过程中的使用。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Java 对象序列化为 JSON</h3>
<p>在我们的主类中创建一个 <code>Hero</code> 对象，然后利用 <code>toJSONString()</code> 方法将其转换为 <code>JSON</code> 字符串，可以看到结果正确转换了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> JSON 解析为 Java 对象</h3>
<p>假设有一个 <code>JSON</code> 字符串，我们想将其转换为 Java 对象，则可以使用 <code>parseObject()</code> 方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> JSON 解析为 JSONObject</h3>
<p>将 <code>JSON</code> 解析为 <code>JSONObject</code> 的方法和将 <code>JSON</code> 转换为 Java 对象的方法类似，但是少了一个参数，这里需要注意。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> JSON 解析为 JSONArray</h3>
<p>要将 <code>JSON</code> 解析为 <code>JSONArray</code>，此时可以使用 <code>parseArray()</code> 方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>以上就是日常开发中常见的 4 种其他格式和 <code>JSON</code> 格式之间的转换过程了，其中，最常用的应该莫过于 <code>JSON</code> 和 Java 对象之间的相互转换了，一定要熟练掌握！关于 <code>Fastjson V2</code> 的简单使用就介绍到这里了，关于更多 <code>Fastjson V2</code> 的高级使用技巧，等待我们后续文章再见吧！</p>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">深入浅出 Java 注解</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20220721-annotations.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20220721-annotations.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 深入浅出 Java 注解</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 注解简介</h2>
<p>所谓注解，其实就像一种拥有特定作用的注释，自 JDK1.5 及之后版本所引入的特性，它是放在 Java 源码的类、方法、字段、参数前的一种用作标注的“元数据”，与类、接口、枚举处于同一个层次中。</p>
<p>通过其作用的不同，我们常常将注解分为如下 3 类：</p>
<ol>
<li><strong>编写文档</strong>：通过代码中标识的注解生成对应文档（即类似于 Java doc 的文档）；</li>
<li><strong>代码分析</strong>：通过代码中标识的注解对代码进行分析（使用反射）；</li>
<li><strong>编译检查</strong>：通过代码中标识的注解让编译器能实现基本的编译检查（<code>@Override</code>）；</li>
</ol>]]></summary>
    <content type="html"><![CDATA[<h1> 深入浅出 Java 注解</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 注解简介</h2>
<p>所谓注解，其实就像一种拥有特定作用的注释，自 JDK1.5 及之后版本所引入的特性，它是放在 Java 源码的类、方法、字段、参数前的一种用作标注的“元数据”，与类、接口、枚举处于同一个层次中。</p>
<p>通过其作用的不同，我们常常将注解分为如下 3 类：</p>
<ol>
<li><strong>编写文档</strong>：通过代码中标识的注解生成对应文档（即类似于 Java doc 的文档）；</li>
<li><strong>代码分析</strong>：通过代码中标识的注解对代码进行分析（使用反射）；</li>
<li><strong>编译检查</strong>：通过代码中标识的注解让编译器能实现基本的编译检查（<code>@Override</code>）；</li>
</ol>
<h2> 常用的预定义注解</h2>
<h3> <code>@Override</code></h3>
<p>一般是用在方法上，表示重写该父类的方法，比如我们使用最多的 <code>toString()</code> 方法，它是 <code>Object</code> 类的一个方法，而我们的写的类都是继承自 <code>Object</code> 类，所以我们自定义的所有类都是有 <code>toString()</code> 方法的。但是如果我们自定义类中的方法在父类中没有，则不能使用该注解，否则会导致无法编译通过。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> <code>@Deprecated</code></h3>
<p>一般用在方法之前，表示该方法已经过期，不建议再继续使用（但是仍然有效，只不过可能有更新的版本，推荐使用更新的版本）。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> <code>@SuppressWarnings</code></h3>
<p>表示忽略警告信息，常用的值以及含义如下表：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>deprecation</code></td>
<td>使用了不赞成使用的类或方法时的警告</td>
</tr>
<tr>
<td><code>unchecked</code></td>
<td>使用了未经检查的转换时的警告</td>
</tr>
<tr>
<td><code>fallthrough</code></td>
<td>当 <code>switch</code> 程序块直接通往下一种情况而没有 <code>break</code> 时的警告</td>
</tr>
<tr>
<td><code>path</code></td>
<td>在类路径、源文件路径等中有不存在的路径时的警告</td>
</tr>
<tr>
<td><code>serial</code></td>
<td>当在可序列化的类上缺少 <code>serialVersionUID</code> 定义时的警告</td>
</tr>
<tr>
<td><code>finally</code></td>
<td>任何 <code>finally</code> 子句不能正常完成时的警告</td>
</tr>
<tr>
<td><code>rawtypes</code></td>
<td>泛型类型未指明</td>
</tr>
<tr>
<td><code>unused</code></td>
<td>引用定义了，但是没有被使用</td>
</tr>
<tr>
<td><code>all</code></td>
<td>关闭以上所有情况的警告</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 自定义注解</h2>
<h3> 格式</h3>
<p>我们可以使用 <code>@interface</code> 来自定义注解，其格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个简单的示例如下，其中 <code>AnnoDemo</code> 代表着我们自定义注解的名称，而 <code>name()</code>、<code>age()</code>、<code>score()</code> 则分别表示自定义注解的三个属性，而且我们利用关键字 <code>default</code> 对每个属性都赋予了默认值。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 原理</h3>
<p>注解本质上相当于一个接口，它默认继承自 <code>java.lang.annotation.Annotation</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 参数</h3>
<p>注解的参数类似于无参的方法，通常我们推荐用 <code>default</code> 来设定一个默认值，对于方法的基本要求通常有如下几点：</p>
<ol>
<li>方法的返回值类型不可以是 <code>void</code>；</li>
<li>如果定义了方法，那么在使用时需要给方法进行赋值，赋值的规则如下：
<ol>
<li>若定义方法时，使用了关键字 <code>default</code> 对方法赋予了默认初始值，那么在使用注解时，可以不用对方法进行再次赋值；</li>
<li>若只有一个方法需要赋值，且方法名为 <code>value</code>，那么此时 <code>value</code> 可以省略，直接定义值即可；</li>
<li>数组赋值时，值需要用大括号 <code>{}</code> 包裹，若数组中只有一个值，那么此时 <code>{}</code> 可以省略；</li>
</ol>
</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上述例子中，<code>name()</code>、<code>age()</code>、<code>score()</code> 就是我们自定义注解的参数。而当我们要是用该注解时，则通过如下方式来对参数进行赋值。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 元注解</h2>
<h3> 定义</h3>
<p>所谓元注解(<code>meta annotation</code>)，就是可以用来修饰其他注解的注解。</p>
<h3> 常用的元注解</h3>
<ol>
<li><code>@Target</code></li>
</ol>
<p>描述注解所修饰的对象范围，其取值主要有如下几种：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ElementType.TYPE</code></td>
<td>表示可以作用于类或接口</td>
</tr>
<tr>
<td><code>ElementType.FIELD</code></td>
<td>表示可以作用于成员变量</td>
</tr>
<tr>
<td><code>ElementType.METHOD</code></td>
<td>表示可以作用于方法</td>
</tr>
<tr>
<td><code>ElementType.CONSTRUCTOR</code></td>
<td>表示可以作用于构造方法</td>
</tr>
<tr>
<td><code>ElementType.PARAMETER</code></td>
<td>表示可以作用于方法的参数</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><code>@Retention</code></li>
</ol>
<p>用于约束注解的生命周期，其取值如下：</p>
<table>
<thead>
<tr>
<th>值</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>RetentionPolicy.SOURCE</code></td>
<td style="text-align:left">表示在源代码文件中有效，注解将被编译器丢弃（注解信息仅保留在源码中，源码经编译后注解信息丢失，不再保留到字节码文件中）</td>
</tr>
<tr>
<td><code>RetentionPolicy.CLASS</code></td>
<td style="text-align:left">表示在字节码文件中有效，注解在字节码文件中可用，但会被 JVM 丢弃</td>
</tr>
<tr>
<td><code>RetentionPolicy.RUNTIME</code></td>
<td style="text-align:left">表示在运行时有效，此时可以通过反射机制来读取注解的信息</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li><code>@Documented</code></li>
</ol>
<p>描述其他类型的注解是否被抽取到 API 文档中。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li><code>@Inherited</code></li>
</ol>
<p>这是一个标记注解，描述某个注解能够被子类继承，但是该元注解只适合已经配置了 <code>@Target(ElementType.TYPE)</code> 类型的自定义注解，而且仅针对于类的继承，而对于接口的继承则无效。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li><code>@Repeatable</code></li>
</ol>
<p>该注解是从 JDK1.8 新引入的元注解，表示在同一位置能够重复相同的注解。在没有该注解之前，我们一般是无法在同一类型上使用相同注解的，但引入该注解后，我们就可以在同一类型上使用相同注解。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用 <code>@Repeatable</code> 配置自定义注解之后，我们就可以在某个类型声明处添加多个我们自定义的注解了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>总结上述的知识点，我们将自定义注解的过程归纳为如下 3 步。</p>
<ol>
<li><strong>定义一个注解</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>添加参数并设置默认值</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li><strong>利用元注解来配置我们的自定义注解</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际应用过程中，利用元注解配置自定义注解时，必须设置 <code>@Target</code> 和 <code>@Retention</code> 两个元注解，而且 <code>@Retention</code> 的值通常是设置为 <code>RetentionPolicy.RUNTIME</code>。</p>
<p>好了，以上就是我们注解的相关概念以及自定义注解所需要的掌握的一些知识点了，如果你觉得对你有所帮助，那就来一波点赞关注吧！<br>
<strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<figure><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
</div>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">流程控制知识大闯关</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20221127-loop-in-action.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20221127-loop-in-action.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 流程控制知识大闯关</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/K4aL8o_ND7R_W0mooNhusw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/K4aL8o_ND7R_W0mooNhusw</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 流程控制知识大闯关</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/K4aL8o_ND7R_W0mooNhusw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/K4aL8o_ND7R_W0mooNhusw</a></p>
</div>
<hr>
<h2> 前言</h2>
<p>既然已经学习了 <code>Java</code> 中的流程控制，接下来就来实际操作下，利用我们所学知识来解决实际的问题。</p>
<p>光学是没有用的，只有不断实践才能了解其中的真正含义。</p>
<h2> 闯关</h2>
<h3> 第一关：打印折纸的次数</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>已知世界上最高的山峰是珠穆朗玛峰，它的高度是 <code>8844.43</code> 米，假设有一张足够大的纸，其厚度为 <code>0.1</code> 毫米，那么请问我要折叠多少次，才能将这张纸折成珠穆朗玛峰的高度？</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">折叠次数</th>
<th style="text-align:center">厚度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>1</code></td>
<td style="text-align:center"><code>0.1</code></td>
</tr>
<tr>
<td style="text-align:center"><code>2</code></td>
<td style="text-align:center"><code>0.2</code></td>
</tr>
<tr>
<td style="text-align:center"><code>3</code></td>
<td style="text-align:center"><code>0.4</code></td>
</tr>
<tr>
<td style="text-align:center"><code>4</code></td>
<td style="text-align:center"><code>0.8</code></td>
</tr>
<tr>
<td style="text-align:center"><code>……</code></td>
<td style="text-align:center"><code>……</code></td>
</tr>
</tbody>
</table>
<p>可以发现，纸张初始厚度为 <code>0.1</code> 毫米，而每次折叠之后，折叠后的纸张厚度都是未折叠前的 <code>2</code> 倍。而同时，我们事先是不清楚具体要叠多少次的，所以我们选择 <code>while</code> 来进行循环。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第二关：回文数</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>假设给你一个整数 <code>x</code>，如果这个数是回文数，打印 <code>true</code>，否则打印 <code>false</code>。</p>
<p>回文数：指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>既然回文数的定义是正序和倒序读都是一样，那么我们就把这个数逆转，然后比较逆转的数和原来的数是否相等，如果相等，那么说明这个数是一个回文数，否则它就不是一个回文数。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第三关：求商和余数</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>给定两个整数，分别是被除数和除数，然后在不使用乘法、除法和 <code>%</code> 运算符的情况下，求出商和余数。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>平时如果要求两数的商，那么可以使用 <code>/</code>，而要求两数的余数则可以使用 <code>%</code>。但现在已经规定不能使用这两个运算符，那么就只想另想办法。</p>
<p>我们知道，其实乘除法归根结底还是加减法的简化，所以我们可以利用减法来实现求两数的商和余数。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第四关：逢七必过</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>游戏规则：从任意一个数字开始报数，当要报的数字是包含 <code>7</code> 或 <code>7</code> 的倍数时，都要说：过。</p>
<p>打印出 <code>1 - 100</code> 之间的满足逢七必过规则的数据。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>当一个数是 <code>7</code> 的倍数，那么这个数除以 <code>7</code> 的余数为 <code>0</code>。而如果这个数包含 <code>7</code>，那么这个数的个位或者十位是 <code>7</code>。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第五关：平方根</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>输入一个大于等于 <code>2</code> 的整数，计算并返回这个数的平方根，结果只保留整数部分。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>求一个数的平方根，通过遍历的方式，如果在不大于所给数的范围之内存在一个数的平方等于所给数，那么范围内的这个数就是所给数的平方根。而如果范围内存在一个数的平方刚好大于所给数，那么比这个数小 <code>1</code> 的数一定是所给数的平方根的整数部分，也就是我们所求的结果。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第六关：判断一个数是否为质数</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>从键盘输入一个正整数，判断该数是否为质数。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>所谓质数，就是指这个数只能被 <code>1</code> 和它本身整除，要注意 <code>1</code> 既不是质数也不是合数。</p>
<p>此时通过遍历，如果 <code>1</code> 到它之间存在一个数能被所给数整除，那么说明说给数不是一个质数。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第七关：猜数小游戏</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>系统随机给出一个 <code>1 - 100</code> 之间的整数，然后用程序实现才出这个数字是多少。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>随机数需要用 <code>Random</code> 包，然后就是通过比较输入的数和生成的随机数大小，直到最后猜中。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>以上就是关于流程控制中关于 <code>for</code>、<code>while</code> 的知识测验了，你闯过了几关呢？</p>
<p>最后，文中所有代码已上传到 <code>Gitee</code>，有需要的朋友可以自取。</p>
<blockquote>
<p>传送门：<a href="https://gitee.com/cunyu1943/java-in-practice" target="_blank" rel="noopener noreferrer">https://gitee.com/cunyu1943/java-in-practice</a></p>
</blockquote>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">static 和 final 小课堂</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20221203-oop-advance.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20221203-oop-advance.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> static 和 final 小课堂</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>学习了面向对象的一些知识点后，在看别人的代码中经常会看到 <code>static</code> 和 <code>final</code> 两个关键字，那你知道它俩都是做什么用的么，使用的时候需要注意啥呢？</p>
<p>今天的内容就来一起了解下，<code>static</code> 和 <code>final</code> 关键字的使用。</p>]]></summary>
    <content type="html"><![CDATA[<h1> static 和 final 小课堂</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>学习了面向对象的一些知识点后，在看别人的代码中经常会看到 <code>static</code> 和 <code>final</code> 两个关键字，那你知道它俩都是做什么用的么，使用的时候需要注意啥呢？</p>
<p>今天的内容就来一起了解下，<code>static</code> 和 <code>final</code> 关键字的使用。</p>
<h2> static</h2>
<p>静态的意思，是 <code>Java</code> 中常用的修饰符，既可以用它来修饰成员变量，也可以用它来修饰成员方法。</p>
<h3> 静态变量</h3>
<p>静态变量就是用 <code>static</code> 来修饰的成员变量，最重要的特点就是一个类中的静态变量被类中的所有对象所共享。它不属于任何一个对象，而是属于类。其生命周期同类一样，共生共存，是优先于对象的。</p>
<p>和成员变量不同的是，成员变量只能通过新建对象，然后用对象名来进行调用。而静态变量不仅仅可以用这种方式，还可以直接通过类名来进行调用，而这也是更为推荐的方式。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li><strong>成员变量调用</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>静态变量调用</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 静态方法</h3>
<p>静态方法就是类中用 <code>static</code> 来修饰的成员方法，一般用来修饰公共的工具类或者测试类。</p>
<p>同样的，静态方法既可以用通过新建对象，然后用对象名来调用的方式，也可以直接通过类名来调用的方式，这也是更为推荐的方式。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 注意</h3>
<p>使用 <code>static</code> 修饰方法或变量后，需要注意以下的小细节。</p>
<ul>
<li>一个静态方法中<strong>只能</strong>访问静态变量和其他的静态方法。而不能访问非静态的变量和方法。</li>
<li>但一个非静态方法一方面既可以访问静态变量，也可以访问非静态变量；另一方面，也既可以访问静态方法，也可以访问非静态方法。</li>
<li>不同于成员方法，静态方式中是不存在 <code>this</code> 关键字的。</li>
</ul>
<h3> 静态代码块</h3>
<p>在代码中用 <code>static{}</code> 包裹起来的代码叫做静态代码块，它会随着类的加载而加载，而且会自动触发，只执行一次，一般用来对一些数据初始化。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> final</h2>
<h3> 修饰变量</h3>
<p>用 <code>final</code> 修饰的变量叫做常量，说明它只能被赋值一次。</p>
<p>实际开发中，一般用常量来作为系统的配置信息，一方面既方便维护，另一方面又可以提高代码可读性。</p>
<p>对常量进行命名时，一般遵循以下的规范：</p>
<ul>
<li>如果是单个单词，那么将它全部大写即可。</li>
<li>如果是多个单词，那么将每个单词都大写，并且单词之间用下划线 <code>_</code> 隔开。</li>
</ul>
<p>此外，对于修饰的变量的类型不同，含义也是不一样的。</p>
<p>如果修饰的变量是一个基本类型，那么表示的是该变量存储的<strong>数据值</strong>不可改变。而如果修饰的变量是一个引用类型，则表示该变量存储的<strong>地址值</strong>不能改变，但是对象内部是可以发生变化的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 修饰方法</h3>
<p>说明该方法是最终方法，不能再被重写。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 修饰类</h3>
<p>说明这个类时最终类，不能够再被继承。也就是说，如果一个类被 <code>final</code> 所修饰，那么这个类不能作为其他任意类的福来。如果试图对一个用 <code>final</code> 修饰的类进行继承，则在编译期间可能会发生错误。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>今天的内容到此就结束了，首先介绍了 <code>static</code> 用来修饰符变量和方法的应用场景，还额外补充了静态代码块相关的知识点。另外，我们也对 <code>final</code> 用来修饰变量、方法和类时的场景进行了回顾。</p>
<p>码字不易，如果本文对你所有帮助，那就来个一键三连吧！</p>
]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">抽象、接口和内部类</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/20221211-abstract.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/20221211-abstract.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 抽象、接口和内部类</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 抽象方法</h2>
<h3> 定义</h3>
<p>所谓抽象方法，就是将公共的行为（方法）抽取到一个父类后，由于每个子类中执行的内容是不一致的，所以父类中无法确认具体的方法体，此时就可以将该方法定义为抽象方法。</p>
<h3> 格式</h3>
<p>要定义一个抽象方法，那么需要遵循以下的格式，要注意，抽象方法一般都是没有定义</p>]]></summary>
    <content type="html"><![CDATA[<h1> 抽象、接口和内部类</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 抽象方法</h2>
<h3> 定义</h3>
<p>所谓抽象方法，就是将公共的行为（方法）抽取到一个父类后，由于每个子类中执行的内容是不一致的，所以父类中无法确认具体的方法体，此时就可以将该方法定义为抽象方法。</p>
<h3> 格式</h3>
<p>要定义一个抽象方法，那么需要遵循以下的格式，要注意，抽象方法一般都是没有定义</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下是一个抽象方法定义的具体实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 抽象类</h2>
<h3> 定义</h3>
<p>知道了什么是抽象方法，那么抽象类就很简单了，如果我们发现一个类中存在着抽象方法，那么这个类一定要声明为抽象类。</p>
<h3> 格式</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 注意</h3>
<ol>
<li>抽象类不能实例化。</li>
<li>抽象类中不一定有抽象方法，但有抽象方法的类一定是抽象类。</li>
<li>抽象类中可以有构造方法。</li>
<li>如果一个类的父类是抽象类，那么这个类要么是抽象类，要么重写父类中所有的抽象方法。</li>
</ol>
<h3> 作用</h3>
<p>在抽取共性时，如果无法确定方法体，此时就可以将该方法定义为抽象方法。然后强制让子类按照某种格式重写。</p>
<h2> 接口</h2>
<h3> 定义</h3>
<p>接口是一种规则，是对行为的抽象。</p>
<h3> 格式</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 注意</h3>
<ol>
<li>接口和抽象类一样，不能被实例化。</li>
<li>接口和类之间是实现关系，通过关键字 <code>implements</code> 表示，实现格式为:</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>如果一个类实现了某个接口，那么这个类要么是抽象类，要么就得重写接口中所有的抽象方法。</li>
<li>不同于类单继承的特点，一个类是可以实现多个接口的。</li>
</ol>
<h3> 成员的特点</h3>
<ol>
<li><strong>成员变量</strong></li>
</ol>
<p>接口中，成员变量只能是常量，默认修饰符为 <code>public static final</code>。</p>
<ol start="2">
<li><strong>构造方法</strong></li>
</ol>
<p>接口中不存在构造方法。</p>
<ol start="3">
<li><strong>成员方法</strong></li>
</ol>
<p><code>JDK 7</code> 之前，只能是抽象方法，其默认修饰符为 <code>public abstract</code>。<code>JDK 8</code> 时，能够定义有方法体的方法，<code>JDK 9</code> 中，有带来了可以定义私有方法的特性。</p>
<h3> 默认方法</h3>
<p>自 <code>JDK 8</code> 之后，就允许在接口中定义默认方法，但是需要使用关键字 <code>default</code> 来修饰，从而解决接口升级的问题。</p>
<p>接口中的<strong>默认方法</strong>的定义格式为：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用默认方法时，需要注意：</p>
<ul>
<li>接口中的默认方法不是抽象方法，所以没有要求强制被重写。但如果要重写默认方法，重写时就需要去掉默认方法的关键字 <code>default</code>。</li>
<li>默认方法中的权限空置房 <code>public</code> 可以省略不写，但关键字 <code>default</code> 不能省略。</li>
<li>如果一个类实现了多个接口，而且着多个接口中还存在着重名的默认方法，那么该类就必须对重名的默认方法进行重写。</li>
</ul>
<p>以下是一个存在重名默认方法必须重写的实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 静态方法</h3>
<p>除了默认方法，<code>JDK 8</code> 以后还可以在接口中定义静态方法，此时需要用关键字 <code>static</code> 修饰。</p>
<p>接口中 <strong>静态方法</strong> 的定义格式为：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在接口中使用静态方法时，需要注意：</p>
<ul>
<li>静态方法只能通过接口名调用，不能通过实现接口的类名或者对象名来调用。</li>
<li>权限控制符 <code>public</code> 可以省略，但关键字 <code>static</code> 不能省略。</li>
</ul>
<p>以下是一个在接口中定义静态方法和调用接口中静态方法的实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 私有方法</h3>
<p>除了上述的静态方法和默认方法之外，<code>JDK 9</code> 中又引入接口中定义私有方法的特性。</p>
<p>其中，接口中定义私有方法的格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>两者的区别在于：静态的私有方法（带关键字 <code>static</code>）是为接口中的静态方法服务，而非静态的私有方法（不带关键字 <code>static</code>） 则是为接口中的默认方法服务。</p>
<p>以下是在接口中定义私有方法的实例：</p>
<ol>
<li><strong>私有方法</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>静态私有方法</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 接口和类之间的关系</h3>
<ol>
<li><strong>类和类的关系</strong></li>
</ol>
<p>类与类之间只能存在继承关系，且只限于单继承，不能多继承，但是可以多层继承。</p>
<ol start="2">
<li><strong>类和接口的关系</strong></li>
</ol>
<p>类和接口之间是实现关系，既可以单实现，也可以多实现，还能在继承一个类的同时实现多个接口。</p>
<ol start="3">
<li><strong>接口和接口的关系</strong></li>
</ol>
<p>接口之间是继承关系，但不同于类和类之间的关系，接口之间既可以单继承，也可以多继承。</p>
<h2> 内部类</h2>
<h3> 定义</h3>
<p>顾名思义，所谓内部类就是定义在类中的类。比如说在 <code>A</code> 类的内部定义了一个 <code>B</code> 类，那么我们就说 <code>B</code> 是内部类。其中 <code>B</code> 类表示的是 <code>A</code> 类的一部分，而且 <code>B</code> 类单独存在时没有任何意义。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 特点</h3>
<p>如果一个类中定义了一个内部类，那么这个内部类就能够直接访问外部类的所有成员，包括私有成员。</p>
<p>但是，如果一个外部类要访问内部类的成员，那么此时就必须创建对象。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 分类</h3>
<p><code>Java</code> 中，内部类主要分为以下四种：</p>
<ol>
<li><strong>成员内部类</strong></li>
<li><strong>静态内部类</strong></li>
<li><strong>局部内部类</strong></li>
<li><strong>匿名内部类</strong></li>
</ol>
<h4> 成员内部类</h4>
<p>写在成员位置，属于外部类的成员，其中成员内部类也能够被常用的修饰符 <code>public、private、protected、static</code> 等所修饰。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要想获取成员内部类对象，可以通过以下两种方式：</p>
<ol>
<li>在外部类中编写方法，然后对外提供内部类的对象。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>直接创建，创建格式为：<code>外部类名.内部类名 对象名 = 外部类对象.内部类对象</code>。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 静态内部类</h4>
<p>静态内部类就是用关键字 <code>static</code> 修饰的内部类。静态内只能访问外部类中的静态变量和静态方法，如果要访问非静态的变量和方法就需要创建对象。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建静态内部类对象的格式为：<code>外部类名.内部类对象名 = new 外部类名.内部类名();</code></p>
<p>调用非静态方法的格式：先创建对象，然后用对象调用。</p>
<p>调用静态方法的格式：<code>外部类名.内部类名.方法名();</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 局部内部类</h4>
<p>如果一个类被定义在方法中，那么这个类就叫做局部内部类。外界是无法直接使用局部内部类，需要在方法内部创建对象并使用。同时，这个内部类既可以访问外部类的成员，也可以访问方法中的局部变量。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 匿名内部类</h4>
<p>匿名内部类就是没有名字的内部类，也正因为名字，所以匿名内部类只能使用一次。而且使用匿名内部类还有个前提条件：必须继承一个父类或者实现一个接口。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content>
    <category term="Java 基础"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">Java 基础</title>
    <id>https://cunyu1943.github.io/java-tutorial/javase-series/</id>
    <link href="https://cunyu1943.github.io/java-tutorial/javase-series/"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">《SQL 必知必会》全解析</title>
    <id>https://cunyu1943.github.io/java-tutorial/mysql-series/20220726-sql-in-10min.html</id>
    <link href="https://cunyu1943.github.io/java-tutorial/mysql-series/20220726-sql-in-10min.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 《SQL 必知必会》全解析</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/zbOqyAtsWsocarsFIGdGgw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/zbOqyAtsWsocarsFIGdGgw</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 《SQL 必知必会》全解析</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/zbOqyAtsWsocarsFIGdGgw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/zbOqyAtsWsocarsFIGdGgw</a></p>
</div>
<h2> 前言</h2>
<p>你是否还在烦恼 SQL 该从何学起，或者学了 SQL 想找个地方练练手？好巧不巧，最近在工作之余登上牛客，发现了牛客不知道啥时候上线了<a href="https://www.nowcoder.com/exam/oj/ta?tpId=298" target="_blank" rel="noopener noreferrer">SQL 必知必会</a>的练习题。</p>
<p>《SQL 必知必会》作为麻省理工学院、伊利诺伊大学等众多大学的参考教材，由浅入深地讲解了SQL的基本概念和语法。涉及数据的排序、过滤和分组，以及表、视图、联结、子查询、游标、存储过程和触发器等内容。实例丰富，方便查阅，可以说作为一个 CRUD BOY/GIRL 必读书目。</p>
<p>想着正好给它刷一遍，然后将自己刷题的一些想法总结下，于是有了今天这篇文章，希望能给需要的小伙伴一点点帮助。</p>
<h2> SQL1 从 Customers 表中检索所有的 ID</h2>
<h3> 描述</h3>
<p>现有表Customers如下：</p>
<table>
<thead>
<tr>
<th>cust_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
</tr>
<tr>
<td>B</td>
</tr>
<tr>
<td>C</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，从 Customers 表中检索所有的 cust_id。</p>
<h3> 示例答案</h3>
<p>返回 cust_id 列的内容</p>
<table>
<thead>
<tr>
<th>cust_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
</tr>
<tr>
<td>B</td>
</tr>
<tr>
<td>C</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>考察最简单的查询语句，因为 <code>Customers</code> 表中仅有 <code>cust_id</code> 一列，所以我们可以使用以下两种解答方式。</p>
<ul>
<li>第一种方式，选择特定列进行输出，这也是我们在工作中更加推荐使用的一种方式，将需要输出的列名全部描述出来。</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>第二种方式，使用 <code>*</code> 对表中所有列进行输出，因为 <code>Customers</code> 表中仅有一列，所以可以使用该方式。但在日常工作中，就算查询结果列中包含了数据库表的所有字段，也不要直接使用 <code>*</code>.</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL2 检索并列出已订购产品的清单</h2>
<h3> 描述</h3>
<p>表OrderItems含有非空的列prod_id代表商品id，包含了所有已订购的商品（有些已被订购多次）。</p>
<table>
<thead>
<tr>
<th>prod_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
</tr>
<tr>
<td>a2</td>
</tr>
<tr>
<td>a3</td>
</tr>
<tr>
<td>a4</td>
</tr>
<tr>
<td>a5</td>
</tr>
<tr>
<td>a6</td>
</tr>
<tr>
<td>a7</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写SQL 语句，检索并列出所有已订购商品（prod_id）的去重后的清单。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>要对结果去重，可以使用 <code>DISTINCT</code> 关键字。使用时，在后边跟上需要去重的字段即可保证这些去重字段的查询结果不重复。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外还可以使用 <code>GROUP BY</code> 关键字，改关键字支持在去重的同时，同步返回其他字段的信息。</p>
<div class="language-SQL line-numbers-mode" data-ext="SQL"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL3 检索所有列</h2>
<h3> 描述</h3>
<p>现在有 Customers 表（表中含有列 cust_id 代表客户 id，cust_name 代表客户姓名） 。</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>andy</td>
</tr>
<tr>
<td>a2</td>
<td>ben</td>
</tr>
<tr>
<td>a3</td>
<td>tony</td>
</tr>
<tr>
<td>a4</td>
<td>tom</td>
</tr>
<tr>
<td>a5</td>
<td>an</td>
</tr>
<tr>
<td>a6</td>
<td>lee</td>
</tr>
<tr>
<td>a7</td>
<td>hex</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>需要编写 SQL语句，检索所有列。</p>
<h3> 示例结果</h3>
<p>返回所有列 cust_id 和 cust_name。</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>andy</td>
</tr>
<tr>
<td>a2</td>
<td>ben</td>
</tr>
<tr>
<td>a3</td>
<td>tony</td>
</tr>
<tr>
<td>a4</td>
<td>tom</td>
</tr>
<tr>
<td>a5</td>
<td>an</td>
</tr>
<tr>
<td>a6</td>
<td>lee</td>
</tr>
<tr>
<td>a7</td>
<td>hex</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>类似于第一题，最简单的查询语句，只不过相比第一题多了一列，所以同样可以使用两种方式。</p>
<ul>
<li>使用 <code>*</code> 表示所有列。</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>将需要打印出的列详细列出。</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL4 检索顾客名称并且排序</h2>
<h3> 描述</h3>
<p>有表 Customers，cust_id 代表客户 id，cust_name 代表客户姓名。</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>andy</td>
</tr>
<tr>
<td>a2</td>
<td>ben</td>
</tr>
<tr>
<td>a3</td>
<td>tony</td>
</tr>
<tr>
<td>a4</td>
<td>tom</td>
</tr>
<tr>
<td>a5</td>
<td>an</td>
</tr>
<tr>
<td>a6</td>
<td>lee</td>
</tr>
<tr>
<td>a7</td>
<td>hex</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>从 Customers 中检索所有的顾客名称（cust_name），并按从 Z 到 A 的顺序显示结果。</p>
<h3> 示例结果</h3>
<p>返回客户姓名 cust_name</p>
<table>
<thead>
<tr>
<th>cust_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>tony</td>
</tr>
<tr>
<td>tom</td>
</tr>
<tr>
<td>lee</td>
</tr>
<tr>
<td>hex</td>
</tr>
<tr>
<td>ben</td>
</tr>
<tr>
<td>andy</td>
</tr>
<tr>
<td>an</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>要对数据库中的数据进行排序，需要使用关键字 <code>ORDER BY</code>。此外，默认情况下，SQL 中列的结果默认是正序排列的，即实际情况下以下语句执行结果是一样的。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而要对查询结果逆序输出，则需要用到 <code>DESC</code> 关键字，表示逆序输出。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL5 对顾客ID和日期排序</h2>
<h3> 描述</h3>
<p>有 Orders 表</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>order_num</th>
<th>order_date</th>
</tr>
</thead>
<tbody>
<tr>
<td>andy</td>
<td>aaaa</td>
<td>2021-01-01 00:00:00</td>
</tr>
<tr>
<td>andy</td>
<td>bbbb</td>
<td>2021-01-01 12:00:00</td>
</tr>
<tr>
<td>bob</td>
<td>cccc</td>
<td>2021-01-10 12:00:00</td>
</tr>
<tr>
<td>dick</td>
<td>dddd</td>
<td>2021-01-11 00:00:00</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，从 Orders 表中检索顾客 ID（cust_id）和订单号（order_num），并先按顾客 ID 对结果进行排序，再按订单日期倒序排列。</p>
<h3> 示例答案</h3>
<p>返回 2 列，cust_id 和 order_num</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>andy</td>
<td>bbbb</td>
</tr>
<tr>
<td>andy</td>
<td>aaaa</td>
</tr>
<tr>
<td>bob</td>
<td>cccc</td>
</tr>
<tr>
<td>dick</td>
<td>dddd</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>首先根据 cust_id 进行排列，andy 在 bob 和 dick 前，再根据 order_date 进行排列，订单号 bbbb 的订单时间是 "2021-01-01 12:00:00" 大于订单号 aaaa 的时间 "2021-01-01 00:00:00"</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>要对列进行排序，则需要使用 <code>ORDER BY</code> 关键字，此外就是正序和倒序输出。</p>
<ul>
<li><code>ASC</code>：正序输出，也是默认输出的情况。</li>
<li><code>DESC</code>：倒序输出。</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL6 按照数量和价格排序</h2>
<h3> 描述</h3>
<p>假设有一个 OrderItems 表</p>
<table>
<thead>
<tr>
<th>quantity</th>
<th>item_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>100</td>
</tr>
<tr>
<td>10</td>
<td>1003</td>
</tr>
<tr>
<td>2</td>
<td>500</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，显示 OrderItems 表中的数量（quantity）和价格（item_price），并按数量由多到少、价格由高到低排序。</p>
<h3> 示例答案</h3>
<p>返回 quantity 和 item_price</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>同样是查询语句，要对查询结果进行排序，则需要使用  <code>ORDER BY</code> 关键字，最后则是需要注意是正序还是倒序，题目中由多到少和由高到低都是属于倒序，所以需要使用关键字 <code>DESC</code>。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL7 检查SQL语句</h2>
<h3> 描述</h3>
<p>有 Vendors 表</p>
<table>
<thead>
<tr>
<th>vend_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>海底捞</td>
</tr>
<tr>
<td>小龙坎</td>
</tr>
<tr>
<td>大龙燚</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>下面的 SQL 语句有问题吗？尝试将它改正确，使之能够正确运行，并且返回结果根据 vend_name 逆序排列</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 示例展示</h3>
<p>返回 vend_name</p>
<table>
<thead>
<tr>
<th>vend_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>海底捞</td>
</tr>
<tr>
<td>小龙坎</td>
</tr>
<tr>
<td>大龙燚</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>主要存在两处错误，首先是选取需要展示的列 <code>vend_name</code> 后，后面并没有跟上需要展示的其他列，所以此处多了一个 <code>,</code>。另外，对选取列进行排序使用的关键字是 <code>ORDER BY</code>，而题目中只是给出了 <code>ORDER</code>，忘记了 <code>BY</code>，所以会导致查询结果错误。针对这两处错误改正后，得到的正确的语句如下所示。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL8 返回固定价格的产品</h2>
<h3> 描述</h3>
<p>有表 Products</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_name</th>
<th>prod_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0018</td>
<td>sockets</td>
<td>9.49</td>
</tr>
<tr>
<td>a0019</td>
<td>iphone13</td>
<td>600</td>
</tr>
<tr>
<td>b0018</td>
<td>gucci t-shirts</td>
<td>1000</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>从 Products 表中检索产品 ID（prod_id）和产品名称（prod_name），只返回价格为 9.49 美元的产品。</p>
<h3> 示例结果</h3>
<p>返回 prod_id 和 prod_name</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0018</td>
<td>sockets</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>查询符合指定条件的数据，可以使用关键字 <code>WHERE</code> 对条件进行限制，然后就是对条件的实现，这里可以使用两种方式。</p>
<p>第一种，直接利用 <code>=</code>，既然条件是需要价格为 <code>9.49</code> 美元的产品，则我们将价格列设置为 <code>prod_price = 9.49</code> 即可。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第二种，除开 <code>=</code> 之外，我们也可以使用 <code>in</code>，表示价格只要在指定的数据之中，我们将价格列设置为 <code>in (9.49)</code> 即可，但是此时要注意不要忽略 <code>()</code>，否则语句会报错。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL9 返回更高价格的产品</h2>
<h3> 描述</h3>
<p>Products 表</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_name</th>
<th>prod_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0018</td>
<td>sockets</td>
<td>9.49</td>
</tr>
<tr>
<td>a0019</td>
<td>iphone13</td>
<td>600</td>
</tr>
<tr>
<td>b0019</td>
<td>gucci t-shirts</td>
<td>1000</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，从 Products 表中检索产品 ID（prod_id）和产品名称（prod_name），只返回价格为 9 美元或更高的产品。</p>
<h3> 示例答案</h3>
<p>返回 prod_id 商品 id 和 prod_name 商品名称</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0018</td>
<td>sockets</td>
</tr>
<tr>
<td>a0019</td>
<td>iphone13</td>
</tr>
<tr>
<td>b0019</td>
<td>gucci t-shirts</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>条件查询语句，查询格式：</p>
<blockquote>
<p>SELECT [列名] FROM [表名] WHERE 判断条件 …</p>
</blockquote>
<p>既然判断条件是要产品价格不低于 9 美元，则产品需要大于等于 9 美元，可以将产品价格设置为 <code>prod_price &gt;= 9</code> 即可。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外，我们还可以将 <code>&gt;=</code> 拆分为两个条件，一个是 <code>prod_price &gt; 9</code>，而另一个则是 <code>prod_price = 9</code>，然后满足任一条件即可，则利用关键字 <code>OR</code> 将两个条件进行连接。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL10 返回产品并且按照价格排序</h2>
<h3> 描述</h3>
<p>有 Products 表</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_name</th>
<th>prod_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0011</td>
<td>egg</td>
<td>3</td>
</tr>
<tr>
<td>a0019</td>
<td>sockets</td>
<td>4</td>
</tr>
<tr>
<td>b0019</td>
<td>coffee</td>
<td>15</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，返回 Products 表中所有价格在 3 美元到 6 美元之间的产品的名称（prod_name）和价格（prod_price），然后按价格对结果进行排序</p>
<h3> 示例结果</h3>
<p>返回商品名称 prod_name 和商品价格 prod_price</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>egg</td>
<td>3</td>
</tr>
<tr>
<td>sockets</td>
<td>4</td>
</tr>
</tbody>
</table>
<p>注：不需要考虑商品价格相同的情况</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>条件查询，通过将条件拆分为 <code>prod_price &gt;= 3</code> 和 <code>prod_price &lt;= 6</code> 两个条件，然后利用关键字  <code>AND</code> 将两个条件串联起来，同时满足两个条件的数据则进行输出。然后要对价格进行排序，则可以使用关键字 <code>ORDER BY</code>。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除开上述将两个条件拆分开然后利用关键字 <code>AND</code> 串联起来之外，其实 SQL 还提供了关键字 <code>BETWEEN … AND …</code>，可以将满足介于两者之间的数进行筛选输出。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL11 返回更多的产品</h2>
<h3> 描述</h3>
<p>OrderItems 表含有：订单号 order_num，quantity 产品数量</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>105</td>
</tr>
<tr>
<td>a2</td>
<td>1100</td>
</tr>
<tr>
<td>a2</td>
<td>200</td>
</tr>
<tr>
<td>a4</td>
<td>1121</td>
</tr>
<tr>
<td>a5</td>
<td>10</td>
</tr>
<tr>
<td>a2</td>
<td>19</td>
</tr>
<tr>
<td>a7</td>
<td>5</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>从 OrderItems 表中检索出所有不同且不重复的订单号（order_num），其中每个订单都要包含 100 个或更多的产品。</p>
<h3> 示例结果</h3>
<p>返回订单号列 order_num</p>
<table>
<thead>
<tr>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
</tr>
<tr>
<td>a2</td>
</tr>
<tr>
<td>a4</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>要筛选指定列中不重复的数据，则需要使用关键字 <code>DISTINCT</code>。此外，要筛选出满足指定条件的数据，则需要关键字 <code>WHERE</code>，然后根据题意，可以将条件写到一起，也可以将条件进行拆分后用关键字 <code>OR</code> 并联。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL12 检索供应商名称</h2>
<h3> 描述</h3>
<p>Vendors 表有字段供应商名称（vend_name）、供应商国家（vend_country）、供应商州（vend_state）</p>
<table>
<thead>
<tr>
<th>vend_name</th>
<th>vend_country</th>
<th>vend_state</th>
</tr>
</thead>
<tbody>
<tr>
<td>apple</td>
<td>USA</td>
<td>CA</td>
</tr>
<tr>
<td>vivo</td>
<td>CNA</td>
<td>shenzhen</td>
</tr>
<tr>
<td>huawei</td>
<td>CNA</td>
<td>xian</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，从 Vendors 表中检索供应商名称（vend_name），仅返回加利福尼亚州的供应商（这需要按国家[USA]和州[CA]进行过滤，没准其他国家也存在一个 CA）</p>
<h3> 示例答案</h3>
<p>返回供应商名称 vend_name</p>
<table>
<thead>
<tr>
<th>vend_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>apple</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>既然要筛选出加利福利亚州的提供商，则首要条件是满足 <code>vend_state = 'CA'</code>。另外，除开美国有加利福利亚州之外，有可能其他国家也有加利福利亚州，所以需要对国家也进行限定，设置条件为 <code>vend_country = 'USA'</code>。然后用关键字  <code>AND</code> 将条件串联，满足这两个条件的数据则进行输出。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL13 检索并列出已订购产品的清单</h2>
<h3> 描述</h3>
<p>OrderItems 表包含了所有已订购的产品（有些已被订购多次）。</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>order_num</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>BR01</td>
<td>a1</td>
<td>105</td>
</tr>
<tr>
<td>BR02</td>
<td>a2</td>
<td>1100</td>
</tr>
<tr>
<td>BR02</td>
<td>a2</td>
<td>200</td>
</tr>
<tr>
<td>BR03</td>
<td>a4</td>
<td>1121</td>
</tr>
<tr>
<td>BR017</td>
<td>a5</td>
<td>10</td>
</tr>
<tr>
<td>BR02</td>
<td>a2</td>
<td>19</td>
</tr>
<tr>
<td>BR017</td>
<td>a7</td>
<td>5</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，查找所有订购了数量至少 100 个的 BR01、BR02 或 BR03 的订单。你需要返回 OrderItems 表的订单号（order_num）、产品 ID（prod_id）和数量（quantity），并按产品 ID 和数量进行过滤。</p>
<h3> 示例答案</h3>
<p>返回商品 id prod_id、订单 order_num、数量 quantity。</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>prod_id</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>BR01</td>
<td>105</td>
</tr>
<tr>
<td>a2</td>
<td>BR02</td>
<td>1100</td>
</tr>
<tr>
<td>a2</td>
<td>BR02</td>
<td>200</td>
</tr>
<tr>
<td>a4</td>
<td>BR03</td>
<td>1121</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>返回的结果中，数量满足大于等于 100，且满足 prod_id 是 "BR01"，“BR02”，“BR03" 中的任意一个。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>多条件查询，将两个条件进行拆分，然后将两个查询条件进行串联即可。</p>
<p>数量满足大于等于 100，则设置为 <code>quantyty &gt;= 100</code>。</p>
<p>产品 id 满足 "BR01"，“BR02”，“BR03” 中的任意一个，则使用关键字 <code>in</code>。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL14 返回所有价格在 3 美元到 6 美元之间的产品的名称和价格</h2>
<h3> 描述</h3>
<p>有表 Products</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_name</th>
<th>prod_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0011</td>
<td>egg</td>
<td>3</td>
</tr>
<tr>
<td>a0019</td>
<td>sockets</td>
<td>4</td>
</tr>
<tr>
<td>b0019</td>
<td>coffee</td>
<td>15</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，返回所有价格在 3 美元到 6 美元之间的产品的名称（prod_name）和价格（prod_price），使用 AND 操作符，然后按价格对结果进行升序排序</p>
<h3> 示例结果</h3>
<p>返回商品名称 prod_name 和商品价格 prod_price</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>egg</td>
<td>3</td>
</tr>
<tr>
<td>sockets</td>
<td>4</td>
</tr>
</tbody>
</table>
<p>注：不需要考虑价格相同时的排序问题</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>两个条件，首先是价格介于 3 到 6 美元，则可以使用关键字 <code>BETWEEN … AND …</code>。另外，按价格升序排序，则使用关键字 <code>ORDER BY</code>。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>题目中指定需要使用关键字 <code>AND</code>，则需要将价格条件替换成 <code>prod_price &gt;= 3</code> 和 <code>prod_price &lt;= 6</code> 两个条件，然后将其串联。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL15 纠错2</h2>
<h2> 描述</h2>
<p>供应商表 Vendors 有字段供应商名称 vend_name、供应商国家 vend_country、供应商省份 vend_state</p>
<table>
<thead>
<tr>
<th>vend_name</th>
<th>vend_country</th>
<th>vend_state</th>
</tr>
</thead>
<tbody>
<tr>
<td>apple</td>
<td>USA</td>
<td>CA</td>
</tr>
<tr>
<td>vivo</td>
<td>CNA</td>
<td>shenzhen</td>
</tr>
<tr>
<td>huawei</td>
<td>CNA</td>
<td>xian</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>修改正确下面 sql，使之正确返回</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 示例结果</h3>
<p>结果返回 vend_name</p>
<table>
<thead>
<tr>
<th>vend_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>apple</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>主要是一处错误，搞错了关键字 <code>WHERE</code> 和 <code>ORDER BY</code> 的先后顺序，正确的 SQL 语句格式为：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL16 检索产品名称和描述（一）</h2>
<h3> 描述</h3>
<p>Products表</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0011</td>
<td>usb</td>
</tr>
<tr>
<td>a0019</td>
<td>iphone13</td>
</tr>
<tr>
<td>b0019</td>
<td>gucci t-shirts</td>
</tr>
<tr>
<td>c0019</td>
<td>gucci toy</td>
</tr>
<tr>
<td>d0019</td>
<td>lego toy</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回描述中包含 toy 一词的产品名称</p>
<h3> 示例结果</h3>
<p>返回产品名称和产品描述</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>c0019</td>
<td>gucci toy</td>
</tr>
<tr>
<td>d0019</td>
<td>lego toy</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>模糊查询，主要产品描述中含有 <code>toy</code> 一词，就需要返回这时候需要用到模糊查询关键字 <code>LIKE</code> 然后是通配符，题目中并没有明确说明 <code>toy</code> 前后包含多少个字符，所以用 <code>%</code>。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL17 检索产品名称和描述（二）</h2>
<h3> 描述</h3>
<p>Products 表</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0011</td>
<td>usb</td>
</tr>
<tr>
<td>a0019</td>
<td>iphone13</td>
</tr>
<tr>
<td>b0019</td>
<td>gucci t-shirts</td>
</tr>
<tr>
<td>c0019</td>
<td>gucci toy</td>
</tr>
<tr>
<td>d0019</td>
<td>lego toy</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回描述中未出现 toy 一词的产品，最后按”产品名称“对结果进行排序。</p>
<h3> 示例结果</h3>
<p>返回产品名称和产品描述</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0011</td>
<td>usb</td>
</tr>
<tr>
<td>a0019</td>
<td>iphone13</td>
</tr>
<tr>
<td>b0019</td>
<td>gucci t-shirts</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>这题就是 16 题的反面，那我们只要对 16 的查询语句进行取反即可，此时添加一个关键字 <code>NOT</code> 即可。此外，还需要按“产品名称”对结果排序，使用关键字 <code>ORDER BY</code> 即可。但是需要注意 <code>WHERE</code> 和 <code>ORDER BY</code> 关键字的先后顺序。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL18 检索产品名称和描述（三）</h2>
<h3> 描述</h3>
<p>Products 表</p>
<h3> 问题</h3>
<p>编写 SQL 语句，从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回描述中同时出现 toy 和 carrots 的产品。有好几种方法可以执行此操作，但对于这个挑战题，请使用 AND 和两个 LIKE 比较。</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0011</td>
<td>usb</td>
</tr>
<tr>
<td>a0019</td>
<td>iphone13</td>
</tr>
<tr>
<td>b0019</td>
<td>gucci t-shirts</td>
</tr>
<tr>
<td>c0019</td>
<td>gucci toy</td>
</tr>
<tr>
<td>d0019</td>
<td>lego carrots toy</td>
</tr>
</tbody>
</table>
<h3> 示例结果</h3>
<p>返回产品名称和产品描述</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>d0019</td>
<td>lego carrots toy</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>题目中明确要求使用 <code>LIKE</code> 和 <code>AND</code> 关键字，那么可以将条件拆分为两个模糊查询，一个是描述中含有 <code>toy</code> 的产品，一个是描述中含有 <code>carrots</code> 的产品，然后利用关键字 <code>AND</code> 将两个条件串联就可以了。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL19 检索产品名称和描述（四）</h2>
<h3> 描述</h3>
<p>Products 表</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0011</td>
<td>usb</td>
</tr>
<tr>
<td>a0019</td>
<td>iphone13</td>
</tr>
<tr>
<td>b0019</td>
<td>gucci t-shirts</td>
</tr>
<tr>
<td>c0019</td>
<td>gucci toy</td>
</tr>
<tr>
<td>d0019</td>
<td>lego toy carrots</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，从 Products 表中检索产品名称（prod_name）和描述（prod_desc），仅返回在描述中以先后顺序同时出现 toy 和 carrots 的产品。提示：只需要用带有三个 % 符号的 LIKE 即可。</p>
<h3> 示例结果</h3>
<p>返回产品名称和产品描述</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>prod_desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>d0019</td>
<td>lego toy carrots</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>题目中已经进行了提示，要查询产品描述中以先后顺序同时出现 <code>toy</code> 和 <code>carrots</code> 的产品，但没有说他们两者之间存在的字符以及 <code>toy</code> 前面和 <code>carrots</code> 后边所包含的字符，那么需要使用通配符 <code>%</code> ，得到最终的结果  <code>%toy%carrots%</code>。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL20 别名</h2>
<h3> 描述</h3>
<p>别名的常见用法是在检索出的结果中重命名表的列字段（为了符合特定的报表要求或客户需求）。有表 Vendors 代表供应商信息，vend_id 供应商 id、vend_name 供应商名称、vend_address 供应商地址、vend_city 供应商城市。</p>
<table>
<thead>
<tr>
<th>vend_id</th>
<th>vend_name</th>
<th>vend_address</th>
<th>vend_city</th>
</tr>
</thead>
<tbody>
<tr>
<td>a001</td>
<td>tencent cloud</td>
<td>address1</td>
<td>shenzhen</td>
</tr>
<tr>
<td>a002</td>
<td>huawei cloud</td>
<td>address2</td>
<td>dongguan</td>
</tr>
<tr>
<td>a003</td>
<td>aliyun cloud</td>
<td>address3</td>
<td>hangzhou</td>
</tr>
<tr>
<td>a003</td>
<td>netease cloud</td>
<td>address4</td>
<td>guangzhou</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，从 Vendors 表中检索 vend_id、vend_name、vend_address 和 vend_city，将 vend_name 重命名为 vname，将 vend_city 重命名为 vcity，将 vend_address 重命名为 vaddress，按供应商名称对结果进行升序排序。</p>
<h3> 示例结果</h3>
<p>返回 vend_id 供应商 id、vname 供应商名称、vaddress 供应商地址、vcity 供应商城市。</p>
<table>
<thead>
<tr>
<th>vend_id</th>
<th>vname</th>
<th>vaddress</th>
<th>vcity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a003</td>
<td>aliyun cloud</td>
<td>address3</td>
<td>hangzhou</td>
</tr>
<tr>
<td>a002</td>
<td>huawei cloud</td>
<td>address2</td>
<td>dongguan</td>
</tr>
<tr>
<td>a003</td>
<td>netease cloud</td>
<td>address4</td>
<td>guangzhou</td>
</tr>
<tr>
<td>a001</td>
<td>tencent cloud</td>
<td>address1</td>
<td>shenzhen</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>SQL 中，要对列取别名，需要用到关键字 <code>AS</code>，使用格式如下：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过对题目中的三个字段取别名，然后使用 <code>ORDER BY</code> 关键字，按照供应商名称列对结果进行升序排序。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外，<code>AS</code> 其实可要可不要，你也可以写成以下的方式，在列名之后跟上别名即可，实现的效果和上面语句一致。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL21 打折</h2>
<h3> 描述</h3>
<p>我们的示例商店正在进行打折促销，所有产品均降价 10%。Products 表包含 prod_id产品 id、prod_price 产品价格</p>
<h3> 问题</h3>
<p>编写 SQL语句，从 Products 表中返回 prod_id、prod_price 和 sale_price。sale_price 是一个包含促销价格的计算字段。提示：可以乘以 0.9，得到原价的 90%（即 10%的折扣）</p>
<h3> 示例结果</h3>
<p>返回产品 id prod_id、产品价格 prod_price、销售价格 sale_price</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_price</th>
<th>sale_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0011</td>
<td>9.49</td>
<td>8.541</td>
</tr>
<tr>
<td>a0019</td>
<td>600</td>
<td>540</td>
</tr>
<tr>
<td>b0019</td>
<td>1000</td>
<td>900</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>sale_price 的价格是 prod_price 的 90%</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>此题考察了取别名以及如何在 SQL 中直接使用算数运算，<code>sale_price</code> 不是表中的数据，而是通过 <code>prod_price</code> 而来，所以需要通过关键字 <code>AS</code> 来进行取别名，最终的实现语句如下。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL22 顾客登录名</h2>
<h3> 描述</h3>
<p>我们的商店已经上线了，正在创建顾客账户。所有用户都需要登录名，默认登录名是其名称和所在城市的组合。</p>
<p>给出 Customers 表 如下：</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
<th>cust_contact</th>
<th>cust_city</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>Andy Li</td>
<td>Andy Li</td>
<td>Oak Park</td>
</tr>
<tr>
<td>a2</td>
<td>Ben Liu</td>
<td>Ben Liu</td>
<td>Oak Park</td>
</tr>
<tr>
<td>a3</td>
<td>Tony Dai</td>
<td>Tony Dai</td>
<td>Oak Park</td>
</tr>
<tr>
<td>a4</td>
<td>Tom Chen</td>
<td>Tom Chen</td>
<td>Oak Park</td>
</tr>
<tr>
<td>a5</td>
<td>An Li</td>
<td>An Li</td>
<td>Oak Park</td>
</tr>
<tr>
<td>a6</td>
<td>Lee Chen</td>
<td>Lee Chen</td>
<td>Oak Park</td>
</tr>
<tr>
<td>a7</td>
<td>Hex Liu</td>
<td>Hex Liu</td>
<td>Oak Park</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，返回顾客 ID（cust_id）、顾客名称（cust_name）和登录名（user_login），其中登录名全部为大写字母，并由顾客联系人的前两个字符（cust_contact）和其所在城市的前三个字符（cust_city）组成。提示：需要使用函数、拼接和别名。</p>
<h3> 示例结果</h3>
<p>返回顾客 id cust_id，顾客名称 cust_name，顾客登录名 user_login</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
<th>user_login</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>Andy Li</td>
<td>ANOAK</td>
</tr>
<tr>
<td>a2</td>
<td>Ben Liu</td>
<td>BEOAK</td>
</tr>
<tr>
<td>a3</td>
<td>Tony Dai</td>
<td>TOOAK</td>
</tr>
<tr>
<td>a4</td>
<td>Tom Chen</td>
<td>TOOAK</td>
</tr>
<tr>
<td>a5</td>
<td>An Li</td>
<td>ANOAK</td>
</tr>
<tr>
<td>a6</td>
<td>Lee Chen</td>
<td>LEOAK</td>
</tr>
<tr>
<td>a7</td>
<td>Hex Liu</td>
<td>HEOAK</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>例如，登录名是 ANOAK（Andy Li，居住在 Oak Park）</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>根据题意以及示例结果，可以看到登录名全是大写，所以需要用到函数 <code>upper()</code>，然后需要将顾客联系人前两个字符和所在城市的前三个字符相拼接，则需要用到函数 <code>concat()</code>，再接着就是需要从 <code>cust_name</code> 和 <code>cust_city</code> 中截取字符串，则需要用到 <code>substring()</code>，最后则是通过将字符串拼接转换之后取别名为 <code>user_login</code>，需要用到关键字 <code>AS</code>。以上提到的三个函数用法如下：</p>
<ul>
<li><code>upper(字符串)</code>：将字符串中所有字符转换为大写。</li>
<li><code>substring(字符串, 起始位置, 截取的字符数)</code>，需要注意的是起始位置是从 1 开始的。</li>
<li><code>concat(字符串 1, 字符串 2, 字符串 3, …)</code></li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL23 返回 2020 年 1 月的所有订单的订单号和订单日期</h2>
<h3> 描述</h3>
<p>Orders 订单表</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>order_date</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>2020-01-01 00:00:00</td>
</tr>
<tr>
<td>a0002</td>
<td>2020-01-02 00:00:00</td>
</tr>
<tr>
<td>a0003</td>
<td>2020-01-01 12:00:00</td>
</tr>
<tr>
<td>a0004</td>
<td>2020-02-01 00:00:00</td>
</tr>
<tr>
<td>a0005</td>
<td>2020-03-01 00:00:00</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，返回 2020 年 1 月的所有订单的订单号（order_num）和订单日期（order_date），并按订单日期升序排序</p>
<p>【示例结果】</p>
<p>返回订单号 order_num，和 order_date 订单时间</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>order_date</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>2020-01-01 00:00:00</td>
</tr>
<tr>
<td>a0003</td>
<td>2020-01-01 12:00:00</td>
</tr>
<tr>
<td>a0002</td>
<td>2020-01-02 00:00:00</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>a0001、a0002、a0003 时间属于 2020 年 1 月</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>其实我们依然可以将本题看做模糊查询，只要订单日期满足对应条件即可，可以使用关键字 <code>WHERE … LIKE …</code> 来实现。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外，SQL 中也提供了对于日期的操作函数 <code>date_format()</code>，用于返回日期的一部分。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另外，我们还可以单独提取出日期中的年份和月份，然后将两个条件串联，筛选出同时满足两个条件的数据。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL24 确定已售出产品的总数</h2>
<h3> 描述</h3>
<p>OrderItems 表代表售出的产品，quantity 代表售出商品数量。</p>
<table>
<thead>
<tr>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>10</td>
</tr>
<tr>
<td>100</td>
</tr>
<tr>
<td>1000</td>
</tr>
<tr>
<td>10001</td>
</tr>
<tr>
<td>2</td>
</tr>
<tr>
<td>15</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，确定已售出产品的总数。</p>
<h3> 示例结果</h3>
<p>返回 items_ordered 列名，表示已售出商品的总数。</p>
<table>
<thead>
<tr>
<th>items_ordered</th>
</tr>
</thead>
<tbody>
<tr>
<td>11128</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>考察求和函数以及取别名两个知识点，取别名需要关键字 <code>AS</code>，而且可要可不要。</p>
<p>而求和函数则是 <code>SUM(列名)</code> ，它会统计列中所有记录的综合。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL25 确定已售出产品项 BR01 的总数</h2>
<h3> 描述</h3>
<p>OrderItems 表代表售出的产品，quantity 代表售出商品数量，产品项为 prod_id。</p>
<table>
<thead>
<tr>
<th>quantity</th>
<th>prod_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>10</td>
<td>AR01</td>
</tr>
<tr>
<td>100</td>
<td>AR10</td>
</tr>
<tr>
<td>1000</td>
<td>BR01</td>
</tr>
<tr>
<td>10001</td>
<td>BR010</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>修改创建的语句，确定已售出产品项（prod_id）为 "BR01" 的总数。</p>
<h3> 示例结果</h3>
<p>返回商品项已订购订单数</p>
<table>
<thead>
<tr>
<th>items_ordered</th>
</tr>
</thead>
<tbody>
<tr>
<td>1000</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>已订购商品 BR01 的数量 quantity 为 1000。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>主要考察的知识点：</p>
<ul>
<li>求和函数：<code>SUM()</code></li>
<li>取别名：<code>AS</code></li>
<li>条件查询：<code>WHERE</code></li>
</ul>
<p>需要注意的是 SQL 语句中关键字的先后顺序，否则可能会导致语句出错。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL26 确定 Products 表中价格不超过 10 美元的最贵产品的价格</h2>
<h3> 描述</h3>
<p>Products 表</p>
<table>
<thead>
<tr>
<th>prod_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>9.49</td>
</tr>
<tr>
<td>600</td>
</tr>
<tr>
<td>1000</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，确定 Products 表中价格不超过 10 美元的最贵产品的价格（prod_price）。将计算所得的字段命名为 max_price。</p>
<h3> 示例结果</h3>
<p>返回 max_price</p>
<table>
<thead>
<tr>
<th>max_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>9.49</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>返回十元以下最高价格 max_price。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>考察知识点：</p>
<ul>
<li><strong>条件查询</strong>：使用关键字 <code>WHERE</code>，将产品价格不超过 10 美元的产品筛选出来。</li>
<li><strong>MAX(列名)</strong>：找出列中的最大值。</li>
<li><strong>取别名</strong>：通过关键字 <code>AS</code> 将不超过 10 美元的产品中价格最高的记录筛选出来后重命名。</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL27 返回每个订单号各有多少行数</h2>
<h3> 描述</h3>
<p>OrderItems 表包含每个订单的每个产品</p>
<table>
<thead>
<tr>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>a002</td>
</tr>
<tr>
<td>a002</td>
</tr>
<tr>
<td>a002</td>
</tr>
<tr>
<td>a004</td>
</tr>
<tr>
<td>a007</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，返回每个订单号（order_num）各有多少行数（order_lines），并按 order_lines 对结果进行升序排序。</p>
<h3> 示例结果</h3>
<p>返回订单号 order_num 和对应订单号的行数 order_lines</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>order_lines</th>
</tr>
</thead>
<tbody>
<tr>
<td>a004</td>
<td>1</td>
</tr>
<tr>
<td>a007</td>
<td>1</td>
</tr>
<tr>
<td>a002</td>
<td>3</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>订单号 a002 有 3 行订单记录也是最多的订单号故排在最后一位返回，相同订单行数的订单无需过多处理。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>考察知识点：</p>
<ul>
<li><code>COUNT(列名)</code>：返回指定列的值的数目。</li>
<li><code>AS</code>：取别名。</li>
<li><code>GROUP BY</code>：根据指定列或者表达式的值将行进行分组。</li>
<li><code>ORDER BY</code>：根据尾随的列名进行排序，<code>ASC</code> 表示正序，也是默认排序，<code>DESC</code> 表示倒序。</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL28 每个供应商成本最低的产品</h2>
<h3> 描述</h3>
<p>有Products表，含有字段prod_price代表产品价格，vend_id代表供应商id</p>
<table>
<thead>
<tr>
<th>vend_id</th>
<th>prod_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0011</td>
<td>100</td>
</tr>
<tr>
<td>a0019</td>
<td>0.1</td>
</tr>
<tr>
<td>b0019</td>
<td>1000</td>
</tr>
<tr>
<td>b0019</td>
<td>6980</td>
</tr>
<tr>
<td>b0019</td>
<td>20</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，返回名为 cheapest_item 的字段，该字段包含每个供应商成本最低的产品（使用 Products 表中的 prod_price），然后从最低成本到最高成本对结果进行升序排序。</p>
<h3> 示例结果</h3>
<p>返回供应商 id vend_id 和对应供应商成本最低的产品 cheapest_item。</p>
<table>
<thead>
<tr>
<th>vend_id</th>
<th>cheapest_item</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0019</td>
<td>0.1</td>
</tr>
<tr>
<td>b0019</td>
<td>20</td>
</tr>
<tr>
<td>a0011</td>
<td>100</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>例如 b0019 成本最低的价格是 20，且最后根据成本价格排序返回依次是 a0019、b0019、a0011。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>要找出各个供应商中成本最低的产品，则需要通过关键字 <code>GROUP BY</code> 来进行分组，然后借助函数 <code>MIN()</code> 找出 <code>prod_price</code> 中最小的值，接着取别名为 <code>cheapest_item</code>，最后则是按照找出的各供应商中的成本最低产品 <code>cheapest_item</code> 利用关键字 <code>ORDER BY</code> 进行升序排序。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL29 返回订单数量总和不小于100的所有订单的订单号</h2>
<h3> 描述</h3>
<p>OrderItems 代表订单商品表，包括：订单号order_num 和订单数量 quantity。</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>105</td>
</tr>
<tr>
<td>a2</td>
<td>1100</td>
</tr>
<tr>
<td>a2</td>
<td>200</td>
</tr>
<tr>
<td>a4</td>
<td>1121</td>
</tr>
<tr>
<td>a5</td>
<td>10</td>
</tr>
<tr>
<td>a2</td>
<td>19</td>
</tr>
<tr>
<td>a7</td>
<td>5</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>请编写 SQL 语句，返回订单数量总和不小于 100 的所有订单号，最后结果按照订单号升序排序。</p>
<h3> 示例结果</h3>
<p>返回 order_num 订单号。</p>
<table>
<thead>
<tr>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
</tr>
<tr>
<td>a2</td>
</tr>
<tr>
<td>a4</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>订单号 a1、a2、a4 的 quantity 总和都大于等于 100，按顺序为 a1、a2、a4。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>条件查询，只是此时不再是过滤指定的行，而是需要过滤分组，所以这个时候不能再使用关键字 <code>WHERE</code>，而是需要使用到关键字 <code>HAVING</code>，它通常是和关键字 <code>GROUP BY</code> 连用。另外需要注意的是各个关键字之间的先后顺序，先是 <code>GROUP BY</code>，紧接着是 <code>HAVING</code>，最后才是 <code>ORDER BY</code>。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL30 计算总和</h2>
<h3> 描述</h3>
<p>OrderItems表代表订单信息，包括字段：订单号 order_num 和 item_price 商品售出价格、quantity 商品数量。</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>item_price</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>10</td>
<td>105</td>
</tr>
<tr>
<td>a2</td>
<td>1</td>
<td>1100</td>
</tr>
<tr>
<td>a2</td>
<td>1</td>
<td>200</td>
</tr>
<tr>
<td>a4</td>
<td>2</td>
<td>1121</td>
</tr>
<tr>
<td>a5</td>
<td>5</td>
<td>10</td>
</tr>
<tr>
<td>a2</td>
<td>1</td>
<td>19</td>
</tr>
<tr>
<td>a7</td>
<td>7</td>
<td>5</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，根据订单号聚合，返回订单总价不小于 1000 的所有订单号，最后的结果按订单号进行升序排序。</p>
<p>提示：总价 = item_price 乘以 quantity</p>
<h3> 示例结果</h3>
<table>
<thead>
<tr>
<th>order_num</th>
<th>total_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>1050</td>
</tr>
<tr>
<td>a2</td>
<td>1319</td>
</tr>
<tr>
<td>a4</td>
<td>2242</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>以上几题都已经将知识点讲过了，这题只是综合运用，主要涉及如下：</p>
<ul>
<li><code>SUM()</code>：对同一产品的总价求和。</li>
<li><code>AS</code>：取别名。</li>
<li><code>GROUP BY</code>：按照列进行分组。</li>
<li><code>HAVING</code>：与 <code>GROUP BY</code> 联合使用从而实现条件过滤。</li>
<li><code>ORDER BY</code>：按列进行排序。</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL31 纠错3</h2>
<h3> 描述</h3>
<p>OrderItems 表含有 order_num 订单号</p>
<table>
<thead>
<tr>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>a002</td>
</tr>
<tr>
<td>a002</td>
</tr>
<tr>
<td>a002</td>
</tr>
<tr>
<td>a004</td>
</tr>
<tr>
<td>a007</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>将下面代码修改正确后执行</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 示例结果</h3>
<p>返回订单号 order_num 和出现的次数 items</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>items</th>
</tr>
</thead>
<tbody>
<tr>
<td>a002</td>
<td>3</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>由于订单号 a002 出现了三次，所以返回3</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>最主要的错误在于 <code>GROUP BY</code> 后边跟着的是统计结果，其次在于 <code>HAVING</code> 后边的 <code>COUNT()</code> 其实是可以不用再次计算的，可以直接利用已经统计出的结果。第二处不算错误，但是改了之后能提高 SQL 语句所执行的效率。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL32 返回购买价格为 10 美元或以上产品的顾客列表</h2>
<h3> 描述</h3>
<p>OrderItems 表示订单商品表，含有字段订单号：order_num、订单价格：item_price；Orders 表代表订单信息表，含有顾客 id：cust_id 和订单号：order_num</p>
<p>OrderItems 表</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>item_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>10</td>
</tr>
<tr>
<td>a2</td>
<td>1</td>
</tr>
<tr>
<td>a2</td>
<td>1</td>
</tr>
<tr>
<td>a4</td>
<td>2</td>
</tr>
<tr>
<td>a5</td>
<td>5</td>
</tr>
<tr>
<td>a2</td>
<td>1</td>
</tr>
<tr>
<td>a7</td>
<td>7</td>
</tr>
</tbody>
</table>
<p>Orders表</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>cust10</td>
</tr>
<tr>
<td>a2</td>
<td>cust1</td>
</tr>
<tr>
<td>a2</td>
<td>cust1</td>
</tr>
<tr>
<td>a4</td>
<td>cust2</td>
</tr>
<tr>
<td>a5</td>
<td>cust5</td>
</tr>
<tr>
<td>a2</td>
<td>cust1</td>
</tr>
<tr>
<td>a7</td>
<td>cust7</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>使用子查询，返回购买价格为 10 美元或以上产品的顾客列表，结果无需排序。<br>
注意：你需要使用 OrderItems 表查找匹配的订单号（order_num），然后使用Order 表检索这些匹配订单的顾客 ID（cust_id）。</p>
<h3> 示例结果</h3>
<p>返回顾客 id cust_id</p>
<table>
<thead>
<tr>
<th>cust_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>cust10 顾客下单的订单为 a1，a1 的售出价格大于等于 10</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>题目已经提示使用子查询，则先用最简单的条件查询从 <code>OrderItems</code> 表中找出订单价格不低于 10 美元的订单，接着从筛选出的结果中再次筛选出对应订单的顾客 id，需要注意的一点是对顾客 id 去重，需要使用到关键字 <code>DISTINCT</code>。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL33 确定哪些订单购买了 prod_id 为 BR01 的产品（一）</h2>
<h3> 描述</h3>
<p>表 OrderItems 代表订单商品信息表，prod_id 为产品 id；Orders 表代表订单表有 cust_id 代表顾客 id 和订单日期 order_date</p>
<p>OrderItems 表</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>BR01</td>
<td>a0001</td>
</tr>
<tr>
<td>BR01</td>
<td>a0002</td>
</tr>
<tr>
<td>BR02</td>
<td>a0003</td>
</tr>
<tr>
<td>BR02</td>
<td>a0013</td>
</tr>
</tbody>
</table>
<p>Orders表</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
<th>order_date</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>cust10</td>
<td>2022-01-01 00:00:00</td>
</tr>
<tr>
<td>a0002</td>
<td>cust1</td>
<td>2022-01-01 00:01:00</td>
</tr>
<tr>
<td>a0003</td>
<td>cust1</td>
<td>2022-01-02 00:00:00</td>
</tr>
<tr>
<td>a0013</td>
<td>cust2</td>
<td>2022-01-01 00:20:00</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，使用子查询来确定哪些订单（在 OrderItems 中）购买了 prod_id 为 "BR01" 的产品，然后从 Orders 表中返回每个产品对应的顾客 ID（cust_id）和订单日期（order_date），按订购日期对结果进行升序排序。</p>
<h3> 示例结果</h3>
<p>返回顾客 id cust_id 和定单日期 order_date。</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>order_date</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
<td>2022-01-01 00:00:00</td>
</tr>
<tr>
<td>cust1</td>
<td>2022-01-01 00:01:00</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>产品 id 为 "BR01" 的订单 a0001 和 a002 的下单顾客 cust10 和 cust1 的下单时间分别为 2022-01-01 00:00:00 和 2022-01-01 00:01:00</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>使用子查询，先从 <code>OrderItems</code> 表中查询出 <code>prod_id</code> 为 <code>BR01</code> 的记录 ，然后再从 <code>Orders</code> 表中筛选出 <code>order_num</code> 为子查询结果集中的记录，最后按照 <code>order_date</code> 进行排序即可。主要是通过对条件查询语句的嵌套使用，从而实现多重筛选。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL34 返回购买 prod_id 为 BR01 的产品的所有顾客的电子邮件（一）</h2>
<h3> 描述</h3>
<p>你想知道订购 BR01 产品的日期，有表 OrderItems 代表订单商品信息表，prod_id 为产品 id；Orders 表代表订单表有 cust_id 代表顾客 id 和订单日期order_date；Customers表含有 cust_email 顾客邮件和 cust_id 顾客 id</p>
<p>OrderItems 表</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>BR01</td>
<td>a0001</td>
</tr>
<tr>
<td>BR01</td>
<td>a0002</td>
</tr>
<tr>
<td>BR02</td>
<td>a0003</td>
</tr>
<tr>
<td>BR02</td>
<td>a0013</td>
</tr>
</tbody>
</table>
<p>Orders 表</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
<th>order_date</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>cust10</td>
<td>2022-01-01 00:00:00</td>
</tr>
<tr>
<td>a0002</td>
<td>cust1</td>
<td>2022-01-01 00:01:00</td>
</tr>
<tr>
<td>a0003</td>
<td>cust1</td>
<td>2022-01-02 00:00:00</td>
</tr>
<tr>
<td>a0013</td>
<td>cust2</td>
<td>2022-01-01 00:20:00</td>
</tr>
</tbody>
</table>
<p>Customers 表代表顾客信息，cust_id 为顾客 id，cust_email 为顾客 email</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_email</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
<td><a href="mailto:cust10@cust.com">cust10@cust.com</a></td>
</tr>
<tr>
<td>cust1</td>
<td><a href="mailto:cust1@cust.com">cust1@cust.com</a></td>
</tr>
<tr>
<td>cust2</td>
<td><a href="mailto:cust2@cust.com">cust2@cust.com</a></td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>返回购买 prod_id 为 BR01 的产品的所有顾客的电子邮件（Customers 表中的 cust_email），结果无需排序。</p>
<p>提示：这涉及 SELECT 语句，最内层的从 OrderItems 表返回 order_num，中间的从 Customers 表返回 cust_id。</p>
<h3> 示例结果</h3>
<p>返回顾客 email cust_email</p>
<table>
<thead>
<tr>
<th>cust_email</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="mailto:cust10@cust.com">cust10@cust.com</a></td>
</tr>
<tr>
<td><a href="mailto:cust1@cust.com">cust1@cust.com</a></td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>产品 id 为 BR01 的订单 a0001 和 a002 的下单顾客 cust10 和 cust1 的顾客email cust_email 分别是：cust10@cust.com 、cust1@cust.com</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>多重条件查询的过滤，只要细心一点，就能做出来。拆分为 3 个条件查询后，从内向外依次查询，然后基于上一层查询结果再做条件过滤。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL35 返回每个顾客不同订单的总金额</h2>
<h3> 描述</h3>
<p>我们需要一个顾客 ID 列表，其中包含他们已订购的总金额。</p>
<p>OrderItems 表代表订单信息，OrderItems 表有订单号：order_num 和商品售出价格：item_price、商品数量：quantity。</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>item_price</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>10</td>
<td>105</td>
</tr>
<tr>
<td>a0002</td>
<td>1</td>
<td>1100</td>
</tr>
<tr>
<td>a0002</td>
<td>1</td>
<td>200</td>
</tr>
<tr>
<td>a0013</td>
<td>2</td>
<td>1121</td>
</tr>
<tr>
<td>a0003</td>
<td>5</td>
<td>10</td>
</tr>
<tr>
<td>a0003</td>
<td>1</td>
<td>19</td>
</tr>
<tr>
<td>a0003</td>
<td>7</td>
<td>5</td>
</tr>
</tbody>
</table>
<p>Orders 表订单号：order_num、顾客 id：cust_id</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>cust10</td>
</tr>
<tr>
<td>a0002</td>
<td>cust1</td>
</tr>
<tr>
<td>a0003</td>
<td>cust1</td>
</tr>
<tr>
<td>a0013</td>
<td>cust2</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL语句，返回顾客 ID（Orders 表中的 cust_id），并使用子查询返回total_ordered 以便返回每个顾客的订单总数，将结果按金额从大到小排序。</p>
<p>提示：你之前已经使用 SUM() 计算订单总数。</p>
<h3> 示例结果</h3>
<p>返回顾客 id cust_id 和 total_order 下单总额</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>total_ordered</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust2</td>
<td>2242</td>
</tr>
<tr>
<td>cust1</td>
<td>1300</td>
</tr>
<tr>
<td>cust10</td>
<td>1050</td>
</tr>
<tr>
<td>cust2</td>
<td>104</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>cust2 在 Orders 里面的订单 a0013，a0013 的售出价格是 2 售出数量是 1121，总额是 2242，最后返回 cust2 的支付总额是 2242。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>题目要求利用子查询，则实现如下。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外我们可以使用内连接方式：利用 <code>SUM()</code> 函数进行求和，求出每个顾客的订单总数，然后通过条件查询找出两个表中 <code>order_num</code> 相同记录的并通过 <code>cust_id</code> 分组，最后则是将求和的订单总数倒序排列。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1> </h1>
<h2> SQL36 从 Products 表中检索所有的产品名称以及对应的销售总数</h2>
<h3> 描述</h3>
<p>Products 表中检索所有的产品名称：prod_name、产品 id：prod_id</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>egg</td>
</tr>
<tr>
<td>a0002</td>
<td>sockets</td>
</tr>
<tr>
<td>a0013</td>
<td>coffee</td>
</tr>
<tr>
<td>a0003</td>
<td>cola</td>
</tr>
</tbody>
</table>
<p>OrderItems 代表订单商品表，订单产品：prod_id、售出数量：quantity</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>105</td>
</tr>
<tr>
<td>a0002</td>
<td>1100</td>
</tr>
<tr>
<td>a0002</td>
<td>200</td>
</tr>
<tr>
<td>a0013</td>
<td>1121</td>
</tr>
<tr>
<td>a0003</td>
<td>10</td>
</tr>
<tr>
<td>a0003</td>
<td>19</td>
</tr>
<tr>
<td>a0003</td>
<td>5</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，从 Products 表中检索所有的产品名称（prod_name），以及名为 quant_sold 的计算列，其中包含所售产品的总数（在 OrderItems 表上使用子查询和 SUM(quantity) 检索）。</p>
<h3> 示例结果</h3>
<p>返回产品名称 prod_name 和产品售出数量总和</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>quant_sold</th>
</tr>
</thead>
<tbody>
<tr>
<td>egg</td>
<td>105</td>
</tr>
<tr>
<td>sockets</td>
<td>1300</td>
</tr>
<tr>
<td>coffee</td>
<td>1121</td>
</tr>
<tr>
<td>cola</td>
<td>34</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>prod_name 是 cola 的 prod_id 为 a0003，quantity 总量为 34，返回结果无需排序。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>解法类似于 35 题，同样主要有两种方式，第一种是通过内连接的方式。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第二种则是通过子查询的方式。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL37 返回顾客名称和相关订单号</h2>
<h3> 描述</h3>
<p>Customers 表有字段顾客名称 cust_name、顾客 id cust_id</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
<td>andy</td>
</tr>
<tr>
<td>cust1</td>
<td>ben</td>
</tr>
<tr>
<td>cust2</td>
<td>tony</td>
</tr>
<tr>
<td>cust22</td>
<td>tom</td>
</tr>
<tr>
<td>cust221</td>
<td>an</td>
</tr>
<tr>
<td>cust2217</td>
<td>hex</td>
</tr>
</tbody>
</table>
<p>Orders订单信息表，含有字段order_num订单号、cust_id顾客id</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>cust10</td>
</tr>
<tr>
<td>a2</td>
<td>cust1</td>
</tr>
<tr>
<td>a3</td>
<td>cust2</td>
</tr>
<tr>
<td>a4</td>
<td>cust22</td>
</tr>
<tr>
<td>a5</td>
<td>cust221</td>
</tr>
<tr>
<td>a7</td>
<td>cust2217</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，返回 Customers 表中的顾客名称（cust_name）和Orders 表中的相关订单号（order_num），并按顾客名称再按订单号对结果进行升序排序。你可以尝试用两个不同的写法，一个使用简单的等联结语法，另外一个使用 INNER JOIN。</p>
<h3> 示例结果</h3>
<p>cust_name 代表用户名称 cust_name 和订单号 order_num。</p>
<table>
<thead>
<tr>
<th>cust_name</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>an</td>
<td>a5</td>
</tr>
<tr>
<td>andy</td>
<td>a1</td>
</tr>
<tr>
<td>ben</td>
<td>a2</td>
</tr>
<tr>
<td>hex</td>
<td>a7</td>
</tr>
<tr>
<td>tom</td>
<td>a4</td>
</tr>
<tr>
<td>tony</td>
<td>a3</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>顾客名称为 an 的 cust_id 为 cust221，他的订单号为 a5。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>考察 SQL 中的 <code>INNER JOIN</code>，其实也就是 <code>JOIN</code>。主要用于筛选出两个表中的交集部分。</p>
<figure><figcaption>图片标题</figcaption></figure>
<p>使用语法如下：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，此题使用 <code>INNER JOIN</code> 实现的方法如下。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此外，也可以使用最常用的 <code>WHERE</code> 来进行联接。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL38 返回顾客名称和相关订单号以及每个订单的总价</h2>
<h3> 描述</h3>
<p>Customers 表有字段，顾客名称：cust_name、顾客 id：cust_id</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
<td>andy</td>
</tr>
<tr>
<td>cust1</td>
<td>ben</td>
</tr>
<tr>
<td>cust2</td>
<td>tony</td>
</tr>
<tr>
<td>cust22</td>
<td>tom</td>
</tr>
<tr>
<td>cust221</td>
<td>an</td>
</tr>
<tr>
<td>cust2217</td>
<td>hex</td>
</tr>
</tbody>
</table>
<p>Orders 订单信息表，含有字段，订单号：order_num、顾客 id：cust_id</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>cust10</td>
</tr>
<tr>
<td>a2</td>
<td>cust1</td>
</tr>
<tr>
<td>a3</td>
<td>cust2</td>
</tr>
<tr>
<td>a4</td>
<td>cust22</td>
</tr>
<tr>
<td>a5</td>
<td>cust221</td>
</tr>
<tr>
<td>a7</td>
<td>cust2217</td>
</tr>
</tbody>
</table>
<p>OrderItems 表有字段，商品订单号：order_num、商品数量：quantity、商品价格：item_price</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>quantity</th>
<th>item_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>1000</td>
<td>10</td>
</tr>
<tr>
<td>a2</td>
<td>200</td>
<td>10</td>
</tr>
<tr>
<td>a3</td>
<td>10</td>
<td>15</td>
</tr>
<tr>
<td>a4</td>
<td>25</td>
<td>50</td>
</tr>
<tr>
<td>a5</td>
<td>15</td>
<td>25</td>
</tr>
<tr>
<td>a7</td>
<td>7</td>
<td>7</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>除了返回顾客名称和订单号，返回 Customers 表中的顾客名称（cust_name）和Orders 表中的相关订单号（order_num），添加第三列 OrderTotal，其中包含每个订单的总价，并按顾客名称再按订单号对结果进行升序排序。</p>
<h3> 示例结果</h3>
<p>返回顾客名称 cust_name、订单号 order_num、订单总额 OrderTotal</p>
<table>
<thead>
<tr>
<th>cust_name</th>
<th>order_num</th>
<th>OrderTotal</th>
</tr>
</thead>
<tbody>
<tr>
<td>an</td>
<td>a5</td>
<td>375</td>
</tr>
<tr>
<td>andy</td>
<td>a1</td>
<td>10000</td>
</tr>
<tr>
<td>ben</td>
<td>a2</td>
<td>2000</td>
</tr>
<tr>
<td>hex</td>
<td>a7</td>
<td>49</td>
</tr>
<tr>
<td>tom</td>
<td>a4</td>
<td>1250</td>
</tr>
<tr>
<td>tony</td>
<td>a3</td>
<td>150</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>例如顾客名称 cust_name 为 an 的顾客的订单 a5 的订单总额为 quantity*item_price = 15 * 25 = 375，最后以 cust_name 和 order_num 来进行升序排序。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>SQL 语句先后顺序：</p>
<div class="language-SQl line-numbers-mode" data-ext="SQl"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>书写 SQL 语句时，一定要遵守以上关键字的先后顺序。然后根据题意将各个条件组合即可。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> SQL39 确定哪些订单购买了 prod_id 为 BR01 的产品（二）</h2>
<h3> 描述</h3>
<p>表 OrderItems 代表订单商品信息表，prod_id 为产品 id；Orders 表代表订单表有 cust_id 代表顾客id和订单日期 order_date</p>
<p>OrderItems 表</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>BR01</td>
<td>a0001</td>
</tr>
<tr>
<td>BR01</td>
<td>a0002</td>
</tr>
<tr>
<td>BR02</td>
<td>a0003</td>
</tr>
<tr>
<td>BR02</td>
<td>a0013</td>
</tr>
</tbody>
</table>
<p>Orders 表</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
<th>order_date</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>cust10</td>
<td>2022-01-01 00:00:00</td>
</tr>
<tr>
<td>a0002</td>
<td>cust1</td>
<td>2022-01-01 00:01:00</td>
</tr>
<tr>
<td>a0003</td>
<td>cust1</td>
<td>2022-01-02 00:00:00</td>
</tr>
<tr>
<td>a0013</td>
<td>cust2</td>
<td>2022-01-01 00:20:00</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，使用子查询来确定哪些订单（在 OrderItems 中）购买了 prod_id 为 "BR01" 的产品，然后从 Orders 表中返回每个产品对应的顾客 ID（cust_id）和订单日期（order_date），按订购日期对结果进行升序排序。</p>
<p>提示：这一次使用联结和简单的等联结语法。</p>
<h3> 示例结果</h3>
<p>返回顾客 id cust_id 和定单日期 order_date</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>order_date</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
<td>2022-01-01 00:00:00</td>
</tr>
<tr>
<td>cust1</td>
<td>2022-01-01 00:01:00</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>产品 id 为 BR01 的订单 a0001 和 a002 的下单顾客 cust10 和 cust1 的下单时间分别为 2022-01-01 00:00:00 和 2022-01-01 00:01:00</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>多个条件的组合查询，先查询出产品 id 为 <code>BR01</code> 的 <code>order_num</code>，然后从查询出的结果列中再去筛选出 <code>Orders</code> 表中 <code>order_num</code>，最后则是正序排序即可。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> SQL40 返回购买 prod_id 为 BR01 的产品的所有顾客的电子邮件（二）</h2>
<h3> 描述</h3>
<p>有表 OrderItems 代表订单商品信息表，prod_id 为产品 id；Orders 表代表订单表有 cust_id 代表顾客 id 和订单日期 order_date；Customers 表含有 cust_email 顾客邮件和 cust_id 顾客 id</p>
<p>OrderItems 表</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>BR01</td>
<td>a0001</td>
</tr>
<tr>
<td>BR01</td>
<td>a0002</td>
</tr>
<tr>
<td>BR02</td>
<td>a0003</td>
</tr>
<tr>
<td>BR02</td>
<td>a0013</td>
</tr>
</tbody>
</table>
<p>Orders 表</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
<th>order_date</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>cust10</td>
<td>2022-01-01 00:00:00</td>
</tr>
<tr>
<td>a0002</td>
<td>cust1</td>
<td>2022-01-01 00:01:00</td>
</tr>
<tr>
<td>a0003</td>
<td>cust1</td>
<td>2022-01-02 00:00:00</td>
</tr>
<tr>
<td>a0013</td>
<td>cust2</td>
<td>2022-01-01 00:20:00</td>
</tr>
</tbody>
</table>
<p>Customers 表代表顾客信息，cust_id 为顾客 id，cust_email 为顾客 email</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_email</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
<td><a href="mailto:cust10@cust.com">cust10@cust.com</a></td>
</tr>
<tr>
<td>cust1</td>
<td><a href="mailto:cust1@cust.com">cust1@cust.com</a></td>
</tr>
<tr>
<td>cust2</td>
<td><a href="mailto:cust2@cust.com">cust2@cust.com</a></td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>返回购买 prod_id 为BR01 的产品的所有顾客的电子邮件（Customers 表中的 cust_email），结果无需排序。</p>
<p>提示：涉及到 SELECT 语句，最内层的从 OrderItems 表返回 order_num，中间的从 Customers 表返回 cust_id，但是必须使用 INNER JOIN 语法。</p>
<h3> 示例结果</h3>
<p>返回顾客 email cust_email</p>
<table>
<thead>
<tr>
<th>cust_email</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="mailto:cust10@cust.com">cust10@cust.com</a></td>
</tr>
<tr>
<td><a href="mailto:cust1@cust.com">cust1@cust.com</a></td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>产品 id 为 BR01 的订单 a0001 和 a002 的下单顾客 cust10 和 cust1 的顾客 email cust_email 分别是：cust10@cust.com 、cust1@cust.com</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>多个内联接的组合，先是筛选出 <code>OrderItems</code> 和 <code>Orders</code> 表中 <code>order_num</code> 相同的列，然后根据筛选出的结果列中的 <code>cust_id</code> 从 <code>Customers</code> 表中找对应的顾客信息即可。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> SQL41 确定最佳顾客的另一种方式（二）</h2>
<h3> 描述</h3>
<p>OrderItems 表代表订单信息，确定最佳顾客的另一种方式是看他们花了多少钱，OrderItems 表有订单号 order_num 和 item_price 商品售出价格、quantity 商品数量</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>item_price</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>10</td>
<td>105</td>
</tr>
<tr>
<td>a2</td>
<td>1</td>
<td>1100</td>
</tr>
<tr>
<td>a2</td>
<td>1</td>
<td>200</td>
</tr>
<tr>
<td>a4</td>
<td>2</td>
<td>1121</td>
</tr>
<tr>
<td>a5</td>
<td>5</td>
<td>10</td>
</tr>
<tr>
<td>a2</td>
<td>1</td>
<td>19</td>
</tr>
<tr>
<td>a7</td>
<td>7</td>
<td>5</td>
</tr>
</tbody>
</table>
<p>Orders 表含有字段 order_num 订单号、cust_id 顾客 id</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>cust10</td>
</tr>
<tr>
<td>a2</td>
<td>cust1</td>
</tr>
<tr>
<td>a3</td>
<td>cust2</td>
</tr>
<tr>
<td>a4</td>
<td>cust22</td>
</tr>
<tr>
<td>a5</td>
<td>cust221</td>
</tr>
<tr>
<td>a7</td>
<td>cust2217</td>
</tr>
</tbody>
</table>
<p>顾客表 Customers 有字段 cust_id 客户 id、cust_name 客户姓名</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
<td>andy</td>
</tr>
<tr>
<td>cust1</td>
<td>ben</td>
</tr>
<tr>
<td>cust2</td>
<td>tony</td>
</tr>
<tr>
<td>cust22</td>
<td>tom</td>
</tr>
<tr>
<td>cust221</td>
<td>an</td>
</tr>
<tr>
<td>cust2217</td>
<td>hex</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，返回订单总价不小于 1000 的客户名称和总额（OrderItems 表中的 order_num）。</p>
<p>提示：需要计算总和（item_price 乘以 quantity）。按总额对结果进行排序，请使用INNER JOIN 语法。</p>
<h3> 示例结果</h3>
<table>
<thead>
<tr>
<th>cust_name</th>
<th>total_price</th>
</tr>
</thead>
<tbody>
<tr>
<td>andy</td>
<td>1050</td>
</tr>
<tr>
<td>ben</td>
<td>1319</td>
</tr>
<tr>
<td>tom</td>
<td>2242</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>总额（item_price 乘以 quantity）大于等于 1000 的订单号，例如 a2 对应的顾客id 为 cust1，cust1 的顾客名称 cust_name 是 ben，最后返回 ben 作为 order_num a2 的quantity * item_price 总和的结果 1319。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>主要考察的知识点：</p>
<ul>
<li>取别名：<code>AS</code> 关键字</li>
<li>求和：<code>SUM()</code></li>
<li><code>GROUP BY</code> 和 <code>HAVING</code> 同时使用用于过滤结果</li>
<li>排序：<code>ORDER BY</code> 关键字</li>
</ul>
<p>主要考察对多个 SQL 关键字的运用，同时还需要注意 SQL 中关键字的前后顺序。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> SQL42 检索每个顾客的名称和所有的订单号（一）</h2>
<h3> 描述</h3>
<p>Customers 表代表顾客信息含有顾客 id cust_id 和顾客名称 cust_name</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
<td>andy</td>
</tr>
<tr>
<td>cust1</td>
<td>ben</td>
</tr>
<tr>
<td>cust2</td>
<td>tony</td>
</tr>
<tr>
<td>cust22</td>
<td>tom</td>
</tr>
<tr>
<td>cust221</td>
<td>an</td>
</tr>
<tr>
<td>cust2217</td>
<td>hex</td>
</tr>
</tbody>
</table>
<p>Orders 表代表订单信息含有订单号 order_num 和顾客 id cust_id</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>cust10</td>
</tr>
<tr>
<td>a2</td>
<td>cust1</td>
</tr>
<tr>
<td>a3</td>
<td>cust2</td>
</tr>
<tr>
<td>a4</td>
<td>cust22</td>
</tr>
<tr>
<td>a5</td>
<td>cust221</td>
</tr>
<tr>
<td>a7</td>
<td>cust2217</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>使用 INNER JOIN 编写 SQL 语句，检索每个顾客的名称（Customers 表中的  cust_name）和所有的订单号（Orders 表中的 order_num），最后根据顾客姓名 cust_name 升序返回。</p>
<h3> 示例结果</h3>
<p>返回顾客名称 cust_name 和订单号 order_num</p>
<table>
<thead>
<tr>
<th>cust_name</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>an</td>
<td>a5</td>
</tr>
<tr>
<td>andy</td>
<td>a1</td>
</tr>
<tr>
<td>ben</td>
<td>a2</td>
</tr>
<tr>
<td>hex</td>
<td>a7</td>
</tr>
<tr>
<td>tom</td>
<td>a4</td>
</tr>
<tr>
<td>tony</td>
<td>a3</td>
</tr>
</tbody>
</table>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>主要考察 <code>INNER JOIN</code> 的用法，其使用语法如下：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要实现本题，利用上述语法填入对应字段名和表名即可，最后则是关键字 <code>ORDER BY</code> 的使用。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL43 检索每个顾客的名称和所有的订单号（二）</h2>
<h3> 描述</h3>
<p>Orders 表代表订单信息含有订单号 order_num和顾客 id cust_id</p>
<table>
<thead>
<tr>
<th>order_num</th>
<th>cust_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>cust10</td>
</tr>
<tr>
<td>a2</td>
<td>cust1</td>
</tr>
<tr>
<td>a3</td>
<td>cust2</td>
</tr>
<tr>
<td>a4</td>
<td>cust22</td>
</tr>
<tr>
<td>a5</td>
<td>cust221</td>
</tr>
<tr>
<td>a7</td>
<td>cust2217</td>
</tr>
</tbody>
</table>
<p>Customers 表代表顾客信息含有顾客 id cust_id 和 顾客名称 cust_name</p>
<table>
<thead>
<tr>
<th>cust_id</th>
<th>cust_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
<td>andy</td>
</tr>
<tr>
<td>cust1</td>
<td>ben</td>
</tr>
<tr>
<td>cust2</td>
<td>tony</td>
</tr>
<tr>
<td>cust22</td>
<td>tom</td>
</tr>
<tr>
<td>cust221</td>
<td>an</td>
</tr>
<tr>
<td>cust2217</td>
<td>hex</td>
</tr>
<tr>
<td>cust40</td>
<td>ace</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>检索每个顾客的名称（Customers 表中的 cust_name）和所有的订单号（Orders 表中的 order_num），列出所有的顾客，即使他们没有下过订单。最后根据顾客姓名 cust_name 升序返回。</p>
<h3> 示例结果</h3>
<p>返回顾客名称 cust_name 和订单号 order_num</p>
<table>
<thead>
<tr>
<th>cust_name</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>ace</td>
<td>NULL</td>
</tr>
<tr>
<td>an</td>
<td>a5</td>
</tr>
<tr>
<td>andy</td>
<td>a1</td>
</tr>
<tr>
<td>ben</td>
<td>a2</td>
</tr>
<tr>
<td>hex</td>
<td>a7</td>
</tr>
<tr>
<td>tom</td>
<td>a4</td>
</tr>
<tr>
<td>tony</td>
<td>a3</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>基于两张表，返回订单号 a1 的顾客名称 andy 等人，没有下单的顾客 ace 也统计了进来。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>根据题意，主要以 <code>Customers</code> 表中的列为主，然后取 <code>Customers</code> 和 <code>Orders</code> 中的交集。对于 <code>Orders</code> 表中不存在的列则取值 <code>null</code>。所以可以使用外联结中的 <code>LEFT JION</code>，其使用语法如下：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>套用上述语法，填入对应表和列名即可实现，最后则是再加入简单的排序即可。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL44 返回产品名称和与之相关的订单号</h2>
<h3> 描述</h3>
<p>Products 表为产品信息表含有字段 prod_id 产品 id、prod_name 产品名称</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>egg</td>
</tr>
<tr>
<td>a0002</td>
<td>sockets</td>
</tr>
<tr>
<td>a0013</td>
<td>coffee</td>
</tr>
<tr>
<td>a0003</td>
<td>cola</td>
</tr>
<tr>
<td>a0023</td>
<td>soda</td>
</tr>
</tbody>
</table>
<p>OrderItems 表为订单信息表含有字段 order_num 订单号和产品 id prod_id</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>a105</td>
</tr>
<tr>
<td>a0002</td>
<td>a1100</td>
</tr>
<tr>
<td>a0002</td>
<td>a200</td>
</tr>
<tr>
<td>a0013</td>
<td>a1121</td>
</tr>
<tr>
<td>a0003</td>
<td>a10</td>
</tr>
<tr>
<td>a0003</td>
<td>a19</td>
</tr>
<tr>
<td>a0003</td>
<td>a5</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>使用 OUTER JOIN 联结 Products 表和 OrderItems 表，返回产品名称（prod_name）和与之相关的订单号（order_num）的列表，并按照产品名称升序排序。</p>
<h3> 示例结果</h3>
<p>返回产品名称 prod_name 和订单号 order_num</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>coffee</td>
<td>a1121</td>
</tr>
<tr>
<td>cola</td>
<td>a5</td>
</tr>
<tr>
<td>cola</td>
<td>a19</td>
</tr>
<tr>
<td>cola</td>
<td>a10</td>
</tr>
<tr>
<td>egg</td>
<td>a105</td>
</tr>
<tr>
<td>sockets</td>
<td>a200</td>
</tr>
<tr>
<td>sockets</td>
<td>a1100</td>
</tr>
<tr>
<td>soda</td>
<td>NULL</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>返回产品和对应实际支付订单的订单号，但是无实际订单的产品 soda 也返回，最后根据产品名称升序排序。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>此题解法类似于 43 题，主要使用 <code>OUTER JOIN</code> 中的左联结 <code>LEFT JOIN</code>，主要清除相关语法，然后套用填入表名和列名即可。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> SQL45 返回产品名称和每一项产品的总订单数</h2>
<h3> 描述</h3>
<p>Products 表为产品信息表含有字段 prod_id 产品 id、prod_name 产品名称</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>prod_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>egg</td>
</tr>
<tr>
<td>a0002</td>
<td>sockets</td>
</tr>
<tr>
<td>a0013</td>
<td>coffee</td>
</tr>
<tr>
<td>a0003</td>
<td>cola</td>
</tr>
<tr>
<td>a0023</td>
<td>soda</td>
</tr>
</tbody>
</table>
<p>OrderItems 表为订单信息表含有字段 order_num 订单号和产品 id prod_id</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>order_num</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>a105</td>
</tr>
<tr>
<td>a0002</td>
<td>a1100</td>
</tr>
<tr>
<td>a0002</td>
<td>a200</td>
</tr>
<tr>
<td>a0013</td>
<td>a1121</td>
</tr>
<tr>
<td>a0003</td>
<td>a10</td>
</tr>
<tr>
<td>a0003</td>
<td>a19</td>
</tr>
<tr>
<td>a0003</td>
<td>a5</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>使用 OUTER JOIN 联结 Products 表和 OrderItems 表，返回产品名称（prod_name）和每一项产品的总订单数（不是订单号），并按产品名称升序排序。</p>
<h3> 示例结果</h3>
<p>返回产品名称 prod_name 和订单号订单数 orders</p>
<table>
<thead>
<tr>
<th>prod_name</th>
<th>orders</th>
</tr>
</thead>
<tbody>
<tr>
<td>coffee</td>
<td>1</td>
</tr>
<tr>
<td>cola</td>
<td>3</td>
</tr>
<tr>
<td>egg</td>
<td>1</td>
</tr>
<tr>
<td>sockets</td>
<td>2</td>
</tr>
<tr>
<td>soda</td>
<td>0</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>返回产品和产品对应的实际支付的订单数，但是无实际订单的产品 soda 也返回，最后根据产品名称升序排序。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>考察的知识点仍然是外连接，只不过加入了 <code>COUNT()</code> 函数用于分组统计，最后同样是简单的排序。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> SQL46 列出供应商及其可供产品的数量</h2>
<h3> 描述</h3>
<p>有 Vendors 表含有 vend_id 供应商id.</p>
<table>
<thead>
<tr>
<th>vend_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0002</td>
</tr>
<tr>
<td>a0013</td>
</tr>
<tr>
<td>a0003</td>
</tr>
<tr>
<td>a0010</td>
</tr>
</tbody>
</table>
<p>有 Products 表含有供应商 id 和供应产品 id</p>
<table>
<thead>
<tr>
<th>vend_id</th>
<th>prod_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>egg</td>
</tr>
<tr>
<td>a0002</td>
<td>prod_id_iphone</td>
</tr>
<tr>
<td>a00113</td>
<td>prod_id_tea</td>
</tr>
<tr>
<td>a0003</td>
<td>prod_id_vivo phone</td>
</tr>
<tr>
<td>a0010</td>
<td>prod_id_huawei phone</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>列出供应商（Vendors 表中的 vend_id）及其可供产品的数量，包括没有产品的供应商。你需要使用 OUTER JOIN 和 COUNT() 聚合函数来计算 Products 表中每种产品的数量，最后根据 vend_id 升序排序。</p>
<p>注意：vend_id 列会显示在多个表中，因此在每次引用它时都需要完全限定它。</p>
<h3> 示例结果</h3>
<p>返回供应商 id 和对应供应商供应的产品的个数</p>
<table>
<thead>
<tr>
<th>vend_id</th>
<th>prod_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0002</td>
<td>1</td>
</tr>
<tr>
<td>a0013</td>
<td>0</td>
</tr>
<tr>
<td>a0003</td>
<td>1</td>
</tr>
<tr>
<td>a0010</td>
<td>1</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>供应商 a00013 供应的商品不在 Products 表中所以为 0，其他供应商供应的产品为 1 个。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>利用 <code>COUNT()</code> 函数对 <code>Vendors</code> 中的 <code>vend_id</code> 分组并统计。</p>
<p>另外则是考察 <code>LEFT JOIN</code>，即题目中所说的 <code>OUTER JOIN</code>，其具体使用语法如下。</p>
<figure><figcaption>图片标题</figcaption></figure>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL47 将两个 SELECT 语句结合起来（一）</h2>
<h3> 描述</h3>
<p>表 OrderItems 包含订单产品信息，字段 prod_id 代表产品 id、quantity 代表产品数量</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>105</td>
</tr>
<tr>
<td>a0002</td>
<td>100</td>
</tr>
<tr>
<td>a0002</td>
<td>200</td>
</tr>
<tr>
<td>a0013</td>
<td>1121</td>
</tr>
<tr>
<td>a0003</td>
<td>10</td>
</tr>
<tr>
<td>a0003</td>
<td>19</td>
</tr>
<tr>
<td>a0003</td>
<td>5</td>
</tr>
<tr>
<td>BNBG</td>
<td>10002</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>将两个 SELECT 语句结合起来，以便从 OrderItems 表中检索产品 id（prod_id）和 quantity。其中，一个 SELECT 语句过滤数量为 100 的行，另一个 SELECT 语句过滤 id 以 BNBG 开头的产品，最后按产品 id 对结果进行升序排序。</p>
<h3> 示例结果</h3>
<p>返回产品 id prod_id和产品数量 quantity</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0002</td>
<td>100</td>
</tr>
<tr>
<td>BNBG</td>
<td>10002</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>产品 id a0002 因为数量等于 100 被选取返回；BNBG 因为是以 BNBG 开头的产品所以返回；最后以产品 id 进行排序返回。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>依照题意，其实我们利用一个 <code>SELECT</code> 然后搭配 <code>WHERE</code> 条件查询就能将满足题意的纪律筛选出来。但是为了练习关键字 <code>UNION</code> 的使用，可以将两个条件查询语句分开，然后用 <code>UNION</code> 联接起来，最后则是按照 <code>prod_id</code> 正序排列。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL48 将两个 SELECT 语句结合起来（二）</h2>
<h3> 描述</h3>
<p>表 OrderItems 包含订单产品信息，字段 prod_id 代表产品 id、quantity 代表产品数量。</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0001</td>
<td>105</td>
</tr>
<tr>
<td>a0002</td>
<td>100</td>
</tr>
<tr>
<td>a0002</td>
<td>200</td>
</tr>
<tr>
<td>a0013</td>
<td>1121</td>
</tr>
<tr>
<td>a0003</td>
<td>10</td>
</tr>
<tr>
<td>a0003</td>
<td>19</td>
</tr>
<tr>
<td>a0003</td>
<td>5</td>
</tr>
<tr>
<td>BNBG</td>
<td>10002</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>将两个 SELECT 语句结合起来，以便从 OrderItems 表中检索产品 id（prod_id）和 quantity。其中，一个 SELECT 语句过滤数量为 100 的行，另一个 SELECT 语句过滤 id 以 BNBG 开头的产品，最后按产品 id 对结果进行升序排序。<br>
注意：这次仅使用单个 SELECT 语句。</p>
<h3> 示例结果</h3>
<p>返回产品 id prod_id 和产品数量 quantity</p>
<table>
<thead>
<tr>
<th>prod_id</th>
<th>quantity</th>
</tr>
</thead>
<tbody>
<tr>
<td>a0002</td>
<td>100</td>
</tr>
<tr>
<td>BNBG</td>
<td>10002</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>产品 id a0002 因为数量等于 100 被选取返回；BNBG 因为是以 BNBG 开头的产品所以返回；最后以产品 id 进行排序返回。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>根据题意仅使用单个 <code>SELECT</code> 语句，那就直接利用 <code>WHERE</code> 条件查询，然后将两个条件利用连接符 <code>OR</code> 并联即可。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL49 组合 Products 表中的产品名称和 Customers 表中的顾客名称</h2>
<h3> 描述</h3>
<p>Products 表含有字段 prod_name 代表产品名称</p>
<table>
<thead>
<tr>
<th>prod_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>flower</td>
</tr>
<tr>
<td>rice</td>
</tr>
<tr>
<td>ring</td>
</tr>
<tr>
<td>umbrella</td>
</tr>
</tbody>
</table>
<p>Customers 表代表顾客信息，cust_name 代表顾客名称</p>
<table>
<thead>
<tr>
<th>cust_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>andy</td>
</tr>
<tr>
<td>ben</td>
</tr>
<tr>
<td>tony</td>
</tr>
<tr>
<td>tom</td>
</tr>
<tr>
<td>an</td>
</tr>
<tr>
<td>lee</td>
</tr>
<tr>
<td>hex</td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>编写 SQL 语句，组合 Products 表中的产品名称（prod_name）和 Customers 表中的顾客名称（cust_name）并返回，然后按产品名称对结果进行升序排序。</p>
<h3> 示例结果</h3>
<table>
<thead>
<tr>
<th>prod_name</th>
</tr>
</thead>
<tbody>
<tr>
<td>an</td>
</tr>
<tr>
<td>andy</td>
</tr>
<tr>
<td>ben</td>
</tr>
<tr>
<td>flower</td>
</tr>
<tr>
<td>hex</td>
</tr>
<tr>
<td>lee</td>
</tr>
<tr>
<td>rice</td>
</tr>
<tr>
<td>ring</td>
</tr>
<tr>
<td>tom</td>
</tr>
<tr>
<td>tony</td>
</tr>
<tr>
<td>umbrella</td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>拼接 cust_name 和 prod_name 并根据结果升序排序</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>同样考察 <code>UNION</code> 操作符，通过将两个 <code>SELECT</code> 语句的结果合并起来即可。</p>
<p>这里需要注意的是得出的结果是 <code>prod_name</code>，所以需要注意两个 <code>SELECT</code> 语句的先后顺序，再然后就是需要对查询出的记录按照 <code>prod_name</code> 正序排列。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> SQL50 纠错4</h2>
<h3> 描述</h3>
<p>表 Customers 含有字段 cust_name 顾客名、cust_contact 顾客联系方式、cust_state 顾客州、cust_email 顾客 email</p>
<table>
<thead>
<tr>
<th>cust_name</th>
<th>cust_contact</th>
<th>cust_state</th>
<th>cust_email</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust10</td>
<td>8695192</td>
<td>MI</td>
<td><a href="mailto:cust10@cust.com">cust10@cust.com</a></td>
</tr>
<tr>
<td>cust1</td>
<td>8695193</td>
<td>MI</td>
<td><a href="mailto:cust1@cust.com">cust1@cust.com</a></td>
</tr>
<tr>
<td>cust2</td>
<td>8695194</td>
<td>IL</td>
<td><a href="mailto:cust2@cust.com">cust2@cust.com</a></td>
</tr>
</tbody>
</table>
<h3> 问题</h3>
<p>修正下面错误的 SQL</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 示例结果</h3>
<p>返回顾客名称：cust_name、顾客联系方式：cust_contact、顾客 email：cust_email</p>
<table>
<thead>
<tr>
<th>cust_name</th>
<th>cust_contact</th>
<th>cust_email</th>
</tr>
</thead>
<tbody>
<tr>
<td>cust1</td>
<td>8695193</td>
<td><a href="mailto:cust1@cust.com">cust1@cust.com</a></td>
</tr>
<tr>
<td>cust10</td>
<td>8695192</td>
<td><a href="mailto:cust10@cust.com">cust10@cust.com</a></td>
</tr>
<tr>
<td>cust2</td>
<td>8695194</td>
<td><a href="mailto:cust2@cust.com">cust2@cust.com</a></td>
</tr>
</tbody>
</table>
<h3> 示例解析</h3>
<p>返回住在 "IL" 和 "MI" 的顾客信息，最后根据顾客名称升序排序。</p>
<h3> 示例</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 解答</h3>
<p>主要有两处错误，第一是 <code>UNION</code> 前多加了 <code>;</code>，<code>;</code> 表示一条 SQL 的结束，加在此处不适合。</p>
<p>第二则是只主要对 <code>cust_name</code> 排序一次即可，放在 <code>UNION</code> 前的 <code>ORDER BY</code> 关键字显然位置不对。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 致谢</h2>
<p>感谢<a href="http://nowcoder.com/" target="_blank" rel="noopener noreferrer">牛客网</a>提供的题目列表。</p>
]]></content>
    <category term="MySQL 教程"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">MySQL 教程</title>
    <id>https://cunyu1943.github.io/java-tutorial/mysql-series/</id>
    <link href="https://cunyu1943.github.io/java-tutorial/mysql-series/"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">Hexo+Github Pages博客搭建教程</title>
    <id>https://cunyu1943.github.io/tutorial/blog-series/20220401-hexo.html</id>
    <link href="https://cunyu1943.github.io/tutorial/blog-series/20220401-hexo.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Hexo+Github Pages博客搭建教程</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>现在市面上已经有许多博客了，比如 CSDN、掘金、博客园、简书等等。我们可以直接在上面发表内容，而且交互比较人性化，而且也能被搜索引擎检索到。但是总归是别人的平台，经常会受限，因此我们就希望能有自己的博客。之前也尝试过搭建过不同的博客类型，折腾了不少工作，最终决定定型，采用 Hexo + Github Pages 的方式。今天就带大家一起来搭建自己的博客。由于是采用 Hexo + Github Pages 的方式，所以都是免费的，只是需要有一定的动手能力！</p>]]></summary>
    <content type="html"><![CDATA[<h1> Hexo+Github Pages博客搭建教程</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>现在市面上已经有许多博客了，比如 CSDN、掘金、博客园、简书等等。我们可以直接在上面发表内容，而且交互比较人性化，而且也能被搜索引擎检索到。但是总归是别人的平台，经常会受限，因此我们就希望能有自己的博客。之前也尝试过搭建过不同的博客类型，折腾了不少工作，最终决定定型，采用 Hexo + Github Pages 的方式。今天就带大家一起来搭建自己的博客。由于是采用 Hexo + Github Pages 的方式，所以都是免费的，只是需要有一定的动手能力！</p>
<h2> Hexo 简介</h2>
<p><a href="https://hexo.io/zh-cn/docs/" title="Hexo" target="_blank" rel="noopener noreferrer">Hexo</a> 是一个快速、简洁且高效的静态博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。我们只需要通过 Markdown 语法写好自己的博客内容，然后通过简单的命令就能够将生成的网页上传到 Github，然后大家都可以来访问你的网页了。既方便了自己，也给了自己一个展示自己成果的平台，是不是一举两得。</p>
<h2> 搭建步骤</h2>
<p>搭建之前，需要做一些准备工作，首先需要确保你的电脑上已经上安装好了 Git 和 Node.Js，然后才能开始安装 Hexo，那么首先我们先来看看如何准备这这些环境。</p>
<h3> Git</h3>
<h4> 安装</h4>
<ol>
<li><strong>Window</strong>：<a href="https://git-scm.com/download/win" title="下载并安装" target="_blank" rel="noopener noreferrer">下载并安装</a></li>
<li><strong>macOS</strong>：<a href="https://sourceforge.net/projects/git-osx-installer/" title="下载并安装" target="_blank" rel="noopener noreferrer">下载并安装</a></li>
<li><strong>Linux（Debian，Ubuntu）</strong>：<code>sudo apt-get install git-core</code></li>
<li><strong>Linux（Fedora、RedHat、CentOS）</strong>：<code>sudo yum install git-core</code></li>
</ol>
<h4> 设置</h4>
<p>安装成功后，将 git 与 GitHub 账号绑定，右键打开 Git Bash，然后设置配置信息：</p>
<figure><figcaption></figcaption></figure>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如我的配置就是：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接着生成 ssh 密钥文件，输入如下命令后直接三次回车即可，一般不需要设置密码；</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我生成秘钥的命令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>一般执行上述命令之后，会生成 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件，前者是我们私有的，而后者则是对外开放的。接着找到生成的 <code>.ssh</code> 的文件夹中的 id_rsa.pub 密钥，将内容复制；</p>
<figure><figcaption></figcaption></figure>
<p>然后打开 <a href="https://github.com/settings/keys" title="GitHub-Settings-Keys" target="_blank" rel="noopener noreferrer">GitHub-Settings-Keys</a> 页面，创建一个新的 SSH key，填写 <code>Title</code> 和 <code>Key</code>，<code>Title</code> 可以随意，而 <code>Key</code> 的内容则是我们刚才复制的 <code>id_rsa.pub</code> 中的内容，最后点击 <code>Add SSH key</code> 即可；</p>
<figure><figcaption></figcaption></figure>
<h3> Node.Js 安装</h3>
<h4> 安装</h4>
<p>去官网下载最新的稳定版 <a href="https://nodejs.org/en/" title="Node.JS" target="_blank" rel="noopener noreferrer">Node.JS</a> ，一般推荐 64 位（大家应该现在用的电脑基本都是 64 位的吧），安装的话很简单，基本就是下一步下一步点击就好了。如果还是不知道如何安装，可以参考我的另一篇博客：<a href="https://blog.csdn.net/github_39655029/article/details/105397485" title="Windows 下 Node.js 的安装（多图版）" target="_blank" rel="noopener noreferrer">Windows 下 Node.js 的安装（多图版）</a></p>
<h4> 验证</h4>
<p>安装完成后，要查看我们是否安装成功，可以打开命令提示符（<code>Win + R</code>），输入 <code>cmd</code> 打开控制台，输入如下命令，如果出现对应版本号，说明安装成功了；</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h4> 设置</h4>
<p>由于下载包是从国外服务器，所以速度较慢，因此我们推荐用阿里的国内镜像进行设置；</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> Hexo 安装</h3>
<p>在你的硬盘上找个地儿，用来存放你的博客文件，比如我的就在 <code>D:personalFiles/github/blog</code>，这个文件夹你可以根据自己的喜好来设置。然后从命令台进入当前文件夹，接下来就是安装过程了；</p>
<ol>
<li>首先安装 Hexo</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="2">
<li>新建一个文件夹用于存放你的博客，比如我的是 <code>blog</code>，然后进入该文件夹，并用如下命令进行初始化并安装必备组件；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="3">
<li>初始化后，目录结构如下；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li>然后输入如下命令，然后在浏览器中打开 <code>http://localhost:4000</code>；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就可以看到如下的界面，不过我的是经过修改过的，所以和你的会不一样。</p>
<figure><figcaption></figcaption></figure>
<h3> Github 个人仓库</h3>
<p>完成上面的步骤之后，我们就能在本地进行预览了，不过我们如果想要发布到网上供别人看的话，那就得利用 Github Pages 的功能了，下边就来介绍如何结合 Hexo + Github Pages ，将我们的博客推送到网上去，方便大家在任何地方访问！</p>
<blockquote>
<p>首先你得有个 GitHub 账号，如果没有的，请出门 <a href="https://github.com/" title="右转" target="_blank" rel="noopener noreferrer">右转</a> 先去注册个账号；</p>
</blockquote>
<p>有了账号之后，新建一个仓库，而且得确保你的仓库是 <code>public</code>，你要搞个 <code>private</code>，谁能访问的了？？？同时，仓库名一定要是：</p>
<blockquote>
<p><strong><a href="http://xn--eqr924avxo.github.io" target="_blank" rel="noopener noreferrer">用户名.github.io</a></strong></p>
<p><strong><a href="http://xn--eqr924avxo.github.io" target="_blank" rel="noopener noreferrer">用户名.github.io</a></strong></p>
<p><strong><a href="http://xn--eqr924avxo.github.io" target="_blank" rel="noopener noreferrer">用户名.github.io</a></strong></p>
</blockquote>
<p>这个用户名建议不要太复杂，但是又要能体现你个人特点，因为后续让别人访问你的博客时，就要通过 <code>https://用户名.github.io</code> 这个域名来访问。比如我的用户名是 <strong>cunyu1943</strong>，所以我的仓库就是 <a href="https://github.com/cunyu1943/cunyu1943.github.io" title="cunyu1943.github.io" target="_blank" rel="noopener noreferrer">cunyu1943.github.io</a>：</p>
<figure><figcaption></figcaption></figure>
<h3> 部署到 Github</h3>
<p>完成上面的步骤后，你应该能在本地进行预览了，接下来就是推送网站到 Github Pages 了，然后我们就能被其他人访问了。</p>
<p>只需要在我们刚才的博客根目录中的站点配置文件 <code>_config.yml</code> ，设置为你的个人仓库名即可：</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>完成上述步骤之后，主要使用如下命令，就能将我们本地的内容推送到远程 GitHub 仓库了，然后在浏览器中访问：</p>
<blockquote>
<p><a href="https://xn--eqr924avxo.github.io" target="_blank" rel="noopener noreferrer">https://用户名.github.io</a></p>
</blockquote>
<p>比如我的博客 <a href="https://cunyu1943.github.io/" title="村雨遥的博客" target="_blank" rel="noopener noreferrer">村雨遥的博客</a>；</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> Gitee 个人仓库</h3>
<p>上面说完部署到 Github，接下来就说说怎么部署到 Gitee，老规矩，首先你得需要一个 Gitee 账号，如果没有的，出门 <a href="https://gitee.com/" title="右转" target="_blank" rel="noopener noreferrer">右转</a> 先去注册个账号。</p>
<p>然后新建一个仓库，同样有几点需要注意的：</p>
<ol>
<li>保证你的仓库是 <code>public</code>；</li>
<li>仓库名是 <strong>你的用户名</strong>，这一点和 Github 略有不同，不需要是 <strong><a href="http://xn--eqr924avxo.gitee.io" target="_blank" rel="noopener noreferrer">用户名.gitee.io</a></strong>；</li>
</ol>
<p>比如我的用户名是 <code>cunyu1943</code>，所以我的仓库名就是 <a href="https://gitee.com/cunyu1943/cunyu1943" title="cunyu1943" target="_blank" rel="noopener noreferrer">cunyu1943</a>。</p>
<figure><figcaption></figcaption></figure>
<h3> 部署到 Gitee</h3>
<p>完成上面的步骤后，你应该能在本地进行预览了，接下来就是推送网站到 Gitee Pages 了，然后我们就能被其他人访问了。这里需要注意的是，Gitee Pages 不像 Github Pages 会自动更新，它需要你每次推送后，去更新一下，如果想要自动更新，就需要开通 Gitee 的会员。</p>
<p>然后需要在我们刚才的博客根目录中的站点配置文件 <code>_config.yml</code> ，设置为你的个人仓库名即可：</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<p>完成上述步骤之后，主要使用如下命令，就能将我们本地的内容推送到远程 Gitee 仓库了，去手动更新 Gitee Pages 后，然后在浏览器中访问：</p>
<blockquote>
<p><a href="https://xn--eqr924avxo.gitee.io" target="_blank" rel="noopener noreferrer">https://用户名.gitee.io</a></p>
</blockquote>
<figure><figcaption></figcaption></figure>
<h2> 如何写新博客并推送到远程</h2>
<p>通过上面的步骤后，你的博客应该就已经搭建成功，而且能通过 <code>https://用户名.github.io</code> 的方式进行访问了。接下来如果我们要发一篇新的博客内容，又应该怎么办呢？接下来就详细讲一下如何操作。</p>
<ol>
<li>首先进入博客所在文件夹，然后右键进入控制台，用如下命令进行创建新的文章；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="2">
<li>接着在 <code>blog/source/_posts</code> 目录下应该就会有创建好的以文章标题名命名的 Markdown 文件；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>接着打开该文件，编写你自己想要的内容即可；</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="4">
<li>接着在控制台使用如下命令，将其推送到远程 GitHub 仓库，等过一会儿之后，访问即可看到刚才推送的新文章了！</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 如何绑定自定义域名</h2>
<p>通过 <code>用户名.github.io</code> 的方式来访问总归是有些不方便，如果我们需要自己的个性域名，又应该如何设置呢？那么在此之前，你需要有一个已经备案好的域名，如果没有的话，请到阿里云、腾讯云等场商购买自己的域名，然后通过该平台备案，然后添加两条解析记录，以我的腾讯云为例：</p>
<figure><figcaption></figcaption></figure>
<p>备好案并设置解析之后，在 Github 的博客项目中，依次点击 <code>Settings-&gt;Pages</code>，然后在 <code>Custom domain</code> 添加你的域名即可，最后 <code>Save</code> 即可，此时你的博客根目录下应该会多一个 <code>CNAME</code> 的文件，然后你就可以通过自己的域名来访问你的博客了。</p>
<p>当然，有时候可能经过上面的设置后，博客根目录下不会出现名为 <code>CNAME</code> 的文件，如果没有，我们可以通过在本地博客 <code>/source</code> 目录下手动建立一个 <code>CNAME</code> 文件（无后缀），然后把你的域名填进去并保存，最后依次执行如下命令将设置上传到 Github 即可 ~</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<p>比如我的域名为 <code>cunyu1943.site</code>，通过设置之后，我们就可以通过 <a href="https://cunyu1943.site" target="_blank" rel="noopener noreferrer">https://cunyu1943.site</a> 来访问我的博客了。</p>
<figure><figcaption></figcaption></figure>
<h2> 美化</h2>
<p>经过上面的设置之后，我们只是得到了一个简单地博客，如果你也想让你的博客像我的一样酷（zhuang）炫（bi），就要用到主题了，我采用的主题是 <a href="https://github.com/blinkfox/hexo-theme-matery" title="hexo-theme-matery" target="_blank" rel="noopener noreferrer">hexo-theme-matery</a>，一个基于材料设计和响应式设计而成的主题，而且关于如何设置它也有十分详细的文档，如果存在不懂得问题，还可以及时提交 issue，作者回复也十分及时。</p>
<p>如果你不想过于折腾，那么你完成上面的步骤之后，也可以直接采用我的博客源代码，然后把里边的个人配置改一下就 ok 了，我的博客源码地址：<a href="https://github.com/cunyu1943/hexo-theme-matery-personal" title="cunyu1943/hexo-theme-matery-personal" target="_blank" rel="noopener noreferrer">hexo-theme-matery-personal</a></p>
<p>大家直接下载下来，然后把 <code>node_modules.zip</code> 进行解压，然后修改其中的部分配置（也就是你的 Github、网名啥的呀个人信息），主要是修改根目录下的 <code>_config.yml</code> 和 <code>_config.hexo-theme-matery.yml</code>，然后就可以直接写博客了。当然，前提是你把环境啥的都搭建好了。</p>
<p>PS：我对于配置文件中的某些关键信息进行了隐藏，比如 <code>gitalk</code>、<code>gitment</code>、<code>Valine</code>、<code>baiduAnalytics</code> 等，这些需要你自己去注册并获取自己的信息，请记得修改，否则可能导致失败。</p>
<h2> 总结</h2>
<p>至此，我们的博客就搭建完成了，是不是很简单，赶紧去试试吧！</p>
<p>对于文中不清楚的地方，欢迎留言，我会在看到的第一时间回复你！</p>
]]></content>
    <category term="博客搭建"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">博客搭建</title>
    <id>https://cunyu1943.github.io/tutorial/blog-series/</id>
    <link href="https://cunyu1943.github.io/tutorial/blog-series/"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">网站访问太慢，不妨试试这些 CDN</title>
    <id>https://cunyu1943.github.io/tutorial/dev-series/20220729-cdn.html</id>
    <link href="https://cunyu1943.github.io/tutorial/dev-series/20220729-cdn.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 网站访问太慢，不妨试试这些 CDN</h1>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>原文：<a href="https://mp.weixin.qq.com/s/WDOc5kI0jVtsbxgWwCoJkQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/WDOc5kI0jVtsbxgWwCoJkQ</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 网站访问太慢，不妨试试这些 CDN</h1>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>原文：<a href="https://mp.weixin.qq.com/s/WDOc5kI0jVtsbxgWwCoJkQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/WDOc5kI0jVtsbxgWwCoJkQ</a></p>
</div>
<h2> 前言</h2>
<p>前端开发时，为了让网站的资源快速响应，提高网站的响应速度，我们通常会使用到 CDN。CDN 又叫做内容分发网络，原理是将服务内容分发到全网加速节点，让用户优先从最近的服务器节点上获取内容，从而加速网站访问速度。大多服务商，比如阿里云、腾讯云、又拍云、七牛云等的 CDN 都是按量收费的，但也有一些服务商体用了免费的 CDN 服务。今天就来看看，我从网上给大家找到的一些免费可用的 CDN！</p>
<h2> <a href="http://cdnjs.com" target="_blank" rel="noopener noreferrer">cdnjs.com</a></h2>
<figure><figcaption></figcaption></figure>
<ul>
<li>官网：<a href="https://cdnjs.com/" target="_blank" rel="noopener noreferrer">https://cdnjs.com/</a></li>
</ul>
<p>作为全球最为著名的开源 CDN 库，想必每个从事前端的工作的小伙伴都对他有所了解吧。该网站使用 <code>CloudFlare</code> 分发，如果你是在国外使用，那速度没的说，嗖嗖的。不过要是在国内，那还是优先考虑下其他的吧，因为它在国内访问时实在是太慢了！</p>
<h2> 字节跳动</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li>官网：<a href="http://cdn.bytedance.com/" target="_blank" rel="noopener noreferrer">http://cdn.bytedance.com/</a></li>
</ul>
<p>由国内字节跳动公司所出品的公共库，同步 <code>cdnjs.com</code>，但有时候可能针对部分库未及时更新到最新版本，需要注意这一点，否则在使用时可能会导致一些莫名的错误。</p>
<h2> jsDelivr</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li>官网：<a href="https://www.jsdelivr.com/" target="_blank" rel="noopener noreferrer">https://www.jsdelivr.com/</a></li>
</ul>
<p>jsDelivr 是一个免费开源的 CDN 解决方案，用于帮助开发者和站长。包含 JavaScript 库、jQuery 插件、CSS 框架、字体等等 Web 上常用的静态资源。想必这个 CDN 大家都不会陌生吧，没准儿在看博客的各位就一直在用着它。</p>
<p>当然，除了以上作用之外，它还可以作为我们图床的加速器，这里不用说，想必许多作者可能都搭配着 Github + jsDelivr 搭建了自己的图床吧。</p>
<h2> UNPKG</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li>官网：<a href="https://unpkg.com/" target="_blank" rel="noopener noreferrer">https://unpkg.com/</a></li>
</ul>
<p>unpkg 是一个快速的全球内容交付网络，适用于 npm 中的所有内容。通过使用它，能够使用以下类似的 URL 就能快速轻松地从任何包加载任何文件！</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> BootCDN</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li>官网：<a href="https://www.bootcdn.cn/" target="_blank" rel="noopener noreferrer">https://www.bootcdn.cn/</a></li>
</ul>
<p>BootCDN 是极兔云联合 Bootstrap 中文网共同支持并维护的前端开源项目免费 CDN 服务，致力于为 Bootstrap、jQuery、React、Vue.js 等优秀的前端开源项目提供稳定、快速的免费 CDN 加速服务。BootCDN 所收录的开源项目主要同步于 cdnjs 开源项目仓库，截止文章写作时共收录了 <strong>4256</strong> 个前端开源项目。而且自 2013 年以来已经累计为仅百万网站提供稳定可靠的免费 CDN 加速服务，可以说是相当靠谱了！</p>
<h2> 75 CDN</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li>官网：<a href="https://cdn.baomitu.com" target="_blank" rel="noopener noreferrer">https://cdn.baomitu.com</a></li>
</ul>
<p>谐音于奇舞，是由 360 前端奇舞团支持并维护的开源项目免费 CDN 服务，支持 HTTPS 和 HTTP/2，囊括了上千个前端资源库和 Google 字体库。而且是首个支持 HTTP/2 的 CDN 服务，共收录了 4275 个开源项目，均同步于 cdnjs！</p>
<h2> Staticfile CDN</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li>官网：<a href="https://staticfile.org/" target="_blank" rel="noopener noreferrer">https://staticfile.org/</a></li>
</ul>
<p>这是一个免费、快速、开放的 CDN 服务。你可能没听过这个 CDN，不过没关系，它背后的双引擎：七牛云和掘金想必你不会陌生吧。该网站由七牛云提供 CDN 加速，由技术社区掘金支持。</p>
<p>网站的目标是提供这样一个仓库，让它尽可能全面收录优秀的开源库，并免费为之提供 CDN 加速服务，使之有更好的访问速度和稳定的环境。同时，也提供开源库源接入的入口，让所有人都能够提交开源库，包括 JavaScript、CSS、图片和 swf 等静态文件。</p>
<h2> 总结</h2>
<p>以上就是今天分享的所有内容了，如果你正好在开发你的个人网站，但是又苦于响应速度太慢，不妨去试试使用这些 CDN，看看会不会加速网站响应速度呢？</p>
]]></content>
    <category term="开发工具"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">计算机专业涨薪必备的几个网站</title>
    <id>https://cunyu1943.github.io/tutorial/dev-series/20220731-exercise-websites.html</id>
    <link href="https://cunyu1943.github.io/tutorial/dev-series/20220731-exercise-websites.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 计算机专业涨薪必备的几个网站</h1>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>原文：<a href="https://mp.weixin.qq.com/s/GGoYITwL0Symiqbi257kvA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/GGoYITwL0Symiqbi257kvA</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 计算机专业涨薪必备的几个网站</h1>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>原文：<a href="https://mp.weixin.qq.com/s/GGoYITwL0Symiqbi257kvA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/GGoYITwL0Symiqbi257kvA</a></p>
</div>
<h2> 前言</h2>
<p>刚学习编程时，你是不是很烦恼该去哪儿找找题目来练习下，看看自己学的怎么样。有或者在找工作时，需要准备面试，但是又不知道该去哪儿刷题？针对这个情况，今天我就来给大家分享几个可以在线练习算法和面试题的网站，为大家找工作助力！</p>
<h2> PTA</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://pintia.cn/" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<p>程序设计类实验辅助教学平台，由 7594 位来自 889 高校老师共同创建，囊括了 215679 道高质量题目，而且截止本文写作时已有 3137414 位注册用户。不过里边主要是针对 C、C++ 语言来进行答题，关于更多语言答题，还在进一步扩展中。<br>
如果你在学习 C/C++ 语言，那么不妨进入他们，和各个高校的学子一起在线拼题吧。</p>
<h2> LeetCode 美国站</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://leetcode.com/" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<p>全球极客挚爱的技术成长平台，与其说国内在用，还不如说是因为国外一线科技公司如谷歌、评估、Meta 等公司都在这里选拔人才，所以才引入的国内。如果的英语能力还 OK，那么强烈推荐你来这里练习算法，和来自世界各地的程序员们 Battle 一下，谁才是王者！</p>
<h2> LeetCode 中国站</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://leetcode.cn/" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<p>当然了，除了美国站，LeetCode 还有中国站，相当于将美国站的内容翻译后搬运过来，但是又在此基础上进一步扩展了业务，加入了许多付费课程。如果你对自己的英语实在不自信，那么这里也不失为一个好去处。</p>
<h2> 牛客网</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://www.nowcoder.com/" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<p>牛客网是一个集笔面试系统、题库、课程教育、社群交流、招聘内推于一体的招聘类网站。牛客向企业提供校园招聘&amp;技术人才招聘一站式解决方案服务，主要包括招聘渠道服务招聘SaaS工具服务（笔、面试，招聘传播服务（技术竞赛广告、线上招聘专场、牛客职播）等。<br>
除此之外，牛客网题库中还包含了几万道题目，内容覆盖笔试题解析、面试技巧和机器学习等。<br>
如果你正在准备校招或者准备换工作，那么强烈推荐你多去逛逛这个网站，不管是刷题也好，还是看看经验贴，没准儿面试的时候你就会在牛客进行。</p>
<h2> 炼码</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://www.lintcode.com/" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<p>通过在线实操的方式，提升你的编程能力，从而轻松斩获名企 Offer。<br>
这里不仅有实操题目，还有各种精选题目集，更有针对热门编程语言如 Python、Java、SQL 等的学习教程，更有码力评测栏目，快来试试你的码力处于什么段位吧！</p>
<h2> 赛码</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://www.acmcoder.com/" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<p>一个免费在线考试系统、在线面试系统，稳定专业且易用。里边汇聚了腾讯、阿里、字节跳动、百度、京东、小米、华为等一线互联网的真题，如果你参加过校招，那么你肯定不会陌生这个网站，因为会有好多公司都会选择在这里进行笔试。</p>
<h2> 百面网</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="http://www.100mian.com/" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<p>IT 公司面试神器，这里不仅提供了 300 本计算机编程经典书籍免费下载，还有针对互联网各个岗位的面试题，如果你也刚好需要找工作，不妨来这里看看经验和面试题。</p>
<h2> hihoCoder</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="http://hihocoder.com/" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<p>通过高水平的程序设计比赛提升编程水平，得到名企offer。致力于成为编程者与企业之间交流沟通的桥梁，同时也努力为编程爱好者提供提高自身编程水平的场所。</p>
<h2> 7 月在线</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://www.julyedu.com/question/index" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<p>一站式刷遍目前国内各大互联网公司人工智能笔试面试题，涵盖了所有考点，解析精准详尽。<br>
站中主要分为笔试练习、面试大题、在线编程三大模块，而各个模块下又分别设置了：人工智能、数据结构与算法、数理逻辑、编程开发、计算机基础等子模块，可以说是非常详细了。</p>
<h2> N 诺</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://noobdream.com/" target="_blank" rel="noopener noreferrer">地址</a></li>
</ul>
<p>如果你有计算机学习考研方面的打算，那么推荐你一定要上去看看，这可以说是计算机学习考研的人所必备的神器。里面提供了许多免费的的学习资源。<br>
网站设有有数学、英语、政治、C 语言、数据结构、操作系统、网络、组成原理、数据库等课程的专区，还有上岸的名校大佬来这里分享自己的考研经验。如果你苦于找考研方面的经验、试题等资料，那么不妨来这里看看吧！</p>
<h2> 总结</h2>
<p>以上就是我在日常冲浪中发现的几个刷题网站了，基本上是涵盖了学习和工作过程中的需求吧。而且针对不同需要可以选择不同的网站进去学习，如果你要考研学习，那么可以去看看 N 诺；如果你只是为了提升算法，那么 LeetCode 可能更适合你；而如果你要求职找工作，那么牛客网、赛码网等常见面试网站就可以多逛逛；而如果你是想找人工智能方面的面试题，那么不妨去七月在线瞅一眼。</p>
]]></content>
    <category term="开发工具"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">黑客大神也常用的一些 CMD 命令</title>
    <id>https://cunyu1943.github.io/tutorial/dev-series/20221127-cmd.html</id>
    <link href="https://cunyu1943.github.io/tutorial/dev-series/20221127-cmd.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 黑客大神也常用的一些 CMD 命令</h1>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>原文：<a href="https://mp.weixin.qq.com/s/LAZY7sMiwzNwimTpmlh0rw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/LAZY7sMiwzNwimTpmlh0rw</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 黑客大神也常用的一些 CMD 命令</h1>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>原文：<a href="https://mp.weixin.qq.com/s/LAZY7sMiwzNwimTpmlh0rw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/LAZY7sMiwzNwimTpmlh0rw</a></p>
</div>
<h2> 前言</h2>
<p>作为一个程序员，可能更多的是在 <code>Linux</code> 中使用命令来操作。但在日常使用 <code>Windows</code> 的过程中，或多或少会使用到命令提示符窗口，也就是 <code>Windows</code> 中的 <code>CMD</code>。这个时候，掌握一些常用的命令就尤为重要了，一方面方便自己使用，另一方面，也方便给电脑小白露一手 👀。那接下来就来看看，<code>CMD</code> 中最常用的一些命令。</p>
<h2> 如何打开命令提示符窗口</h2>
<p>打开的方式很多，这里例举常用的 <code>5</code> 种。</p>
<ol>
<li><strong>方法 1</strong></li>
</ol>
<p><code>Win + R</code> 快捷键打开运行，输入 <code>cmd</code> 后回车。</p>
<ol start="2">
<li><strong>方法 2</strong></li>
</ol>
<p>依次打开开始菜单 -&gt; <code>Windows</code> 系统（<code>Windows</code> 工具） -&gt; 命令提示符。</p>
<ol start="3">
<li><strong>方法 3</strong></li>
</ol>
<p>打开资源管理器，然后在地址栏输入 <code>cmd</code> 后回车。</p>
<ol start="4">
<li><strong>方法 4</strong></li>
</ol>
<p>鼠标右键点击开始菜单的 <code>Win</code> 图标，找到命令提示符（终端）并进入。</p>
<ol start="5">
<li><strong>方法 5</strong></li>
</ol>
<p>在任务栏中的搜索栏中搜索 <code>cmd</code> 并打开。</p>
<h2> 常用命令</h2>
<h3> 目录操作</h3>
<ol>
<li><strong>磁盘切换</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如 <code>D:</code> 就代码进入 <code>D</code> 盘。</p>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li><strong>进入指定目录</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="3">
<li><strong>返回磁盘根目录</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="4">
<li><strong>返回上级目录</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="5">
<li><strong>新建目录</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="6">
<li><strong>查看当前目录中内容</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="7">
<li><strong>查看指定目录结构</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="8">
<li><strong>删除目录</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="9">
<li><strong>复制文件</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="10">
<li><strong>删除文件</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 开关机操作</h3>
<ol>
<li><strong>关机</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li><strong>重启</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li><strong>注销</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4">
<li><strong>休眠</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5">
<li><strong>定时关机</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="6">
<li><strong>取消关机</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 网络操作</h3>
<ol>
<li><strong>测试网络延迟和丢包率</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="2">
<li><strong>查看本机 ip 地址</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="3">
<li><strong>清除本地 DNS 缓存</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="4">
<li><strong>路由追踪</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 进程/服务操作</h3>
<ol>
<li><strong>查看当前运行的进程</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="2">
<li><strong>运行指定程序或命令</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li><strong>按名称结束进程</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="4">
<li><strong>按 PID 结束进程</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="5">
<li><strong>查看当前运行的服务</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="6">
<li><strong>启动指定服务</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<ol start="7">
<li><strong>停止指定服务</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h3> 其他操作</h3>
<ol>
<li><strong>清除屏幕</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><br>
</p>
<ol start="2">
<li><strong>退出</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 总结</h2>
<p>以上就是今天所带来的 <code>Windows</code> 中常用的 <code>CMD</code> 命令了，对付日常使用完全够了，更多的一些命令用到的频率较低，可以在有需要的时候再去具体搜索。</p>
<p>如果觉得对各位朋友有用的话，不妨点个赞再走呀 ~</p>
]]></content>
    <category term="开发工具"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">如何在浏览器中安装插件</title>
    <id>https://cunyu1943.github.io/tutorial/dev-series/20230710-browser-plugin-install.html</id>
    <link href="https://cunyu1943.github.io/tutorial/dev-series/20230710-browser-plugin-install.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 如何在浏览器中安装插件</h1>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>原文：<a href="https://mp.weixin.qq.com/s/KNiUsB_yMNjjmKXrcSjrXg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/KNiUsB_yMNjjmKXrcSjrXg</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 如何在浏览器中安装插件</h1>
<div class="hint-container info">
<p class="hint-container-title">相关信息</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">提示</p>
<p>原文：<a href="https://mp.weixin.qq.com/s/KNiUsB_yMNjjmKXrcSjrXg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/KNiUsB_yMNjjmKXrcSjrXg</a></p>
</div>
<h2> 一、前言</h2>
<p>在我的<a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzIyNTg2MjkzNw==&amp;action=getalbum&amp;album_id=2884869589325889537&amp;scene=173&amp;from_msgid=2247498110&amp;from_itemidx=1&amp;count=3&amp;nolastread=1#wechat_redirect" target="_blank" rel="noopener noreferrer">好物周刊</a>系列文章中，想必看过的朋友都知道有一类叫做 <strong>插件</strong> 的分享。可能有的朋友不是很清楚，这个插件到底是什么，而又该如何安装和使用这些插件。于是，就有了这篇文章。以多图形式，简单地教大家如何使用这些插件。</p>
<p>所谓插件，肯定是需要有一个载体的，否则它往哪儿安装呢？而这个载体，就是我们日常工作生活中用得最多的浏览器。</p>
<p>声明：以下教程均基于 <code>Chrome</code> 最新版，但不用担心，该教程还适用于 <code>Edge</code> 浏览器、<code>QQ</code> 浏览器、搜狗浏览器等主流浏览器。</p>
<h2> 二、安装</h2>
<p>这里主要有三种方式，分别是：</p>
<ol>
<li><strong>在线安装</strong></li>
<li><strong>拖动安装</strong></li>
<li><strong>解压安装</strong></li>
</ol>
<p>下面就分别来看看，这三种方式都是怎么安装的。</p>
<h3> 1、在线安装</h3>
<p>在线安装很简单，只需要打开 <code>Chrome</code> 的在线应用商店，然后挑选你想要安装的插件即可。打开在线应用商店的方式也很简单，入口在浏览器登录后的头像右边菜单栏中的的扩展程序 -&gt; 访问 <code>Chrome</code> 应用商店。</p>
<figure><figcaption></figcaption></figure>
<p>不过，大多数人都会卡在这一步，正常情况下你是打不开这个 <code>Chrome</code> 应用商店的。原因也很简单，谷歌在国内被屏蔽了，所以打不开很正常。要想能够正常访问，那就需要靠你聪明的小脑袋瓜了。出于某些原因，这里我也不展开了。</p>
<figure><figcaption></figcaption></figure>
<p>所以就没有办法在线安装了吗？当然不是，既然此路不同，那我们可以换一种方式。</p>
<p>不知道大家知不知道微软推出的 <code>Edge</code> 浏览器，如果还不知道的朋友，推荐大家使用它。该浏览器其实也可以看做是另一个版本的 <code>Chrome</code>，因为它俩都是基于 <code>Chromium</code> 开发而来的。</p>
<p>而最大的不同就在于，<code>Edge</code> 浏览器的应用商店是可以直接访问的，这一点对于大家就很友好了。虽然插件不如 <code>Chrome</code> 应用商店丰富，但是至少可用了。而且它俩之间的插件是通用的，如果一个插件能在 <code>Chrome</code> 中使用，那么它就一定能在 <code>Edge</code> 中使用。</p>
<blockquote>
<ul>
<li><strong>Edge 在线商店</strong>：<a href="https://microsoftedge.microsoft.com/addons/Microsoft-Edge-Extensions-Home" target="_blank" rel="noopener noreferrer">https://microsoftedge.microsoft.com/addons/Microsoft-Edge-Extensions-Home</a></li>
<li><strong>Chrome 在线商店</strong>：<a href="https://chrome.google.com/webstore/category/extensions?utm_source=ext_app_menu" target="_blank" rel="noopener noreferrer">https://chrome.google.com/webstore/category/extensions?utm_source=ext_app_menu</a></li>
</ul>
</blockquote>
<p>打开在线商店之后，我们就可以挑选自己想要安装的插件了。比如我这里以 <code>AdGuard</code> 为例：</p>
<ol>
<li>首先输入关键词搜索</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>
<p>进入具体插件的详细页</p>
</li>
<li>
<p>点击插件详细页右上方的 <strong>添加至 Chrome</strong> 即可进行安装，因为我这里已经安装过了，所以显示的是 <strong>从 Chrome 中删除</strong></p>
</li>
</ol>
<figure><figcaption></figcaption></figure>
<h3> 2、拖动安装</h3>
<p>如果不能在线安装，那么我们可以从网上找资源，把插件给下载下来后安装。</p>
<p>下载后的插件安装文件正常是以 <code>.crx</code> 为后缀，然后我们就可以去进行拖动安装了。</p>
<p>不过在那之前，需要先把浏览器扩展程序中的开发者模式打开。</p>
<p>入口：扩展程序 -&gt; 管理扩展程序，然后打开右上方的开发者模式开关即可。</p>
<figure><figcaption></figcaption></figure>
<p>最后，将我们下载的插件安装包拖动到浏览器，浏览器会弹窗提示是否要添加插件，点击 <strong>添加扩展程序</strong> 即可。</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h3> 3、解压安装</h3>
<p>正常情况下，大多数插件都能通过拖动的方式进行安装。</p>
<p>不过也有特殊情况，如果你在拖动安装过程中，浏览器提示以下错误：</p>
<blockquote>
<p><strong>程序包无效 CRX_HEADER_INVALID</strong></p>
</blockquote>
<figure><figcaption></figcaption></figure>
<p>此时说明我们想安装的插件已经长时间未更新了，而且有可能已经从 <code>Chrome</code> 应用商店下架了。此时如果你还想要装上该插件来看看是否还能用，那么也行，你可以通过以下方式来进行安装。</p>
<ol>
<li>下载插件安装包，得到后缀为 <code>.crx</code> 的文件</li>
<li>将插件安装包的后缀从 <code>.crx</code> 改为 <code>.zip</code></li>
<li>将 <code>.zip</code> 的安装包用解压软件进行解压</li>
<li>将解压后的文件夹拖动到 <strong>管理扩展程序页</strong> 即可进行安装</li>
</ol>
<figure><figcaption></figcaption></figure>
<p>不过需要注意，通过解压安装的插件，相比于其他正常安装的插件，会在 <code>logo</code> 右下角多一个红色框，而且还会有 <strong>错误</strong> 的标识，这些都不影响插件的正常使用，忽略就好了。</p>
<figure><figcaption></figcaption></figure>
<h2> 三、总结</h2>
<p>以上就是在浏览器中安装插件的 3 种方式了，屏幕前的你是否学会了呢？</p>
<p>如果看完了本篇文章，你还是无法成功安装插件，那么可以留言，或者添加我微信发送报错截图，我会在工作之余第一时间回复哦！</p>
]]></content>
    <category term="开发工具"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">开发工具</title>
    <id>https://cunyu1943.github.io/tutorial/dev-series/</id>
    <link href="https://cunyu1943.github.io/tutorial/dev-series/"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">10 个神奇的网站，助力带薪摸鱼</title>
    <id>https://cunyu1943.github.io/tutorial/efficiency-series/20220729-10-amazing-website.html</id>
    <link href="https://cunyu1943.github.io/tutorial/efficiency-series/20220729-10-amazing-website.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 10 个神奇的网站，助力带薪摸鱼</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/X4rj6RHMzr3TeYrS0Nj-Dg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/X4rj6RHMzr3TeYrS0Nj-Dg</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 10 个神奇的网站，助力带薪摸鱼</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/X4rj6RHMzr3TeYrS0Nj-Dg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/X4rj6RHMzr3TeYrS0Nj-Dg</a></p>
</div>
<h2> 前言</h2>
<p>在日常工作中，为了提高工作时的效率，我常常会在闲暇时光去网上冲冲浪，寻找那些能够给我工作工作带来帮助的网站或者 <code>APP</code>。而随着时间的推移，我的收藏夹藏货越来越满了。秉承着独乐乐不如众乐乐，就想着随便挑几个分享出来，让大家也开心开心！</p>
<h2> docsmall</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://docsmall.com/" target="_blank" rel="noopener noreferrer">链接</a></li>
</ul>
<p>docsmall，这是一个神奇的网站。通过它，你不仅可以实现图片压缩、<code>Gif</code> 压缩等图片操作，同时你还能进行 <code>PDF</code> 压缩、<code>PDF</code> 合并、<code>PDF</code> 分割，让我们操作 <code>PDF</code> 更加方便。听了这么多，你是不是觉得得开个会员才能用吧。答案是：<code>No</code>，这个网站它完全免费！！如果你有这方面的需求，那就赶紧去试试吧！</p>
<h2> 白描网页版</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://web.baimiaoapp.com/" target="_blank" rel="noopener noreferrer">链接</a></li>
</ul>
<p>有时候，我们想要提取图片中的文字、表格、公式等等，又或者想要将文件扫描成 <code>PDF</code> 保存，那这个工具你觉得不能错过！虽然不能一直白嫖，但如果只是偶尔应急使用，完全是足够的。这么强大的工具，不得赶紧取用起来？</p>
<h2> DeepL 翻译器</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://www.deepl.com/translator" target="_blank" rel="noopener noreferrer">链接</a></li>
</ul>
<p>支持多达 28 种语言的翻译，而且还支持 <code>PDF</code>、<code>Word</code>、<code>PPT</code> 等文件翻译！</p>
<h2> BigJpg</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://bigjpg.com/" target="_blank" rel="noopener noreferrer">链接</a></li>
</ul>
<p>AI 人工智能图片放大！使用最新的人工智能深度学习技术，将图片中的噪点和锯齿部分进行补充，从而实现图片的无损放大。</p>
<h2> unDraw</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://undraw.co/illustrations" target="_blank" rel="noopener noreferrer">链接</a></li>
</ul>
<p>免费可商用高清矢量图下载，还支持编辑！</p>
<h2> IconFont</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="http://www.iconfont.cn/" target="_blank" rel="noopener noreferrer">链接</a></li>
</ul>
<p>阿里巴巴出品的矢量图标库，汇聚了大概 20479523 个图标，可以说是十分齐全了，平常网站的图标我都是来这里找。</p>
<h2> IconPark</h2>
<figure><figcaption>img</figcaption></figure>
<ul>
<li><a href="https://iconpark.oceanengine.com/home" target="_blank" rel="noopener noreferrer">链接</a></li>
</ul>
<p>隔壁有的我也要有，字节跳动出品的免费资源库，丰富多彩的资源库免费使用，汇聚了 2900+ 基础图标，更有 29 中图标分类，提供了更多的选择，对标阿里的 IconFont！</p>
<h2> Font Awesome</h2>
<figure><figcaption>img</figcaption></figure>
<ul>
<li><a href="https://fontawesome.com/" target="_blank" rel="noopener noreferrer">链接</a></li>
</ul>
<p>跟字节的 IconPark 和阿里的 IconFont 一样，是一个图标资源库！</p>
<h2> 第 1 PPT</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://www.1ppt.com/" target="_blank" rel="noopener noreferrer">链接</a></li>
</ul>
<p>这里提供了各种海量 PPT 素材，幻灯片背景图片，专注于 PPT 模板免费下载！</p>
<h2> 优品 PPT</h2>
<figure><figcaption></figcaption></figure>
<ul>
<li><a href="https://www.ypppt.com/moban/" target="_blank" rel="noopener noreferrer">链接</a></li>
</ul>
<p>这里有各种 <code>PPT</code> 模板、背景、图表、素材、教程、课件等资源下载，除开第 1 PPT，我也经常来这里找模板。</p>
<h2> 总结</h2>
<p>以上就是今天给大家推荐的 10 款我在日常工作学习中经常用到的效率神器了，如果你也想提高你的效率，那就不妨也来试试这些网站吧！</p>
]]></content>
    <category term="效率工具"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">Emoji 表情大作战</title>
    <id>https://cunyu1943.github.io/tutorial/efficiency-series/20220729-emoji.html</id>
    <link href="https://cunyu1943.github.io/tutorial/efficiency-series/20220729-emoji.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> Emoji 表情大作战</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/TZMiXLTsHqVl3VMp2Dcdlg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/TZMiXLTsHqVl3VMp2Dcdlg</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> Emoji 表情大作战</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/TZMiXLTsHqVl3VMp2Dcdlg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/TZMiXLTsHqVl3VMp2Dcdlg</a></p>
</div>
<h2> 前言</h2>
<p>在网上冲浪的时候，相信大家随处都能看见各种各样的 <code>emoji</code> 标签符号，虽然在微信、<code>QQ</code> 等聊天工具中也提供了许多 <code>emoji</code> 表情包，但是除此之外，你都知道还有哪些地方可以获取到这些可可爱爱的表情符号呢？</p>
<p>今天就来看看，给大家推荐几个可以免费获取 <code>emoji</code> 表情符号的神奇网站！</p>
<h2> 网站推荐</h2>
<h3> EmojiAll</h3>
<ul>
<li><a href="https://www.emojiall.com/zh-hans" target="_blank" rel="noopener noreferrer">链接</a></li>
</ul>
<figure><figcaption></figcaption></figure>
<p>首先是 <code>Emoji</code> 中文网，这里不仅提供了各个 <code>Emoji</code> 表情符号的含义，是一个全面的 <code>Emoji</code> 字典。除此之外，还支持各种赋值粘贴各种表情符号，更有 <code>Emoji</code> 游戏等你来玩！</p>
<p>最最厉害的是，它还支持 <code>Emoji</code> 和汉字之间的互相转换！</p>
<figure><figcaption></figcaption></figure>
<p>你不仅可以将汉字转换为 <code>Emoji</code>，也可以将 <code>Emoji</code> 转换为汉字。</p>
<p>比如我在网站中搜索了 👅🐶，网站则给出了对应的汉字 -&gt; 舔狗（手动狗头保命），是不是很刺激！</p>
<figure><figcaption></figcaption></figure>
<p>再来搜索一个“真滴牛逼”，你看，它也给出了相应的内容，是不是很好玩！</p>
<figure><figcaption></figcaption></figure>
<h3> Emojipedia</h3>
<ul>
<li><a href="https://emojipedia.org/" target="_blank" rel="noopener noreferrer">链接</a></li>
</ul>
<figure><figcaption></figcaption></figure>
<p>站如其名，<code>Emoji</code> 百科大全，这里有各个版本的 <code>Emoji</code>，只要在搜索框中搜索表情符号的关键词，就能给你搜出想要的答案！</p>
<p>比如我们搜索 <code>cow</code>，就会给出牛相关的表情符号。</p>
<figure><figcaption></figcaption></figure>
<p>但是需要注意，该网站只支持英文搜索，不支持中文搜索，如果你直接搜索“牛”这个关键字，那么给出的内容就差别较大了。</p>
<figure><figcaption></figcaption></figure>
<h3> Get Emoji</h3>
<ul>
<li><a href="https://getemoji.com/" target="_blank" rel="noopener noreferrer">链接</a></li>
</ul>
<figure><figcaption></figcaption></figure>
<p>这个网站就比较直接了，直接将各个表情符号进行了分类，然后只要在对应类别中去找我们需要的标签符号即可。当然了，网站也是支持直接搜索的，不过同样的，网站只支持英文搜索。</p>
<h3> Emoji Homepage</h3>
<ul>
<li><a href="http://emojihomepage.com/" target="_blank" rel="noopener noreferrer">链接</a></li>
</ul>
<figure><figcaption></figcaption></figure>
<p>同样的，给出了各个表情符号，你可以通过点击最上面给出的小标签跳转不同类别的表情符号集合，然后复制它到你的聊天窗口就可以使用它了！</p>
<p>当然，你也可以通过关键字搜索表情符号。</p>
<p>同样我们搜索 <code>cow</code>，可以看到这里给出的内容比 <code>Emojipedia</code> 更加全面！</p>
<figure><figcaption></figcaption></figure>
<h3> Emoji 列表</h3>
<ul>
<li><a href="https://tw.piliapp.com/emoji/list/" target="_blank" rel="noopener noreferrer">链接</a></li>
</ul>
<figure><figcaption></figcaption></figure>
<p>支持所有的 <code>IOS</code>、<code>Android 4.4+</code> 和 <code>Windows 8.1+</code> 系统，这里共分为 8 个类别，共含有 1800 个表情符号。我们可以通过点击下面不同类别中的表情符号，它就会自动到最上方的框中，然后点击右方复制按钮即可实现赋值！</p>
<p>同样的，该网站也支持在线搜索，不过不同于上面的网站，该网站支持中文搜索。而且通过中文搜索的结果比英文搜索结果更精确全面！</p>
<figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>以上就是今天的推荐了，希望对大家有用呀！</p>
<p>除此之外，说一点题外话，好像现在大家写博客之类的都挺喜欢插入各种表情包，之前也尝试过写过几篇文章，里边加了些表情包，但始终觉得不适合我，于是就放弃了。作为我个人来讲，觉得还是能避免就尽量避免。当然，关于这一点，大家都可以有不同的看法。你可以不认同我，但我仍然坚</p>
]]></content>
    <category term="效率工具"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">如何用 Markdown 写出好看的文章</title>
    <id>https://cunyu1943.github.io/tutorial/efficiency-series/20230425-markdown-tutorial.html</id>
    <link href="https://cunyu1943.github.io/tutorial/efficiency-series/20230425-markdown-tutorial.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 如何用 Markdown 写出好看的文章</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/qIptV_MEGjsUjw_zqvGn_A" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/qIptV_MEGjsUjw_zqvGn_A</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 如何用 Markdown 写出好看的文章</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/qIptV_MEGjsUjw_zqvGn_A" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/qIptV_MEGjsUjw_zqvGn_A</a></p>
</div>
<h2> 简介</h2>
<h3> 什么是 Markdown</h3>
<p>欢迎来到这篇 <code>Markdown</code> 语法教程！<code>Markdown</code> 是一种轻量级标记语言，很多写作者喜欢使用它来编写文档、博客、笔记等。<code>Markdown</code> 语法简单易懂、规范明确，适合快速书写和修改文本。学习 <code>Markdown</code> 语法可以帮助作者更好地组织文本结构、添加格式、插入图片等，让文本更加清晰易读。在这篇教程中，我们将一步步地介绍 <code>Markdown</code> 的基本语法和应用方法，帮助您更快地了解和掌握这种语言。无论您是初学者还是有经验的用户，都可以从这篇教程中获得新的知识和技能，加强你的学习和写作能力。</p>
<h3> Markdown 的优点</h3>
<p>相比于其他格式，<code>Markdown</code> 具有以下优点：</p>
<ul>
<li>语法简洁易学，且功能比纯文本强大</li>
<li>格式转换方便，兼容性强，可读性极好</li>
<li>专注内容写作而不用关注排版样式</li>
<li>能导出 <code>PDF</code>、<code>HTML</code> 等格式的文件</li>
<li>迁移、反复编辑不会导致格式错乱</li>
</ul>
<h3> Markdown 的应用场景</h3>
<p>如果你经常逛 <code>Github</code>，你会发现大多数项目下边都会有一个 <code>README.md</code> 的项目说明文件，而它就是利用 <code>Markdown</code> 来进行编写的。而现在的大多数博客平台如 <code>CSDN</code>、博客园、掘金等，基本都支持 <code>Markdown</code> 格式，如果你有多平台发布文章的需求，那么学会用 <code>Markdown</code> 来编写内容未尝不是一个好的方法。</p>
<p>而且就算微信公众号，我们也可以借助第三方工具来进行排版，比起之前用 <code>Word</code> 来排版的方式省去了很多麻烦，实现一文多发变得更加容易，不用再去调格式适应不同平台。</p>
<h2> 基本语法</h2>
<h3> 标题</h3>
<p>在标题书写时不同数量的 <code>#</code> 对应不同的标题。一到六级标题如下，每多一级则多加一个<code>#</code>号。<strong>注意</strong>：符号和标题内容间的空格不能省略，而且最多支持到六级标题。具体语法格式及实例如下：</p>
<ul>
<li><strong>语法</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><strong>实例</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 列表</h3>
<p>列表又分为 <strong>有序列表</strong> 和 <strong>无序列表</strong>。</p>
<ol>
<li><strong>有序列表</strong></li>
</ol>
<p>有阿拉伯数字及英文句号 <code>.</code> 后加空格后输入内容即可。具体语法格式及实例如下：</p>
<ul>
<li><strong>语法</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><strong>实例</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>无序列表</strong></li>
</ol>
<p>在连线符号 <code>-</code> 后加空格后输入内容即可，具体格式以及实例如下：</p>
<ul>
<li><strong>语法</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><strong>实例</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 粗体</h3>
<p>在需要加粗的内容前后分别用两个 <code>*</code> 将其包围起来，具体格式以及实例如下：</p>
<ul>
<li><strong>语法</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><strong>实例</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 斜体</h3>
<p>和加粗很类似，不过只需要将内容前后分别用一个 <code>*</code> 或者 <code>_</code> 包围起来即可，具体格式以及实例如下：</p>
<ul>
<li><strong>语法</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>实例</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 删除线</h3>
<p>要给内容加上删除线的效果，只需要在内容前后分别用两个 <code>~</code> 将其包围即可，具体格式以及实例如下：</p>
<ul>
<li><strong>语法</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><strong>实例</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 下划线</h3>
<p>Markdown 语法中是不支持下划线的，如果要实现下划线的效果，可以借助 <code>HTML</code> 语法，具体格式以及实例如下：</p>
<ul>
<li><strong>语法</strong></li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><strong>实例</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 分割线</h3>
<p>如果要将不同内容之间插入一条分割线，可以在一行中使用三个及以上减号 <code>-</code> 来建立一个分割线，同时需要在分割线的上面空上一行，具体格式以及实例如下：</p>
<ul>
<li><strong>语法</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>实例</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 引用</h3>
<p>引用的格式是在大于符号 <code>&gt;</code> 后面接上空格以及要引用的内容即可，具体格式以及实例如下：</p>
<ul>
<li><strong>语法</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><strong>实例</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 上下标</h3>
<p>当我们需要写化学公式或者需要标记上下标时，该怎么办呢？<code>Markdown</code> 同样是不支持的，所以仍然需要借助 <code>HTML</code> 的相关语法。</p>
<ul>
<li><strong>语法</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>实例</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 高亮</h3>
<p>高亮语法在有的 <code>Markdown</code> 标准中可能不支持，但在这里也给出其用法，具体格式以及实例如下：</p>
<ul>
<li><strong>语法</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><strong>实例</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 任务列表</h3>
<p>任务列表是我们经常接触到的东西，比如我们的备忘录，完成的事件和未完成事件，要在 <code>Markdown</code> 中实现同样效果，具体格式以及实例如下：</p>
<ul>
<li><strong>语法</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>实例</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 目录</h3>
<p>当我们文章写完之后，想要像 <code>Word</code> 中那样自动生成目录，此时就可以使用 <code>[toc]</code> 单独占一行来实现，但是要注意，有的平台可能不支持该用法，具体格式如下：</p>
<ul>
<li><strong>语法</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><strong>实例</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 表格</h3>
<p>想在 <code>Markdown</code> 中使用表格也很方便，我们可以用 <code>:</code> 来调整表格对齐的方式，具体格式如下：</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 公式</h3>
<p><code>Markdown</code> 支持 <code>LaTeX</code> 语法，可以实现行间公式和独立公式块，公式的写法和 <code>LaTeX</code> 语法一样，具体格式如下</p>
<ul>
<li>行间公式：<code>$ + 公式 + $</code></li>
<li>独立公式块：<code>$$ + 公式 + $$</code></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 代码块</h3>
<p>同公式一样，代码块同样可以分为行间代码块和独立代码块，其区别在于用一个或多个 ` 将其括起来，具体语法及实例如下：</p>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 链接与图片</h3>
<p>链接和图片的唯一区别在于图片需要在最前面加上一个 <code>!</code>，两个具体格式如下：</p>
<ul>
<li><strong>链接</strong>：<code>[链接说明](链接 url)</code></li>
<li><strong>图片</strong>：<code>![图片说明](图片 url)</code></li>
<li><strong>实例</strong></li>
</ul>
<div class="language-markdown line-numbers-mode" data-ext="md"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 工具和资源</h2>
<h3> Markdown 编辑器</h3>
<p>好了，学习了上面的之后，是不是想马上动手试试。既然如此，那就再给大家推荐几款编辑器，让你的效率更上一层楼，<code>PS</code>：<strong>多学习快捷键使用，效果更佳哦！</strong></p>
<ol>
<li><a href="https://www.typora.io/" target="_blank" rel="noopener noreferrer">Typora</a></li>
</ol>
<p>跨平台多功能编辑器，支持导出 <code>PDF</code>、<code>HTML</code> 等格式，不过目前已经开始收费，89 软妹币即可永久授权 3 台设备。</p>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li><a href="https://marktext.app/" target="_blank" rel="noopener noreferrer">MarkText</a></li>
</ol>
<p>跨平台开源 <code>Markdown</code> 编辑器，支持斗图哦！</p>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li><a href="https://code.visualstudio.com/" target="_blank" rel="noopener noreferrer">Visual Studio Code</a></li>
</ol>
<p>微软出品，相信这是许多程序员电脑上必装的一个软件了。支持超多插件，需要插件使用效果更佳哦！</p>
<figure><figcaption></figcaption></figure>
<h3> Markdown 插件</h3>
<p>说到插件，就不得不推荐下浏览器插件 <a href="https://markdown-here.com/get.html" target="_blank" rel="noopener noreferrer">Markdown Here</a> 了。</p>
<p>通过该插件，可以用 <code>Markdown</code> 来写一封漂亮的电子邮件。通常邮件都是没有格式的，通过该插件，可以实现将 <code>Markdown</code> 语法的邮件转换为想要的效果。</p>
<p>而使用步骤也很简单：</p>
<ol>
<li>在邮件客户端的富文本编辑器中编写 <code>Markdown</code> 格式的邮件内容。</li>
<li>接着在编辑区右键后选择 <code>Markdown 转换</code> 即可。</li>
</ol>
<figure><figcaption></figcaption></figure>
<h3> Markdown 在线编辑器和转换器</h3>
<ol>
<li><a href="https://editor.mdnice.com/" target="_blank" rel="noopener noreferrer">Markdown Nice</a></li>
</ol>
<p>支持自定义样式的 <code>Markdown</code> 编辑器，支持微信公众号、知乎和稀土掘金，也是我在日常运营公众号时使用最多的转换器之一了。</p>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener noreferrer">Cmd Markdown</a></li>
</ol>
<p>作业部落出品的在线 <code>Markdown</code> 编辑阅读器，支持以下功能：</p>
<ul>
<li>整理知识，学习笔记</li>
<li>发布日记，杂文，所见所想</li>
<li>撰写发布技术文稿（代码支持）</li>
<li>撰写发布学术论文（<code>LaTeX</code> 公式支持）</li>
</ul>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li><a href="https://doocs.gitee.io/md" target="_blank" rel="noopener noreferrer">微信 Markdown 编辑器</a></li>
</ol>
<p><code>Doocs</code> 开源社区出品的一款高度简洁的微信 <code>Markdown</code> 编辑器。</p>
<figure><figcaption></figcaption></figure>
<h2> 注意事项</h2>
<ol>
<li><code>Markdown</code>兼容<code>HTML</code>相关语法。</li>
<li>对于特殊字符，可以通过转义字符<code>\</code>将其显示出来。</li>
</ol>
<h2> 总结</h2>
<p>总而言之，<code>Markdown</code> 是一种非常实用的文档编辑和网页写作语言，在多种不同的场景中都有着广泛的应用。希望本教程能够帮助初学者快速掌握 <code>Markdown</code> 的基本语法，并在实用中不断深化自己的理解。如果你有任何问题或建议，欢迎给我们留言并共同探讨。让我们一起更好地运用 <code>Markdown</code>，让文档编辑和网页写作更加高效流畅！</p>
]]></content>
    <category term="效率工具"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">效率工具</title>
    <id>https://cunyu1943.github.io/tutorial/efficiency-series/</id>
    <link href="https://cunyu1943.github.io/tutorial/efficiency-series/"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">最新版 IntelliJ IDEA 使用手册</title>
    <id>https://cunyu1943.github.io/tutorial/idea-series/20220202-idea-guide.html</id>
    <link href="https://cunyu1943.github.io/tutorial/idea-series/20220202-idea-guide.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 最新版 IntelliJ IDEA 使用手册</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>因为自己电脑最近实在是太卡了，也一直提示更新，索性就直接重装了个系统。因为需要重装下 IDEA，而现在新版本的 IDEA 和之前的版本还是有很大变化的，所以在这里写一篇博客做个记录，方便自己后续配置，也顺便分享给大家。</p>
<h2> IDEA 的优势</h2>
<p>为什么要使用 <code>IDEA</code> 呢？当然是因为它的强大。总结起来，<code>IDEA</code> 具有以下的主要优势：</p>]]></summary>
    <content type="html"><![CDATA[<h1> 最新版 IntelliJ IDEA 使用手册</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<h2> 前言</h2>
<p>因为自己电脑最近实在是太卡了，也一直提示更新，索性就直接重装了个系统。因为需要重装下 IDEA，而现在新版本的 IDEA 和之前的版本还是有很大变化的，所以在这里写一篇博客做个记录，方便自己后续配置，也顺便分享给大家。</p>
<h2> IDEA 的优势</h2>
<p>为什么要使用 <code>IDEA</code> 呢？当然是因为它的强大。总结起来，<code>IDEA</code> 具有以下的主要优势：</p>
<ol>
<li><strong>功能强大</strong></li>
</ol>
<p>一方面体现在强大的整合能力，<code>IDEA</code>支持集成各种开发过程中的编程框架，最常见的有<code>git</code>、<code>JVM</code>系编程语言、<code>Spring</code> 系产品、移动开发语言框架、前端开发语言。而另一方面，通过集成版本控制系统、对多种编程语言框架的支持，同时无需额外安装插件，带给我们开箱即用的体验。</p>
<ol start="2">
<li><strong>符合人体工程学</strong></li>
</ol>
<p><code>IDEA</code> 的提示功能十分智能，提供了快速地智能代码补全、实时代码分析以及可靠的重构工具。此外 <code>IDAE</code> 的提示功能十分快速、便捷，而且提示范围也十分广泛。</p>
<h2> 准备工作</h2>
<p>既然要安装 <code>IDEA</code>，那么首先需要前往 <code>JetBrains</code> 的官网下载最新版的 <code>IDEA</code>，下载地址如下：</p>
<p><a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noopener noreferrer">https://www.jetbrains.com/idea/download/</a></p>
<figure><figcaption></figcaption></figure>
<p>因为我有旗舰版的账号，所以这里就以旗舰版安装为例，其实社区版的安装也是一样的，只不过里边集成的东西有所不同。所以如果你安装的是社区版，参照此教程也是完全可以的！</p>
<figure><figcaption></figcaption></figure>
<h2> 安装</h2>
<p>好了，完成下载后，我们就可以开始我们的安装过程了！</p>
<ol>
<li>双击我们的安装包之后，来到 <code>IDEA</code> 的欢迎界面，我们此时只需要 <code>Next</code> 即可。</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>接着就是选择我们要安装 <code>IDEA</code> 的位置，它默认的安装位置是 <code>C:\Program Files\JetBrains\IntelliJ IDEA 2021.1.2</code>，这里就是看大家自己的喜好了，你喜欢安在哪儿都可以，但是需要满足它所需要的内存。更加推荐大家安装到自己的非系统盘位置，比如我的安装位置是 <code>D:\SoftInstall\IntelliJ IDEA</code>。</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>选择安装的配置，这里主要选择创建 32 还是 64 位的桌面快捷方式、是否要将其加入到系统 <code>PATH</code> 环境变量、是否关联相关后缀文件等等。可以根据自己的使用习惯来进行选择，以我个人来说，因为不喜欢弄一些桌面快捷方式以及关联相关后缀文件等操作，所以我默认全都不勾选，直接 <code>Next</code>。</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="4">
<li>选择开始菜单中给 IDEA 的文件夹名，这里默认即可，直接点击 <code>Install</code>，然后就是漫长的等待安装过程了！</li>
</ol>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<ol start="5">
<li>大功告成！显示此界面就说明我们的 <code>IDEA</code> 已经安装好了，直接点击 <code>Finish</code> 即可！</li>
</ol>
<figure><figcaption></figcaption></figure>
<h2> 配置</h2>
<p>安装好之后，为了让我们的 IDEA 使用起来更顺手，推荐做一些个性化的配置，提高我们的工作效率。</p>
<h3> 激活</h3>
<p>首次打开旗舰版 <code>IDEA</code> 时，会让你激活，这里有 3 种选择：</p>
<ul>
<li>
<p>利用你的 <code>JetBrains</code> 账号登录激活；</p>
</li>
<li>
<p>利用你的 <code>IDEA</code> 激活码激活；</p>
</li>
<li>
<p>最后则是许可证服务器地址激活；</p>
</li>
</ul>
<p>当然你也可以选择 <code>Evaluate for free</code>，它是有 30 天的试用期的，你只需要在这 30 天之内激活即可，否则 30 天之后将会弹窗不可用。对于社区版，应该没有激活这一说法，因为它是免费的，我们直接打开用就可以了。</p>
<figure><figcaption></figcaption></figure>
<h3> 编码设置</h3>
<p>一般 IDEA 的编码是和系统保持一致的，而为了通用，减少不必要的编码问题，所以一般统一设置为 UTF-8，设置入口如下，依次打开 <code>Settings -&gt; Editor -&gt; File Encodings</code>，然后将 <code>Global Encoding</code>、<code>Project Encoding</code>、<code>Default encoding for properties files</code> 均设置为 UTF-8。</p>
<figure><figcaption></figcaption></figure>
<h3> 外观设置</h3>
<h4> 整体 UI</h4>
<p>安装并激活之后，进入 IDEA 的主界面，新版本的主界面如下图所示：</p>
<figure><figcaption></figcaption></figure>
<p>点击 <code>Customize</code>，可以看到右侧我们可以设置主题和字体。其中主题有如下 4 种选择：</p>
<ol>
<li>
<p>IntelliJ Light</p>
</li>
<li>
<p>Windows 10 Light</p>
</li>
<li>
<p>Darcula</p>
</li>
<li>
<p>High contrast</p>
</li>
</ol>
<p>这里可以根据自己的喜好进行主题选择，也可以勾选右方的 <code>Sync with OS</code> 选项，这样 IDEA 就会根据你系统的明亮还是黑暗主题进行自动切换了。</p>
<p>而字体大小设置这边，我个人更喜欢稍微大一点（主要是小的看久了眼睛疼 😂），所以设置的是 16 号字体。</p>
<figure><figcaption></figcaption></figure>
<p>而关于更多设置，可以点击下方的 <code>All settings…</code>，进入更详细的设置。比如这里 IDEA 默认界面字体是微软雅黑，我们要改成自己喜欢的字体就可以在这里进行更改，这里推荐 JetBrains 自家推出的 <code>JetBrains Mono</code> 字体。</p>
<p>设置入口，依次进入 <code>Settings -&gt; Appearance &amp; Behavior -&gt; Appearance</code>，然后在右边设置主题，字体以及字体大小即可。</p>
<figure><figcaption></figcaption></figure>
<h4> 编辑区</h4>
<p>上述设置只是针对于 IDEA 整体界面风格的设置，而如果我们要对我们的代码编辑区进行设置，那么就需要进入：<code>Settings -&gt; Editor -&gt; Font</code>，然后设置字体和大小。这里依然推荐使用 <code>JetBrains Mono</code> 字体，字号 16。</p>
<figure><figcaption></figcaption></figure>
<p>除开上面设置编辑区字体大小的方法外，我们还可以按住 <code>Ctrl</code>，然后通过鼠标滚轮来实现字体大小的调整，但是前提是你要先打开相关设置。设置入口如下，依次进入 <code>Settings -&gt; Editor -&gt; General</code>，然后勾选 <code>Change font size with Ctrl+Mouse Wheel</code> 即可。</p>
<figure><figcaption></figcaption></figure>
<h4> 控制台</h4>
<p>一般情况下无需调整，它会沿用编辑器一样的配置，但如果你需要自定义，可以去如下入口：<code>Settings -&gt; Editor -&gt; Color Scheme -&gt; Console Font</code>，然后勾选如下 <code>Use color scheme font instead of the default</code> 选项并进行设置即可。</p>
<figure><figcaption></figcaption></figure>
<h3> 扁平化显示及空包隐藏</h3>
<p>有时候，我们项目的包结构会变成如下样式，有时会造成一定的不便，此时是因为开启了 <code>Flatten Packages</code> 所导致。</p>
<figure><figcaption></figcaption></figure>
<p>如果我们关闭此功能，则项目包结构如下所示：</p>
<figure><figcaption></figcaption></figure>
<p>其中 <code>Compact Middle Packages</code> 表示是否隐藏空包。</p>
<h3> 打开文件多行显示</h3>
<p>平常使用 IDEA 时，你可能没有注意到，一旦我们打开过多的文件时，默认会堆积在一行显示，就像浏览器打开了多个标签一样，此时需要通过右侧箭头筛选的方式来选择其他文件。为了解决这一问题，让我们打开的所有文件能以多行显示的方式方便查看。</p>
<p>设置入口：依次打开 <code>Settings -&gt; Editor -&gt; General -&gt; Editor Tabs</code>，然后将 <code>Show tabs in</code> 勾选为 <code>Multiples rows</code>。</p>
<figure><figcaption></figcaption></figure>
<h3> 行号和方法分隔符</h3>
<p>日常为了方便定位 Bug 所在位置，我们通常需要打开代码所对应的行号，方便我们查找。另外，如果我们代码中方法较多时，最好是在每个方法之间加一个分隔符，方便我们知道一个方法的开始和结束。而这两个功能，IDEA 都是提供的。设置入口：依次打开 <code>Settings -&gt; Editor -&gt; General -&gt; Appearance</code>，然后勾选 <code>Show line numbers</code> 和 <code>Show method separators</code>。</p>
<figure><figcaption></figcaption></figure>
<h3> 自动导包</h3>
<p>日常工作中，我们会经常用到第三方的包，每次都需要我们通过手动（<code>Alt + Enter</code>） 的方式来导入，但实际上 IDEA 也是提供自动导包功能的，设置入口如下：<code>Settings -&gt; Editor -&gt; General -&gt; Auto Import</code>，将 <code>Insert imports on paste</code> 设置为 <code>Always</code>，再勾选 <code>Add unambiguous imports on the fly</code> 以及 <code>Optimize imports on the fly</code> 即可。</p>
<figure><figcaption></figcaption></figure>
<h3> 忽略大小写</h3>
<p>通常 IDEA 在导入类时大小写是全匹配的，这样一样就极大影响了我们编码的速度。此时我们就可以通过设置 IDEA，让其忽略大小写字母，提高效率。设置入口如下，依次进入 <code>Settings -&gt; Editor -&gt; General -&gt; Code Completion</code>，取消勾选 <code>Match case</code>。</p>
<figure><figcaption></figcaption></figure>
<h3> 自动编译</h3>
<p>IDEA 默认是不会对代码自动编译的，需要我们手动配置。设置入口：依次打开 <code>Settings -&gt; Build,Execution,Deployment -&gt; Compiler</code>，然后勾选 <code>Build project automatically</code> 和 <code>Compole independent modules in parallel</code>。</p>
<figure><figcaption></figcaption></figure>
<h3> 编译器设置</h3>
<p>这里推荐使用 <code>Javac</code> 编译器，然后编译器版本最好保持和你本地使用的 JDK 版本相同。因为我本地使用的是 JDK11，所以这里版本我设置的是 11，这里最好根据你自己的实际情况进行设置。设置入口：依次打开 <code>Settings -&gt; Build,Execution,Deployment -&gt; Compiler -&gt; Java Compiler</code>，然后将 <code>Use compiler</code> 设置为 <code>Javac</code>，并将 <code>Project bytecode version</code> 设置为你本地使用的 JDK 的版本。</p>
<figure><figcaption></figcaption></figure>
<h3> Maven 设置</h3>
<p>默认情况下，IDEA 是由绑定的 Maven 的，但是我们一般是自己设置自己所使用的 Maven。需要设置的主要有三点：</p>
<ol>
<li>
<p><strong>Maven home path</strong>：即自己本地的 Maven 所在目录；</p>
</li>
<li>
<p><strong>User settings file</strong>：即自己本地 Maven 环境下的 <code>settings.xml</code> 所在目录；</p>
</li>
<li>
<p><strong>Local repository</strong>：即自己本地的 Maven 仓库；</p>
</li>
</ol>
<p>设置入口：依次打开 <code>Settings -&gt; Build,Execution,Deployment -&gt; Build Tools -&gt; Maven</code>，然后设置以上三点即可。</p>
<figure><figcaption></figcaption></figure>
<h3> 类模板</h3>
<p>当我们创建一个类时，希望每个类的前边都已经一些注释的代码，用于标识这是我们自己所写的代码。此时就需要到 <code>Settings -&gt; Editor -&gt; File and Code Templates</code>，然后在右边的 <code>Includes -&gt; File Header</code> 右边的方框中，填入如下模板。设置完成之后，以后我们每次创建新的类文件时，IDEA 都会在文件的开头添加如下信息。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption>img</figcaption></figure>
<h3> 导入导出设置</h3>
<p>经过我们一番调教，IDEA 用起来就十分顺手了。但这时候问题就来了，要是我们换个系统或者电脑使用啥的，难道我们又得重新设置一遍么？当然不是了！IDEA 是支持导入导出我们的配置的，我们只需要将我们的设置导出，然后换电脑或者重装系统使用时进行导入即可。</p>
<h4> 导出</h4>
<p>导出入口：依次打开 <code>File -&gt; Manage IDE Settings -&gt; Export Settings…</code>。</p>
<figure><figcaption></figcaption></figure>
<h4> 导入</h4>
<p>导入入口，依次打开 <code>File -&gt; Manage IDE Settings -&gt; Import Settings…</code>。</p>
<figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>好了，以上就是关于 IDEA 的安装以及安装之后的一些配置了。如果你觉得对你有用，那就点个赞再走吧！如果你还有更多关于 IDEA 的高级玩法，欢迎评论区留言，大家一起交流！</p>
]]></content>
    <category term="IDEA 教程"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">原来大厂都是这么提交代码的</title>
    <id>https://cunyu1943.github.io/tutorial/idea-series/20230525-code-commit.html</id>
    <link href="https://cunyu1943.github.io/tutorial/idea-series/20230525-code-commit.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 原来大厂都是这么提交代码的</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/Mhc7tygE6Fl5_3h8mz7A9g" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Mhc7tygE6Fl5_3h8mz7A9g</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 原来大厂都是这么提交代码的</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/Mhc7tygE6Fl5_3h8mz7A9g" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Mhc7tygE6Fl5_3h8mz7A9g</a></p>
</div>
<h2> 前言</h2>
<p>在开发大型项目时，通常都是由团队来进行开发。此时，每个人有每个人的代码编写风格和提交习惯，如果放任自由发挥，那么代码质量和代码提交日志就难免风格各异，导致项目代码质量难以保持统一。针对这一问题，往往公司在以项目组进行开发时，在进入正式编码前，都会制定一个标准的流程，用来规范代码提交前的流程，同时对提交日志进行规范化。从而最大程度上保持项目的代码风格统一，提高代码可读性。</p>
<p>以下就给大家介绍一下最常见的代码提交前的规范化流程，以及如何模板化我们的代码提交日志。</p>
<h2> 代码提交前检查流程</h2>
<h3> 推荐插件</h3>
<h4> p3c</h4>
<ul>
<li><strong>下载地址</strong></li>
</ul>
<blockquote>
<p><a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines/versions" target="_blank" rel="noopener noreferrer">https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines/versions</a></p>
</blockquote>
<ul>
<li><strong>安装及使用</strong></li>
</ul>
<blockquote>
<p><a href="https://github.com/alibaba/p3c/wiki/IDEA%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/p3c/wiki/IDEA插件使用文档</a></p>
</blockquote>
<h4> SonarLint</h4>
<ul>
<li><strong>下载地址</strong></li>
</ul>
<blockquote>
<p><a href="https://plugins.jetbrains.com/plugin/7973-sonarlint/versions" target="_blank" rel="noopener noreferrer">https://plugins.jetbrains.com/plugin/7973-sonarlint/versions</a></p>
</blockquote>
<ul>
<li><strong>安装及使用</strong></li>
</ul>
<blockquote>
<p><a href="https://www.cnblogs.com/cocoxu1992/p/11336723.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/cocoxu1992/p/11336723.html</a></p>
</blockquote>
<h3> 提交前的配置项</h3>
<figure><figcaption>提交前的配置</figcaption></figure>
<h4> Alibaba Code Guidelines</h4>
<p>安装 <code>p3c</code> 插件后，才会有该选项。在提交代码改动之前，如果勾选此选项，则会去扫描代码中不符合 <code>p3c</code> 规则中的代码，然后弹窗提示存在可疑代码，此时可以到控制台查看存疑的代码。然后只需要根据控制台中提示的去修改代码即可。</p>
<ul>
<li>代码存疑弹窗<br>
</li>
<li>控制台中存疑的代码提示<br>
</li>
</ul>
<h4> Reformat code</h4>
<p>提交前格式化代码，假设我们在代码中写了如下代码：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果我们在提交前勾选了此选项，提交时 <code>IDEA</code> 就会自动对此行代码进行格式化，变成以下的格式，从而大大提高代码可读性。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> Rearrange code</h4>
<p>重新编排代码，IntelliJ IDEA 支持各种复杂的编排设置选项，当我们在 IDEA 中设置好了编码功能之后，这里就可以尝试勾选这个进行自动编排。不过一般没有去做特定的编码功能设置，因此建议不勾选。</p>
<h4> Optimize imports</h4>
<p>优化导包（删除无用的导包）。假如在写代码时一开始引入了 <code>Scanner</code> 包，但后续又没有用到，此时勾选此选项 <code>IDEA</code> 就会自动将引入的 <code>Scanner</code> 包删除。</p>
<ul>
<li>勾选前</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>勾选后</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> Analyze code</h4>
<p>勾选该选项后，<code>IDEA</code> 会用默认的配置文件去扫描我们所写代码的质量。如果扫描发现问题，则会弹出以下类似的弹窗，此时只要点击 <code>Review</code> 就可以对代码中存在问题的地方进行 <code>Review</code>，根据所给提示对代码进行修改。</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h4> Check TODO</h4>
<p>检查代码中存在 <code>@todo</code> 注解的地方并给出提示。一般在代码中添加 <code>@todo</code> 表示此时代码中还有未完成的功能，此时可以提醒你去补全还未完成的功能代码。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们新增的代码如上，此时如果在提交点前勾选 <code>Check TODO</code> 选项，就会弹窗提示。</p>
<figure><figcaption></figcaption></figure>
<p>此时点击 <code>Review</code> 就可以去查看对应分析结果，然后去找到对应 <code>todo</code> 所在的代码对它进行补充。</p>
<figure><figcaption></figcaption></figure>
<h4> Cleanup</h4>
<p>清除下版本控制系统，去掉一些版本控制系统的错误信息，主要针对 SVN，Git 不适用，一般建议不勾选。</p>
<h4> Update copyright</h4>
<p>如果代码需要版权标识时，需要提前在 <code>IDEA</code> 中配置相关版权信息。配置的流程 <code>settings-&gt;Editor-&gt;copyright-&gt;copyright profiles</code>，然后添加类似于以下的版权信息：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成后，当提交你的代码更改时，勾选该选项可以检查更新版权，这样提交后更改的文件将有它们的版权更新。</p>
<h4> Perform SonarLint analysis</h4>
<p>安装 <code>SonarLint</code> 插件后才会有的选项。勾选该选项后，<code>SonarLint</code> 会对代码进行检查，发现代码中的一些 bug、漏洞、异味。然后根据控制台中的提示信息对代码进行修改后再次提交，能够一定程度上提高代码质量。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h2> 提交日志模板化（Git Commit Template）</h2>
<h3> 概述</h3>
<p>通过使用该插件，能够规范在使用 <code>IDEA</code> 提交代码时的注释说明。通过模板化后的日志，便于快速查找，回溯之前的工作。</p>
<h3> 下载安装</h3>
<ol>
<li><strong>下载地址</strong></li>
</ol>
<blockquote>
<p><a href="https://plugins.jetbrains.com/plugin/9861-git-commit-template/versions" target="_blank" rel="noopener noreferrer">https://plugins.jetbrains.com/plugin/9861-git-commit-template/versions</a></p>
</blockquote>
<ol start="2">
<li><strong>安装</strong></li>
</ol>
<blockquote>
<p><a href="https://blog.csdn.net/m0_46636892/article/details/122116712" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/m0_46636892/article/details/122116712</a></p>
</blockquote>
<h3> 使用教程</h3>
<h4> 提交信息的模板</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要分为三部分：</p>
<ul>
<li>Head（<code>&lt;type 类型&gt;(&lt;scope 可选作用域&gt;): &lt;subject 描述&gt;</code>）</li>
<li>Body（<code>&lt;body 可选的正文&gt;</code>）</li>
<li>Footer（<code>&lt;footer 可选的脚注&gt;</code>）</li>
</ul>
<h4> Head 参数说明</h4>
<ol>
<li><strong>type（必填）</strong></li>
</ol>
<table>
<thead>
<tr>
<th>类型</th>
<th style="text-align:left">英文</th>
<th>中文说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>feat</code></td>
<td style="text-align:left"><code>A new feature</code></td>
<td>新功能</td>
</tr>
<tr>
<td><code>fix</code></td>
<td style="text-align:left"><code>A bug fix</code></td>
<td><code>bug</code> 修复</td>
</tr>
<tr>
<td><code>docs</code></td>
<td style="text-align:left"><code>Documention only</code></td>
<td>文档注释</td>
</tr>
<tr>
<td><code>style</code></td>
<td style="text-align:left"><code>Changes that do not affect the meaning of the code(white-space、formatting、missing semi-colons、etc)</code></td>
<td>不影响代码运行的变动（格式化、去空格等）</td>
</tr>
<tr>
<td><code>refactor</code></td>
<td style="text-align:left"><code>A code change that neither fixes a bug nor adds a feature</code></td>
<td>重构、优化（既不增加新功能，也不是修复 <code>bug</code>）</td>
</tr>
<tr>
<td><code>perf</code></td>
<td style="text-align:left"><code>A code change that improves performance</code></td>
<td>性能优化</td>
</tr>
<tr>
<td><code>test</code></td>
<td style="text-align:left"><code>Adding missing tests or correcting existing tests</code></td>
<td>增加测试</td>
</tr>
<tr>
<td><code>build</code></td>
<td style="text-align:left"><code>Changes that affect the build system or external dependencies</code></td>
<td>影响生成构建或外部依赖项的更改</td>
</tr>
<tr>
<td><code>ci</code></td>
<td style="text-align:left"><code>Changes to our CI configuration files and scripts</code></td>
<td>对配置项配置文件和脚本的更改</td>
</tr>
<tr>
<td><code>chore</code></td>
<td style="text-align:left"><code>Other changes that don't modify src or test files</code></td>
<td>其他不影响源码和测试的改动</td>
</tr>
<tr>
<td><code>revert</code></td>
<td style="text-align:left"><code>Reverts a previous commit</code></td>
<td>回退版本</td>
</tr>
</tbody>
</table>
<ol start="2">
<li><strong>scope（可选）</strong></li>
</ol>
<p>用户说明此次提交所影响的范围，常见的有数据层、控制层、视图层等，这个需要根据自己的项目来具体定义。</p>
<ol start="3">
<li><strong>subject（必填）</strong></li>
</ol>
<p>此次提交的概括，一般建议不超过 50 字，结尾不加任何标点符号。</p>
<h4> Body 参数说明</h4>
<p>对此次提交的详细描述，可以分为多行，每行建议控制在 72 个字以内，以条目的形式给出，范例如下：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> Footer 参数说明</h4>
<p>主要用于两种情况：</p>
<ol>
<li>不兼容的变动，对应具体使用部分图中的 <code>Breaking changes</code>.</li>
<li>关闭 <code>Issue</code>，对应具体使用部分图中的 <code>Closed issues</code>.</li>
</ol>
<h4> 具体使用</h4>
<ol>
<li>安装完成后，在代码提交界面会有以下图标，点击进行参数配置。</li>
</ol>
<figure><figcaption></figcaption></figure>
<ol start="2">
<li>根据自己的需求进行相关配置。</li>
</ol>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<ol start="3">
<li>完成配置之后，点击右下角的 <code>ok</code>，就会自动根据模板生成提交的具体信息，最后进行提交即可，一个自动生成的具体示例如下：</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><figcaption></figcaption></figure>
<h2> 总结</h2>
<p>可能屏幕前的你所在的项目组并没有这么多的流程和提交规范，但养成良好的编码习惯总归是好的。代码不仅仅是写给自己看的，一个高手不仅仅是能够实现复杂的功能，能把代码编写得能让人看着简洁清爽也是一种艺术。</p>
<p>好了，今天的文章到此就结束了，感谢大家赏脸阅读。对于文中如果有描述不清的地方，或者有什么建议我改进的建议，欢迎与我讨论交流。</p>
]]></content>
    <category term="IDEA 教程"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">IDEA 教程</title>
    <id>https://cunyu1943.github.io/tutorial/idea-series/</id>
    <link href="https://cunyu1943.github.io/tutorial/idea-series/"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#1：提示工程师养成指南</title>
    <id>https://cunyu1943.github.io/weekly/2023/0415-0421.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0415-0421.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#1：提示工程师养成指南</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/tRCcFjolMuXqunWRQDgxGQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/tRCcFjolMuXqunWRQDgxGQ</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#1：提示工程师养成指南</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/tRCcFjolMuXqunWRQDgxGQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/tRCcFjolMuXqunWRQDgxGQ</a></p>
</div>
<h2> 一、项目</h2>
<h3> 1、<a href="https://gitee.com/landalfyao/ddrun" target="_blank" rel="noopener noreferrer">ddrun</a></h3>
<p>后端采用 <code>midway3.0</code>，后台采用 <code>nuxt2.x</code>，小程序采用 <code>uniapp</code> 实现的一套跑腿下单接单系统。</p>
<p>适用于校园、社区、城市等场景，可提供打印服务、跑腿服务、搬家服务、清洁服务、维修服务、活动组织、快递代取、代买代送、软件安装、陪玩陪练等服务。</p>
<figure><figcaption></figcaption></figure>
<h3> 2、<a href="https://github.com/opentiny/tiny-vue" target="_blank" rel="noopener noreferrer">tiny-vue</a></h3>
<p><code>TinyVue</code> 是华为云出品的企业级设计体系，一个基于 <code>Vue</code> 的 <code>UI</code> 组件库，可以同时支持 <code>Vue 2.0</code> 和 <code>Vue 3.0</code>。</p>
<p>组件丰富，主要提供以下组件：</p>
<ul>
<li>框架风格</li>
<li>导航组件</li>
<li>容器组件</li>
<li>表单组件</li>
<li>表格组件</li>
<li>数据组件</li>
<li>提示组件</li>
<li>其他组件</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 3、<a href="https://github.com/zonemeen/netease-recent-profile" target="_blank" rel="noopener noreferrer">netease-recent-profile</a></h3>
<p>通过使用该组件，可以在 <code>Github Profile</code> 上显示你在网易云音乐上的听歌记录。</p>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> 1、<a href="https://bobtranslate.com/" target="_blank" rel="noopener noreferrer">Bob</a></h3>
<ol>
<li><strong>使用场景</strong></li>
</ol>
<p>仅适用于 <code>macOS</code>，学习工作中需要用到 <code>OCR</code> 的场景。</p>
<ol start="2">
<li><strong>常用功能</strong></li>
</ol>
<ul>
<li>
<p><strong>划词翻译</strong>：选中需要翻译的文本，按下划词翻译快捷键（默认 <code>⌥ + D</code>）即可翻译。</p>
</li>
<li>
<p><strong>截图翻译</strong>：按下截图翻译快捷键（默认 <code>⌥ + S</code>），截取需要翻译的区域即可翻译。</p>
</li>
<li>
<p><strong>输入翻译</strong>：按下输入翻译快捷键（默认 <code>⌥ + A</code>），输入需要翻译的文本，<code>Enter</code> 键翻译。</p>
</li>
<li>
<p><strong>截图 OCR</strong>：按下截图 <code>OCR</code> 快捷键（默认 <code>⇧ + ⌥ + S</code>），截取需要识别的区域即可识别文本。</p>
</li>
<li>
<p><strong>静默截图 OCR</strong>：按下静默截图 <code>OCR</code> 快捷键（无默认快捷键），截取需要识别的区域即可后台识别文本。</p>
</li>
<li>
<p><strong>访达选图 OCR</strong>：按下访达选图 <code>OCR</code> 快捷键（无默认快捷键），在访达窗口选中图片文件即可识别文本。</p>
</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 2、<a href="https://www.screentogif.com/" target="_blank" rel="noopener noreferrer">ScreenToGif</a></h3>
<p>一款非常好用的免费开源 <code>Gif</code> 动画录制工具，集 <code>GIF</code> 录制、制作、编辑等多种功能为一身。具有录制屏幕、录制摄像头、录制画板、编辑器等功能，软件小巧、界面简洁但功能却很强大，而且操作也很简单。不过需要注意一点，它目前只支持在 <code>Windows</code> 系统中使用。</p>
<figure><figcaption></figcaption></figure>
<h3> 3、<a href="https://www.snipaste.com/" target="_blank" rel="noopener noreferrer">Snipaste</a></h3>
<p>一款强大的免费截图 + 贴图软件，目前支持 <code>Windows</code> 和 <code>macOS</code> 系统。免费版功能对于日常截图贴图已经完全足够，同时还推出了专业版，比起免费版更为强大。</p>
<p>专业版与免费版功能对比如下表，专业版目前定价 <code>99</code> 元，有需要的看官可以入手。</p>
<table>
<thead>
<tr>
<th>功能</th>
<th>免费版</th>
<th>专业版</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>截屏</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>自由矩形区域截屏</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>窗口检测</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>界面元素检测</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>延时截屏</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>自定义尺寸截屏</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>白板模式</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>捕捉光标图案</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>重复上一次截屏区域</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>精确控制光标移动</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>重放截图历史</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>自动保存</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>快速保存</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>超级截屏</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>检测界面父/子元素</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>识别二维码/条形码</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>刷新截图</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>输入截屏区域尺寸</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>切换截屏尺寸单位 (<code>px</code>/<code>dip</code>)</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>活动窗口截屏</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>固定截图区域长宽比</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>透明白板模式</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>带阴影/边框保存</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>原生分享 (<code>Windows</code> 10+)</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>配合 Listary 使用 (手动保存文件时隐藏截图窗口)</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>发送截图到其他应用程序（通过自定义命令行参数）</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td><strong>贴图</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>将剪贴板内容(文字/图像/文件)粘贴为置顶窗口</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>调整大小/透明度</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>旋转/镜像</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>以固定尺寸快速缩略图</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>贴图分组</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>取消/启用贴图窗口置顶</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>自由尺寸缩略图</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>贴图裁剪</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>灰度转换</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>反色</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>支持虚拟桌面</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td><code>Solo</code> 模式</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>多选贴图窗口</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>背景模式 (对于有透明通道的贴图)</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>支持粘贴/拖拽网页图片</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>贴图组管理</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>输入贴图尺寸/缩放比例</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>可编辑的颜色卡片</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td><strong>标注</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>矩形/椭圆</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>直线/折线/箭头</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>画笔</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>记号笔</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>马赛克/模糊</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>文本标注</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>橡皮擦</td>
<td>✔️</td>
<td>✔️</td>
</tr>
<tr>
<td>序号标注</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>放大镜标注</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>圆角矩形标注</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>虚线/点线 (矩形/椭圆/直线/折线/箭头/画笔)</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>记号笔/马赛克/模糊/橡皮擦 支持 椭圆/圆形 形状</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>双向/反向箭头</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>更多箭头样式</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>文字背景填充</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>自定义文字描边的颜色/宽度</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>旋转标注图形</td>
<td>仅文字标注</td>
<td>除线条标注外都支持</td>
</tr>
<tr>
<td>二次编辑</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>自由选中</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>笔尖数量</td>
<td>1</td>
<td>1-5</td>
</tr>
<tr>
<td>拖拽调色板以重新排序颜色</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>滚轮调整颜色透明度</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>为不同标注形状分别记忆颜色</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>自定义调色板，分享调色板</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td><strong>其他功能</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>屏幕触发角</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>复制截图为文件</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>命令行选项</td>
<td>基础</td>
<td>丰富</td>
</tr>
<tr>
<td><strong>自定义选项</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>为任意功能绑定全局快捷键</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>自定义放大镜样式</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>完全隐藏放大镜</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>自定义托盘图图标的鼠标动作</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td>主题色跟随系统主题</td>
<td>❌</td>
<td>✔️</td>
</tr>
<tr>
<td><strong>授权</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td>使用限制</td>
<td>仅个人使用</td>
<td>没有限制</td>
</tr>
<tr>
<td>使用期限(但不包含大版本更新，如 <code>Snipaste</code> 3)</td>
<td></td>
<td>永久</td>
</tr>
<tr>
<td>小版本更新</td>
<td>仅缺陷修复</td>
<td>包含新功能</td>
</tr>
<tr>
<td>授权价格</td>
<td>免费</td>
<td><code>99</code> 人民币</td>
</tr>
</tbody>
</table>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> 1、<a href="https://browserframe.com/" target="_blank" rel="noopener noreferrer">BrowserFrame</a></h3>
<p>通过该网站，可以模拟在各大浏览器框架中的屏幕截图，支持 <code>Chrome</code>、<code>Safari</code>、<code>Firefox</code>、<code>Edge</code>、<code>Opera</code>等浏览器、<code>macOS</code>、<code>Windows</code> 系统以及 <code>Dark</code>、<code>Light</code> 主题。</p>
<figure><figcaption></figcaption></figure>
<h3> 2、<a href="https://docsmall.com/" target="_blank" rel="noopener noreferrer">docsmall</a></h3>
<p>一个提供图片压缩、<code>Gif</code> 压缩、<code>PDF</code> 压缩、<code>PDF</code> 合并、<code>PDF</code> 分隔等功能的在线网站，最重要的一点，完全免费！</p>
<p>就像我文章里的图片，基本都是在这里压缩的。</p>
<figure><figcaption></figcaption></figure>
<h3> 3、<a href="https://dimmy.club/" target="_blank" rel="noopener noreferrer">Dimmy.club</a></h3>
<p>模拟生成在各种设备模上的带壳屏幕截图，主要支持笔记本（<code>MacBook、Surface Book</code>）、一体机（<code>iMac</code>）、手机（<code>iPhone、Pixel、Nokia、Samsung</code>）、平板（<code>iPad、Nexus</code>）等设备。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> 1、<a href="https://adguard.com/zh_cn/welcome.html" target="_blank" rel="noopener noreferrer">AdGuard</a></h3>
<p>号称世界上最高级的广告拦截器，具有如下特点：</p>
<ul>
<li>拦截所有种类的广告</li>
<li>移除烦人的网络元素</li>
<li>节省流量并加速页面载入</li>
<li>工作于浏览器与应用程序</li>
<li>保持网站功能和外观</li>
</ul>
<figure><figcaption>AdGuard</figcaption></figure>
<h3> 2、<a href="https://microsoftedge.microsoft.com/addons/detail/global-speed-%E8%A7%86%E9%A2%91%E9%80%9F%E5%BA%A6%E6%8E%A7%E5%88%B6/mjhlabbcmjflkpjknnicihkfnmbdfced" target="_blank" rel="noopener noreferrer">Global Speed: 视频速度控制</a></h3>
<ol>
<li><strong>速度控制</strong></li>
</ol>
<ul>
<li>与几乎所有视频和音频流媒体站点兼容，包括 <code>Youtube</code>，<code>Netflix</code>，哔哩哔哩，腾讯视频，百度网盘，爱奇艺等。</li>
<li>如果固定，标签可以有自己的播放速率。</li>
<li><code>URL</code> 规则，可根据网站自动设置自定义播放速率。</li>
<li>可选的快捷键来控制速度。</li>
</ul>
<ol start="2">
<li><strong>媒体热键</strong></li>
</ol>
<ul>
<li>
<p>倒带/前进，逐帧分析，调整音量，设置标记，转到标记，<code>AB</code> 重复等。</p>
</li>
<li>
<p>选择您要优先用于媒体热键的视频/音频。</p>
</li>
<li>
<p>热键可以处于全局模式，该模式允许您在使用其他程序时控制背景音乐或 <code>PiP</code> 视频。</p>
</li>
</ul>
<ol start="3">
<li><strong>筛选器</strong></li>
</ol>
<ul>
<li>在视频甚至整个页面上应用滤镜（反转，灰度，亮度，对比度，镜像等）。</li>
<li>配置热键以切换反转，调整亮度或对比度等。</li>
</ul>
<ol start="4">
<li><strong>音效</strong></li>
</ol>
<ul>
<li>效果包括音高变化，音量增强，<code>EQ</code> 等。</li>
<li>可以延迟音频以解决同步问题。</li>
<li>配置热键来调整音调，音量增强等。</li>
</ul>
<ol start="5">
<li><strong>隐私</strong></li>
</ol>
<ul>
<li>无数据收集，无追踪器。</li>
</ul>
<ol start="6">
<li><strong>使用场景</strong></li>
</ol>
<ul>
<li>快速刷课</li>
<li>学习教程视频时加速等</li>
</ul>
<figure><figcaption>Global Speed：视频速度控制</figcaption></figure>
<h3> 3、<a href="https://microsoftedge.microsoft.com/addons/detail/supercopy-%E8%B6%85%E7%BA%A7%E5%A4%8D%E5%88%B6/nhiheekdcnmfbapkmpbhmplfddenhjic?hl=zh-CN" target="_blank" rel="noopener noreferrer">SuperCopy 超级复制</a></h3>
<ol>
<li><strong>主要功能</strong></li>
</ol>
<ul>
<li>解除禁止复制</li>
<li>解除禁止右键</li>
<li>解除禁止全选</li>
<li>解除禁止粘贴</li>
</ul>
<ol start="2">
<li><strong>常用场景</strong></li>
</ol>
<p>复制百度文库、腾讯文档、金山文档、起点文学、豆瓣读书等网页禁止复制的内容。</p>
<ol start="3">
<li><strong>插件特色</strong></li>
</ol>
<p>点亮图标即可复制，操作简单，需复制的网站具有记忆功能。</p>
<ol start="4">
<li><strong>使用方法</strong></li>
</ol>
<p>在访问被禁止右键或禁止复制的网站上，点击 <code>SuperCopy</code> 图标解除禁止即可。当插件图标灰色表示未启用解除功能，当图标彩色表示解除生效。</p>
<ol start="5">
<li><strong>可复制的常用网站</strong></li>
</ol>
<ul>
<li>百度文库</li>
<li>起点中文网、起点文学、起点女生网</li>
<li>创始中文网</li>
<li>磨铁中文网、磨铁文学、锦文小说网、墨墨言情网、逸云书院</li>
<li>纵横中文网、纵横文学</li>
<li>网易云阅读</li>
<li>腾讯原创馆</li>
<li>豆瓣阅读、豆瓣读书</li>
<li>熊猫看书</li>
<li>哔哩哔哩</li>
<li>微博</li>
<li><code>Story Bird</code>、<code>Beetify</code></li>
<li>刺猬猫</li>
<li>站酷</li>
<li>链家</li>
<li>环球人力资源智库</li>
<li>老烤鸭雅思等</li>
</ul>
<figure><figcaption>SuperCopy 超级复制</figcaption></figure>
<h2> 五、资料</h2>
<h3> 1、<a href="https://cunyu1943.site/JavaPark/" target="_blank" rel="noopener noreferrer">JavaPark</a></h3>
<p>这里有 <code>Java</code> 学习保姆级教程、面试总结、计算机基础、数据库、实战实践、效率工具、资源分享、程序人生等诸多内容，学习 <code>Java</code> 的小伙伴不容错过。</p>
<figure><figcaption></figcaption></figure>
<h3> 2、<a href="https://www.promptingguide.ai/zh" target="_blank" rel="noopener noreferrer">提示工程指南</a></h3>
<p><code>ChatGPT</code> 的横空出世，造就了一种新的职业 - <strong>人工智能提示工程师</strong>。而如何学习相关知识就很重要了，此刻你肯定无比需要一份入门指南，指引你学习的方向。</p>
<p>而这个项目就提供了这样一份指南，介绍了大语言模型相关的论文研究、学习指南、模型、讲座、参考资料、大语言模型能力以及与其他与提示工程相关的工具。</p>
<figure><figcaption></figcaption></figure>
<h3> 3、<a href="https://learnprompting.org/zh-Hans/docs/intro" target="_blank" rel="noopener noreferrer">Learn Prompting</a></h3>
<p>随着 <code>ChatGPT</code> 的发布，人工智能不断进步，提示工程技能变得越来越重要。</p>
<p>这套教程聚焦于如何使用提示工程，甚至学习者都不需要储备很多机器学习相关的知识。通过学习如何与人工智能交流，从而得到我们想要的结果。</p>
<figure><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">电子书</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/weekly/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#2：AI 写作助手</title>
    <id>https://cunyu1943.github.io/weekly/2023/0422-0428.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0422-0428.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#2：AI 写作助手</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/PjyWCciDJoxW83N_MY92Dw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/PjyWCciDJoxW83N_MY92Dw</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#2：AI 写作助手</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/PjyWCciDJoxW83N_MY92Dw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/PjyWCciDJoxW83N_MY92Dw</a></p>
</div>
<h2> 一、项目</h2>
<h3> 1、<a href="https://github.com/nihaojob/vue-fabric-editor" target="_blank" rel="noopener noreferrer">vue-fabric-editor</a></h3>
<p>基于 <code>fabric.js</code> 和 <code>Vue</code> 的图片编辑器，可自定义字体、素材、设计模板。</p>
<p>目前已支持以下功能：</p>
<ul>
<li>导入 <code>JSON</code> 文件</li>
<li>保存为 <code>PNG</code>、<code>SVG</code>、<code>JSON</code> 文件</li>
<li>插入 <code>SVG</code>、图片文件</li>
<li>多元素水平、垂直对齐方式</li>
<li>字体模板</li>
<li>组合/拆分组合</li>
<li>图层及顺序调整</li>
<li>撤销/重做</li>
<li>背景属性设置</li>
<li>外观属性/字体属性/描边/阴影</li>
<li>自定义字体</li>
<li>自定义模板素材</li>
<li>快捷键</li>
<li>右键菜单</li>
<li>辅助线</li>
<li>标尺</li>
<li>图片替换</li>
<li>图片滤镜</li>
<li>国际化</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 2、<a href="https://github.com/haixin-fang/starfish-vue3-lowcode" target="_blank" rel="noopener noreferrer">starfish-vue3-lowcode</a></h3>
<p><code>Vue3</code> 可视化低代码表单设计器，方便快捷的完成各类表单设计！</p>
<p>基于 <code>TypeScript</code> 开发，支持 <code>Vue3.0 API</code>。</p>
<figure><figcaption></figcaption></figure>
<h3> 3、<a href="https://github.com/vuepress-theme-hope/vuepress-theme-hope" target="_blank" rel="noopener noreferrer">vuepress-theme-hope</a></h3>
<p>一个功能强大的 <code>vuepress</code> 主题，支持 <code>vuepress V1.0</code> 和 <code>V2.0</code> 版本，支持文档站和博客两种形式，目前仍在活跃更新中。除开支持 <code>vuepress</code> 默认功能之外，还具备以下特色功能：</p>
<ul>
<li><code>Markdown</code> 增强</li>
<li>幻灯片页面</li>
<li>布局增强</li>
<li>浏览量和评论</li>
<li>文章信息</li>
<li>博客支持</li>
<li>主题色切换</li>
<li>深色模式</li>
<li>无障碍支持</li>
<li>文章加密</li>
<li>搜索支持</li>
<li>代码复制</li>
<li>图片预览</li>
<li><code>SEO</code> 增强</li>
<li><code>Sitemap</code></li>
<li><code>Feed</code> 支持</li>
<li><code>PWA</code> 支持</li>
<li>……</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> 1、<a href="https://typoraio.cn/" target="_blank" rel="noopener noreferrer">Typora</a></h3>
<p>一款跨平台 <code>Markdown</code> 编辑器和阅读器，支持 <code>macOS</code>，<code>Windows</code> 及 <code>Linux</code> 三大平台，也是我写作文章时的软件。毫不夸张地说，它是目前本地 <code>Markdown</code> 编辑器的天花板。测试阶段免费，目前已转入收费阶段，89 元买断制，支持三台设备，而且后续升级免费。</p>
<p>具有以下特点：</p>
<ul>
<li>风格极简</li>
<li>主题丰富</li>
<li>实时预览</li>
<li>图片与文字</li>
<li>代码块</li>
<li>数学公式</li>
<li>图表</li>
<li>目录大纲</li>
<li>文件管理</li>
<li>导入与导出</li>
<li>……</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 2、<a href="https://app.diagrams.net/" target="_blank" rel="noopener noreferrer">diagrams.net</a></h3>
<p>一个免费的拖放式在线图表工具，允许用户创建流程图、生成网络和实体关系 (<code>ER</code>) 图，甚至设计数据库模式。包括其易用性以及与 <code>GitHub</code>、<code>OneDrive</code> 和 <code>Google Drive</code> 等常见平台的无缝集成。全平台支持，同时支持 <code>Web</code> 在线，而且支持导出到本地，不用担心数据隐私问题。在我其他文章中的一些图，基本都是用它来画的。</p>
<figure><figcaption></figcaption></figure>
<h3> 3、<a href="https://getsharex.com/" target="_blank" rel="noopener noreferrer">ShareX</a></h3>
<p>一款支持截图、文件分享、图片上传的生产力工具，不过目前仅支持 <code>Windows</code> 平台。</p>
<p>具有如下特点：</p>
<ul>
<li>完全开源免费</li>
<li>轻巧却不失强大</li>
<li>无广告</li>
<li>支持录制 <code>Gif</code></li>
<li>支持多种截图方式（全屏、活动窗口、自定义、窗口菜单、滚动……）</li>
<li>支持截图后的后续任务（贴图、打印、编辑、保存到文件、上传、<code>OCR</code>、粘贴到剪贴板、扫描二维码……）</li>
<li>……</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> 1、<a href="https://web.baimiaoapp.com/" target="_blank" rel="noopener noreferrer">白描</a></h3>
<p>一个高效准确的 <code>OCR</code> 文字识别、翻译与文件扫描工具，主要支持以下功能：</p>
<ul>
<li>图片文字提取</li>
<li>数字公式识别</li>
<li>电子表格识别</li>
<li>扫描 <code>PDF</code> 转文字</li>
<li>证件扫描</li>
<li>……</li>
</ul>
<p>目前普通用户每日限制 5 次识别次数，批量识别次数限制为 1 次，每日翻译不超过 3 次且每次翻译字数不超过 1000 字。而普通会员（付费 30 元）识别次数无限制，批量识别次数限制为 3 次，每日翻译不超过 3 次且每次翻译字数不超过 1000 字，而且一次付费永久有效，多设备同步。黄金会员（付费 40 元）则无以上限制。</p>
<figure><figcaption></figcaption></figure>
<h3> 2、<a href="https://www.writingo.net/" target="_blank" rel="noopener noreferrer">火山写作</a></h3>
<p>字节跳动最新推出的写作助手，致力于帮助用户提升英语写作能力，更好地与世界沟通。</p>
<p>支持学术论文、邮件、用户手册、个人陈述、学校申请、活动通知等类型的文章。点击一键优化还能让你选择目前在写作的文章类型、文章受众、修改风格、修改篇幅等类型，从而实现更精确的改写。目前，不登录情况下限制免费使用 3 次，有需要的小伙伴可以去试一下效果！</p>
<figure><figcaption></figcaption></figure>
<figure><figcaption></figcaption></figure>
<h3> 3、<a href="https://bigjpg.com/" target="_blank" rel="noopener noreferrer">Bigjpg</a></h3>
<p><code>AI</code> 人工智能图片无损放大工具。利用最新的人工智能深度学习技术，将图片噪点和锯齿部分进行补充，从而实现图片的无损放大。目前免费版可以上传 <code>3000 x 3000px</code> 图片, <code>5M</code> 以内，而付费版最大可支持 <code>50M</code>。而且登录后还提供 <code>API</code>，可以基于它来开发自己的应用。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> 1、<a href="https://saladict.crimx.com/" target="_blank" rel="noopener noreferrer">沙拉查词</a></h3>
<p>浏览器聚合词典专业划词翻译插件，具有以下特点：</p>
<ol>
<li><strong>词典丰富</strong></li>
</ol>
<ul>
<li>精选大量词典，手工打磨排版，涵盖几乎所有领域</li>
<li>自动发音，可选不同词典、英美音</li>
<li>各个词典支持个性化调整</li>
<li>整个网页翻译，谷歌和有道分级网页翻译</li>
<li>右键支持更多词典页面直达</li>
</ul>
<ol start="2">
<li><strong>划词方式组合变幻无穷</strong></li>
</ol>
<ul>
<li>支持四种划词方式，支持鼠标悬浮取词</li>
<li>查词面板可钉住可拖动可输入</li>
<li>钉住可以配置不同划词方式</li>
</ul>
<ol start="3">
<li><strong>情境模式快速切换词典组合</strong></li>
</ol>
<ul>
<li>每个情境模式下设置相互独立，快速切换</li>
</ul>
<ol start="4">
<li><strong>全键盘操作亦可</strong></li>
</ol>
<ul>
<li>支持设置浏览器快捷键</li>
<li>兼容 Vimium 全键盘操作</li>
<li>三按 ctrl 打开快捷查词</li>
<li>点击地址栏图标快速查词（可设快捷键）</li>
</ul>
<ol start="5">
<li><strong>单词管理</strong></li>
</ol>
<ul>
<li>保存上下文以及翻译，准确理解单词</li>
</ul>
<ol start="6">
<li><strong>支持添加生词</strong></li>
</ol>
<ul>
<li>可保存查词历史</li>
</ul>
<ol start="7">
<li><strong>支持黑白名单</strong></li>
<li><strong>支持 PDF 划词</strong></li>
</ol>
<ul>
<li>支持 PDF 黑白名单</li>
</ul>
<ol start="9">
<li><strong>可显示当前页面二维码</strong></li>
</ol>
<figure><figcaption></figcaption></figure>
<h3> 2、<a href="https://simpread.pro/" target="_blank" rel="noopener noreferrer">简悦</a></h3>
<p>提供如杂志版沉浸式阅读体验的浏览器插件，提供以下特色功能：</p>
<ul>
<li>阅读模式</li>
<li>聚焦模式</li>
<li>丰富的导出功能</li>
<li>快捷键</li>
<li>定制化</li>
<li>同步</li>
<li>主题丰富</li>
<li>标注</li>
<li>……</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 3、<a href="https://markdown-here.com/get.html" target="_blank" rel="noopener noreferrer">Markdown Here</a></h3>
<p>通过使用该插件，可以用 <code>Markdown</code> 来写一封漂亮的电子邮件。通常邮件都是没有格式的，通过该插件，可以实现将 <code>Markdown</code> 语法的邮件转换为想要的效果。</p>
<p>而使用步骤也很简单：</p>
<ol>
<li>在邮件客户端的富文本编辑器中编写 <code>Markdown</code> 格式的邮件内容。</li>
<li>接着在编辑区右键后选择 <code>Markdown 转换</code> 即可。</li>
</ol>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> 1、<a href="https://kuboard.cn/" target="_blank" rel="noopener noreferrer">Kuboard</a></h3>
<p><code>Kubernetes</code> 多集群管理界面，同时提供了 <code>Kubernetes</code> 教程，为使用 <code>Kubernetes</code>  落地 <code>Cloud</code> 微服务的任务提供实战经验。</p>
<figure><figcaption></figcaption></figure>
<h3> 2、<a href="https://pycharm.iswbm.com/" target="_blank" rel="noopener noreferrer">PyCharm 中文指南</a></h3>
<p>作者使用 <code>PyCharm</code> 的多年经验总结，既包含面向初学者零基础的入门使用技巧，也提供了大量案例来讲解可提高工作效率的高级技巧。</p>
<figure><figcaption></figcaption></figure>
<h3> 3、<a href="https://github.com/hollischuang/toBeTopJavaer" target="_blank" rel="noopener noreferrer">toBeTopJavaer</a></h3>
<p><code>Java</code> 工程师成神之路，作者是阿里巴巴技术专家 <code>Hollis</code>。总结了作为 <code>Java</code> 开发者需要掌握的基础知识点，主要包括面向对象、基础数据类型、自动拆装箱、字符串、序列化、反射等知识点，较为全面地覆盖了 <code>Java</code> 开发者日常工作中需要用到的大部分基础知识。</p>
<p>目前也已经正式出版，在豆瓣开出了 <code>8.5</code> 的评分， 非常值得一读！</p>
<figure><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">电子书</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/weekly/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<h2> 🎬️ 广告</h2>
<p>作为程序员，掌握数据结构与算法的重要性就不言而喻了。掌握了数据结构与算法，可以说你的编程能力就会有质的飞跃。任凭各种热门技术的如何变化，只要掌握了核心技能，那都可以见招拆招，做一个“赢家”。</p>
<p>专栏共分为 4 个由浅入深的模块：</p>
<ul>
<li>入门篇</li>
<li>基础篇</li>
<li>高级篇</li>
<li>实战篇</li>
</ul>
<p>作者采用最适合工程师的学习方式，不拘泥于某一特定编程语言，从实际开发场景出发，由浅入深教你学习数据结构与算法的方法，帮你搞懂基本概念和核心理论，深入理解算法精髓，帮你提升使用数据结构和算法思维解决问题的能力。</p>
<p>想要进一步提升自己的竞争力么，那就赶紧加入和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#3：Java 学习面试指南</title>
    <id>https://cunyu1943.github.io/weekly/2023/0429-0505.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0429-0505.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#3：Java 学习面试指南</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/vNyT3cSSxUMy9LuD6t91ag" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/vNyT3cSSxUMy9LuD6t91ag</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#3：Java 学习面试指南</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/vNyT3cSSxUMy9LuD6t91ag" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/vNyT3cSSxUMy9LuD6t91ag</a></p>
</div>
<h2> 一、项目</h2>
<h3> 1、<a href="https://github.com/Yidadaa/ChatGPT-Next-Web" target="_blank" rel="noopener noreferrer">ChatGPT-Next-Web</a></h3>
<p>只要能申请到 <code>OpenAI API</code> 的 <code>key</code>，就能够通过该项目一键拥有你自己的 <code>ChatGPT</code> 网页服务，主要有以下功能：</p>
<ul>
<li>在 1 分钟内使用 <code>Vercel</code> <strong>免费一键部署</strong></li>
<li>精心设计的 <code>UI</code>，响应式设计，支持深色模式，支持 <code>PWA</code></li>
<li>极快的首屏加载速度（~<code>100kb</code>），支持流式响应</li>
<li>隐私安全，所有数据保存在用户浏览器本地</li>
<li>海量的内置 <code>prompt</code> 列表</li>
<li>自动压缩上下文聊天记录，在节省 <code>Token</code> 的同时支持超长对话</li>
<li>一键导出聊天记录，完整的 <code>Markdown</code> 支持</li>
<li>拥有自己的域名？好上加好，绑定后即可在任何地方无障碍快速访问</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 2、<a href="https://github.com/Significant-Gravitas/Auto-GPT" target="_blank" rel="noopener noreferrer">Auto-GPT</a></h3>
<p>一个实验性的开源项目，展示了 <code>GPT-4</code> 语言的模型。该项目由 <code>GPT-4</code> 驱动，将 <code>LLM</code> 的“思想”链接在一起，以自主地实现设定的任何目标。作为 <code>GPT-4</code> 完全自主运行的第一个例子，拓展了 <code>AI</code> 的可能性。</p>
<p>主要特性如下：</p>
<ul>
<li>可用于搜索和信息收集的网络接入</li>
<li><code>LSTM</code> 管理</li>
<li>基于 <code>GPT-4</code> 的文本生成实例</li>
<li>接入主流网站和平台</li>
<li>利用 <code>GPT-3.5</code> 进行文件存储和摘要</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 3、<a href="https://github.com/reworkd/AgentGPT" target="_blank" rel="noopener noreferrer">AgentGPT</a></h3>
<p>类似于 <code>ChatGPT-Next-Web</code>，拥有自己的 <code>OpenAI API</code> 的 <code>key</code> 之后，就能通部署自己的 <code>AI</code> 助理。该项目基于 <code>NextJs</code> + <code>Typescript</code> 技术栈开发，不仅支持自己手动部署，还支持 <code>Docker</code>，可以说是十分方便了！</p>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> 1、<a href="https://www.yuque.com/" target="_blank" rel="noopener noreferrer">语雀</a></h3>
<p>新一代知识构建与分享工具。「语雀」是蚂蚁集团旗下的文档与知识库工具，源自蚂蚁集团和阿里巴巴内部文档协同需求，2018 年 1 月 8 日正式对外提供服务，现已服务于数十万企业组织和数百万个人用户。</p>
<p>官方愿景从最初的为了给开发者提供一个好用的工具来撰写技术文档，逐渐发展为致力为每个人和团队提供一款顺手的工具，让知识得以记录、沉淀和交流，让大家都能在语雀中平等快乐地创作与交流知识。</p>
<figure><figcaption></figcaption></figure>
<h3> 2、<a href="https://www.ieway.cn/evcapture.html" target="_blank" rel="noopener noreferrer">EV 录屏</a></h3>
<p>一款免费无水印，集视频录制与直播功能于一身的桌面录屏软件。</p>
<p>官方号称无水印、无限制，想录就录！承诺以下功能使用无限制，永久免费：</p>
<ol>
<li>组合录制</li>
<li>音频采集</li>
<li>场景编辑</li>
<li>直播推流</li>
<li>定时录制</li>
</ol>
<figure><figcaption></figcaption></figure>
<h3> 3、<a href="https://minnote.v8cloud.cn/index.html" target="_blank" rel="noopener noreferrer">极简笔记</a></h3>
<p>一款现代化的 <code>Markdown</code> 笔记软件，能够在 <code>Windows</code>、<code>Linux</code>、<code>Mac</code> 系统、<code>iPhone</code> 以及安卓平台进行数据同步。</p>
<p>分为基础版和 <code>Pro</code> 版，<code>Pro</code> 版本订阅一个月需 <code>$1.5</code> ，订阅一年仅需 <code>$15</code>.相比于基础版，提供更好的数据安全服务，具体功能如下：</p>
<ol>
<li>提供数据自动保存、笔记快照功能。</li>
<li>提供笔记导入导出功能，一键导出所有笔记到本地。</li>
<li>多样化的主题功能，能够选择更多的主题，并能够定制主题。</li>
<li>使用插件功能，能够自己编写插件，且能够使用别人共享的插件。</li>
</ol>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> 1、<a href="https://www.tangrenjie.tv/" target="_blank" rel="noopener noreferrer">唐人街影视</a></h3>
<p>致力于为海外华人提供影视观看的网站，站点不提供任何视听上传服务，所有内容均来自互联网其他分享站所提供的公开引用资源。</p>
<figure><figcaption></figcaption></figure>
<h3> 2、<a href="https://jsoncrack.com/editor" target="_blank" rel="noopener noreferrer">JSON Crack</a></h3>
<p><code>JSON Crack</code> 是一个很方便的 <code>JSON</code> 数据可视化工具。该项目并非简单的展示 <code>JSON</code> 数据，而是将其转化为类似思维导图的形式，支持放大/缩小、展开/收缩、搜索节点、导出图片等操作，对于经常和 <code>JSON</code> 格式的数据打交道的人会非常有帮助。</p>
<figure><figcaption></figcaption></figure>
<h3> 3、<a href="https://www.jsdelivr.com/" target="_blank" rel="noopener noreferrer">jsDelivr</a></h3>
<p><code>JSDelivr</code> 是一款开源的免费公共 <code>CDN</code>，是目前第二受欢迎的公共 <code>CDN</code>，并在 2020 年 10 月 14 日称为 <code>Bootstrap</code> 的官方 <code>CDN</code>，其稳定性不言而喻。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> <a href="https://microsoftedge.microsoft.com/addons/detail/tampermonkey/iikmkjmpaadaobahmlepeloendndfphd" target="_blank" rel="noopener noreferrer">Tampermonkey</a></h3>
<p>中文名又叫油猴，是一个用户脚本管理器。它本身是无法为我们发挥什么作用的，它主要依靠各大社区编写的扩展脚本（<code>JavaScript</code> 代码）运行在浏览器上，来改变被访问网页的功能，提升我们的网页浏览体验 。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://violentmonkey.github.io/" target="_blank" rel="noopener noreferrer">Violentmonkey</a></h3>
<p>暴力猴是一款与 <code>Tampermonkey</code> 齐名的浏览器插件管理工具，为浏览器提供用户脚本支持。 它适用于支持 <code>WebExtensions</code> 的浏览器。支持 <code>Userscripts.org</code>、<code>GreasyFork</code>、<code>OpenUserJS</code> 三大脚本下载源，拥有丰富实用的油猴脚本。</p>
<p>插件特点：</p>
<ol>
<li>脚本根据元数据自动更新。</li>
<li>脚本将按照列表中所示的顺序执行。</li>
<li>支持 <code>GM</code> 功能。</li>
<li>支持从 <code>zip</code> 文件导入和导出。</li>
<li>同步到 <code>Dropbox</code> 和 <code>OneDrive</code>！</li>
</ol>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://microsoftedge.microsoft.com/addons/detail/%E8%94%9A%E8%93%9D%E4%B8%BB%E9%A1%B5/epgghbgfoacieppkngapakodnbkhpldj" target="_blank" rel="noopener noreferrer">蔚蓝主页</a></h3>
<p>蔚蓝主页是一款浏览器主页/新标签页，主要为用户提供搜索服务、网址导航服务。</p>
<p>区别于传统的主页或网址导航，是一款独特、有所分别的产品。产品核心理念是简洁、存粹，采用了简洁的页面设计，对主要功能加以提炼，让用户能更纯粹的享受该浏览器主页插件所带来的便利。</p>
<figure><img src="https://cunyu1943.github.io/static/imgs/article/weekly-2023/blue-homepage.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> <a href="https://github.com/CyC2018/CS-Notes" target="_blank" rel="noopener noreferrer">CS-Notes</a></h3>
<p>技术面试必备，囊括算法、操作系统、网络、面向对象、数据库、<code>Java</code>、系统设计、工具、编码实践等诸多方面的内容，截止本文发布时在 <code>Github</code> 已经收获了 163k <code>star</code>，足以见得大家对它的认可。</p>
<figure><img src="https://cunyu1943.github.io/static/imgs/article/weekly-2023/cs-notes.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> <a href="https://github.com/Snailclimb/JavaGuide" target="_blank" rel="noopener noreferrer">JavaGuide</a></h3>
<p><code>Java</code> 学习+面试指南，一份涵盖大部分 <code>Java</code> 程序员所需要掌握的核心知识。主要有以下方面的知识点总结：</p>
<ul>
<li>Java</li>
<li>计算机基础</li>
<li>数据库</li>
<li>开发工具</li>
<li>常用框架</li>
<li>系统设计</li>
<li>分布式</li>
<li>高性能</li>
<li>高可用</li>
<li>……</li>
</ul>
<p>截止本文发布时，已经在 <code>Github</code> 收获 133k <code>star</code>，比起 <code>CS-Notes</code> 也是不遑多让。</p>
<figure><img src="https://cunyu1943.github.io/static/imgs/article/weekly-2023/java-guide.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> <a href="https://github.com/doocs/advanced-java" target="_blank" rel="noopener noreferrer">advanced-java</a></h3>
<p>互联网 <code>Java</code> 工程师进阶知识完全扫盲：涵盖高并发、分布式、高可用、微服务、海量数据处理等领域知识。截止本文发布时，已经在 <code>Github</code> 收获 69k <code>star</code>。</p>
<figure><img src="https://cunyu1943.github.io/static/imgs/article/weekly-2023/advanced-java.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<hr>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>Github 地址</strong>：<a href="https://github.com/cunyu1943/JavaPark/" target="_blank" rel="noopener noreferrer">cunyu1943/JavaPark/</a>，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.site/weekly" target="_blank" rel="noopener noreferrer">cunyu1943.site</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐或项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/JavaPark/issues/21" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>作为程序员，掌握数据结构与算法的重要性就不言而喻了。掌握了数据结构与算法，可以说你的编程能力就会有质的飞跃。任凭各种热门技术的如何变化，只要掌握了核心技能，那都可以见招拆招，做一个“赢家”。</p>
<p>专栏共分为 4 个由浅入深的模块：</p>
<ul>
<li>入门篇</li>
<li>基础篇</li>
<li>高级篇</li>
<li>实战篇</li>
</ul>
<p>作者采用最适合工程师的学习方式，不拘泥于某一特定编程语言，从实际开发场景出发，由浅入深教你学习数据结构与算法的方法，帮你搞懂基本概念和核心理论，深入理解算法精髓，帮你提升使用数据结构和算法思维解决问题的能力。</p>
<p>想要进一步提升自己的竞争力么，那就赶紧加入和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#4：每天一条 JS 小技巧</title>
    <id>https://cunyu1943.github.io/weekly/2023/0506-0512.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0506-0512.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#4：每天一条 JS 小技巧</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/Tg3n71-R2ya4go_W1imIgw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Tg3n71-R2ya4go_W1imIgw</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#4：每天一条 JS 小技巧</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/Tg3n71-R2ya4go_W1imIgw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Tg3n71-R2ya4go_W1imIgw</a></p>
</div>
<h2> 一、项目</h2>
<h3> <a href="https://github.com/jerryc127/hexo-theme-butterfly" target="_blank" rel="noopener noreferrer">hexo-theme-butterfly</a></h3>
<p>一款基于 <code>Hexo</code> 的主题，美观而又不失强大，支持以下功能：</p>
<ul>
<li>卡片化设计</li>
<li>支持二级目录</li>
<li>双栏设计</li>
<li>夜间模式</li>
<li>阅读模式</li>
<li>简繁体切换</li>
<li><code>Pjax</code></li>
<li>搜索</li>
<li>……</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://echarts.apache.org/zh/index.html" target="_blank" rel="noopener noreferrer">ECharts</a></h3>
<p>最初由百度开源的一个基于 <code>JavaScript</code> 的开源可视化图表库，后于 2018 年捐赠给 <code>Apache</code> 基金会。最新推出的 <code>Apache ECharts 5</code> 通过五大模块、十五项特性的全面升级，围绕可视化作品的叙事表达能力，让图“表”更能传“达”数据背后的故事，帮助开发者更轻松地创造满足各种场景需求的可视化作品。</p>
<p>五大模块，十五项特性分别是：</p>
<ol>
<li><strong>动态叙事</strong>
<ul>
<li>动态排序图</li>
<li>自定义系列动画</li>
</ul>
</li>
<li><strong>视觉设计</strong>
<ul>
<li>默认设计</li>
<li>标签</li>
<li>时间轴</li>
<li>提示框</li>
<li>仪表盘</li>
<li>扇形圆角</li>
</ul>
</li>
<li><strong>交互能力</strong>
<ul>
<li>状态管理</li>
<li>性能提升</li>
</ul>
</li>
<li><strong>开发体验</strong>
<ul>
<li>数据集</li>
<li>国际化</li>
<li><code>TypeScript</code> 重构</li>
</ul>
</li>
<li>可访问性
<ul>
<li>主题配色</li>
<li>贴花图案</li>
</ul>
</li>
</ol>
<figure><figcaption></figcaption></figure>
<h3> <a href="http://www.magicalcoder.com/" target="_blank" rel="noopener noreferrer">Magic Coder</a></h3>
<p>低代码应用开发平台，面向零基础、拖拽式、可视化，甚至零基础的人员都能搭建出想要的效果。</p>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> <a href="https://github.com/SuperStudio/SuperCom" target="_blank" rel="noopener noreferrer">SuperCom</a></h3>
<p>超级串口调试工具，用于 <code>Window</code> 串口日志的采集、存储、可视化等功能，最重要的是免费开源，具有以下特点：</p>
<ul>
<li>可同时打开多个串口监听</li>
<li>串口日志自动保存</li>
<li>串口日志支持滚屏/固定</li>
<li>波特率、位大小等串口设置可设置</li>
<li>可发送各种 <code>AT</code> 指令</li>
<li>……</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://www.alfredapp.com/" target="_blank" rel="noopener noreferrer">Alfred</a></h3>
<p><code>Alfred</code> 是一款屡获殊荣的 <code>macOS</code> 应用程序，它通过热键、关键字、文本扩展等提高您的效率。搜索您的 <code>Mac</code> 和网络，并通过自定义操作来控制您的 <code>Mac</code>，从而提高工作效率。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://todo.microsoft.com/" target="_blank" rel="noopener noreferrer">Microsoft Todo</a></h3>
<p>微软 <code>Todo</code> 是微软官方出品的一款轻量和智能的待办清单应用，它是 <code>Wunderlist</code> 的继任者，无论是工作计划，个人生活或家庭学习，它都一样可以帮助你更轻松地完成既定的计划。应用还支持 <code>iPhone</code>、安卓、<code>Windows</code> 和网页间无缝同步，多个设备也不必担心。</p>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> <a href="https://mirrors.cernet.edu.cn/" target="_blank" rel="noopener noreferrer">校园网联合镜像站</a></h3>
<p>站点提供对校园网镜像站的索引和跳转服务，仅索引各镜像站的元数据信息，具体内容由各镜像站提供，而且站点还获得了中国教育和科研计算机网网络中心的支持和帮助。</p>
<p>主要包含了操作系统、应用以及字体三方面资源的镜像，让下载更快一步！</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="http://www.alloyteam.com/nav/" target="_blank" rel="noopener noreferrer">Web 前端导航</a></h3>
<p>汇集了众多前端资源的导航，主要包含了以下资源：</p>
<ul>
<li><code>IDE</code></li>
<li>图标字体</li>
<li>在线工具</li>
<li>框架类库</li>
<li>前端门户</li>
<li>前端大会</li>
<li>开发平台</li>
<li>设计资源</li>
<li>……</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://badges.toozhao.com/" target="_blank" rel="noopener noreferrer">Badger</a></h3>
<p>为你的网站生成独一无二的 <code>SVG</code> 图片，只要将该图片放到你网站的对应界面，就能通过它统计出该页面被访问的次数，一般用在 <code>Github</code> 主页统计访客数。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> <a href="https://microsoftedge.microsoft.com/addons/detail/microsoft-%E7%BC%96%E8%BE%91%E5%99%A8%E6%8B%BC%E5%86%99%E5%92%8C%E8%AF%AD%E6%B3%95%E6%A3%80%E6%9F%A5%E5%99%A8/hokifickgkhplphjiodbggjmoafhignh?hl=zh-CN" target="_blank" rel="noopener noreferrer">Microsoft 编辑器</a></h3>
<p>你的智能写作助手。编辑器跨多个网站提供语法、拼写和风格建议，帮助你自信地写出清晰、简洁的文章和电子邮件。</p>
<ul>
<li>新增功能: 多语言校对、忽略选项。同时检查最多三种语言的拼写和语法。此外，拼写检查现在可用于泰语。还可通过选择“全部忽略”来轻松跳过所有拼写更正，或通过选择“忽略”跳过不需要的语法建议。</li>
<li>智能写作助手：提供免费的语法、拼写和标点校对基础支持。通过高级版(需要 <code>Microsoft 365</code> 订阅)，可在清晰度、简洁性、正式性、词汇等问题上获得高级语法建议和风格检查。</li>
<li>随时随地写作：在 <code>LinkedIn</code>、<code>Gmail</code>、<code>Facebook</code> 以及诸多其他你喜欢的带有此浏览器扩展的网站上获取写作助手。如果希望在 <code>Web</code> 之外获得编辑器的帮助，请打开 <code>Word</code> 并查找编辑器图标，以了解编辑器如何在你撰写文档和电子邮件时提供帮助。</li>
<li>提供多种语言：编辑器检查 <code>80</code> 多种语言的拼写，并提供以这些语言的语法检查和书写风格改进。</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://microsoftedge.microsoft.com/addons/detail/infinity-%E6%96%B0%E6%A0%87%E7%AD%BE%E9%A1%B5-pro/hajlmbnnniemimmaehcefkamdadpjlfa?hl=zh-CN" target="_blank" rel="noopener noreferrer">Infinity Pro</a></h3>
<p>全球上百万用户选择的最佳新标签页，功能包括：网站图标，搜索引擎，高清壁纸，书签管理、天气、笔记、待办事项、扩展管理、历史记录等。<br>
<code>Infinity</code> 新标签页 (<code>Pro</code>) 是一款基于 <code>html5</code> 开发的扩展程序，它能够替换浏览器的起始页与新标签页，提升其美观性与生产力。</p>
<p><code>Infinity</code> 独创了多种强大且实用的功能，可以让您以任何喜欢的方式来打造新标签页。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://microsoftedge.microsoft.com/addons/detail/dark-reader/ifoakfbpdcdoeenechcleahebpibofpc?hl=zh-CN" target="_blank" rel="noopener noreferrer">Dark Reader</a></h3>
<p>一个护眼扩展程序，通过实时生成黑暗主题，为每一个网站启用夜间模式。<code>Dark Reader</code> 反转明亮的颜色，使网页内容具有高对比度并易于在夜间阅读。</p>
<p>可以调整亮度、对比度，应用棕褐色滤镜、黑暗模式，设置字体和忽略的网站列表。</p>
<p>最重要的一点，<code>Dark Reader</code> 无广告，也不会向任何地方发送用户的数据。</p>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> <a href="https://www.jstips.co/" target="_blank" rel="noopener noreferrer">Js Tips</a></h3>
<p>每天一条 <code>JavaScript</code> 小技巧。只需要花上两分钟的时间，就能读到性能、框架、约定、技巧、面试问题等有助于提高编写代码效率的小技巧。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://developer.mozilla.org/zh-CN/docs/Learn" target="_blank" rel="noopener noreferrer">MDN Web Docs</a></h3>
<p>为零基础 <code>Web</code> 开发初学者提供指导和开始编写网站代码所需要掌握的所有内容。内容更偏向于帮助你入门，如果想要学习更加深入的内容，那就需要靠自己去钻研了。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/AobingJava/JavaFamily" target="_blank" rel="noopener noreferrer">JavaFamily</a></h3>
<p>【<code>Java</code> 面试 + <code>Java</code> 学习指南】 一份涵盖大部分 <code>Java</code> 程序员所需要掌握的核心知识。包含学习路线、<code>Java</code> 基础、计算机操作系统、计算机网络、框架、数据库等多方面的内容。</p>
<figure><figcaption></figcaption></figure>
<hr>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">电子书</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/weekly/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#5：前端开发必备资源站</title>
    <id>https://cunyu1943.github.io/weekly/2023/0513-0519.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0513-0519.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#5：前端开发必备资源站</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/kbKCzyn7OtG4iuJEWtQkWA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/kbKCzyn7OtG4iuJEWtQkWA</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#5：前端开发必备资源站</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/kbKCzyn7OtG4iuJEWtQkWA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/kbKCzyn7OtG4iuJEWtQkWA</a></p>
</div>
<h2> 一、项目</h2>
<h3> <a href="https://fastapi.tiangolo.com/zh/" target="_blank" rel="noopener noreferrer">FastAPI</a></h3>
<p><code>FastAPI</code> 是一个用于构建 <code>API</code> 的现代、快速（高性能）的 <code>web</code> 框架，使用 <code>Python</code> 3.6+ 并基于标准的 <code>Python</code> 类型提示。关键特性如下:</p>
<ul>
<li><strong>快速</strong>：可与 <code>NodeJS</code> 和 <code>Go</code> 并肩的极高性能（归功于 <code>Starlette</code> 和 <code>Pydantic</code>），是最快的 <code>Python web</code> 框架之一。</li>
<li><strong>高效编码</strong>：提高功能开发速度约 <code>200％</code> 至 <code>300％</code>。</li>
<li><strong>更少 <code>bug</code></strong>：减少约 40％ 的人为（开发者）导致错误。</li>
<li><strong>智能</strong>：极佳的编辑器支持。处处皆可自动补全，减少调试时间。</li>
<li><strong>简单</strong>：设计的易于使用和学习，阅读文档的时间更短。</li>
<li><strong>简短</strong>：使代码重复最小化。通过不同的参数声明实现丰富功能，<code>bug</code> 更少。</li>
<li><strong>健壮</strong>：生产可用级别的代码。还有自动生成的交互式文档。</li>
<li><strong>标准化</strong>：基于（并完全兼容）<code>API</code> 的相关开放标准。</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/smart-doc-group/smart-doc" target="_blank" rel="noopener noreferrer">Smart-Doc</a></h3>
<p><code>smart-doc</code> 是一款同时支持 <code>JAVA REST API</code>和 <code>Apache Dubbo RPC</code> 接口文档生成的工具，在业内率先提出基于 <code>Java</code> 泛型定义推导的理念， 完全基于接口源码来分析生成接口文档，不采用任何注解侵入到业务代码中。你只需要按照 <code>java-doc</code> 标准编写注释， <code>smart-doc</code> 就能帮你生成一个简易明了的 <code>Markdown</code>、<code>HTML5</code>、<code>Postman Collection2.0+</code>、<code>OpenAPI 3.0+</code> 的文档。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/xugaoyi/vuepress-theme-vdoing" target="_blank" rel="noopener noreferrer">vuepress-theme-voding</a></h3>
<p>一款简洁高效的 <code>VuePress</code> 知识管理 &amp; 博客主题，具有以下三大特点：</p>
<ol>
<li><strong>知识管理</strong>：包含三种典型的知识管理形态：结构化、碎片化、体系化。轻松打造属于你自己的知识管理平台。</li>
<li><strong>简洁高效</strong>：以 <code>Markdown</code> 为中心的项目结构，内置自动化工具，以更少的配置完成更多的事。配合多维索引快速定位每个知识点。</li>
<li><strong>沉浸式阅读</strong>：专为阅读设计的 <code>UI</code>，配合多种颜色模式、可关闭的侧边栏和导航栏，带给你一种沉浸式阅读体验。</li>
</ol>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> <a href="https://github.com/Schniz/fnm" target="_blank" rel="noopener noreferrer">fnm</a></h3>
<p><code>fnm</code> 是一个基于 <code>Rust</code> 的 <code>Node.js</code> 版本管理工具，可用于替换 <code>Node Version Manager（nvm）</code>，跨平台支持（<code>macOS</code>、<code>Linux</code>、<code>Windows</code>）。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://inkscape.org/zh-hans/" target="_blank" rel="noopener noreferrer">Inkscape</a></h3>
<p>一个强大，免费的设计工具<br>
无论你是插画师，设计师，网页设计者还是仅想创作一些矢量图的新手，<code>Inkscape</code> 都适合你。</p>
<p>该软件的开发目标是成为强大的绘图软件，且能完全遵循与支持 <code>XML</code>、<code>SVG</code> 及 <code>CSS</code> 等开放性的标准格式，而且是跨平台的应用程序，支持<code>Windows</code>、<code>macOS</code>、<code>Linux</code> 及类 <code>UNIX</code> 版等操作系统，具有以下特点：</p>
<ul>
<li>灵活的绘图工具</li>
<li>支持多种文件格式</li>
<li>强大的文本工具</li>
<li>贝塞尔曲线和螺旋线</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://cubox.pro/" target="_blank" rel="noopener noreferrer">Cubox</a></h3>
<p>在信息碎片中，重获专注。<br>
一站式信息收集、阅读、管理和回顾，善用网络碎片构建个人知识库。<br>
适用于网页, <code>iOS</code>, <code>iPadOS</code>, <code>macOS</code>, <code>Android</code>, <code>Windows</code>, 微信等多个终端。</p>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> <a href="https://www.iconfont.cn/" target="_blank" rel="noopener noreferrer">iconfont</a></h3>
<p>阿里巴巴矢量图标库。阿里妈妈 <code>MUX</code> 倾力打造的矢量图标管理、交流平台，设计师将图标上传到 <code>iconfont</code> 平台，用户可以自定义下载多种格式的 <code>icon</code>，平台也可将图标转换为字体，便于前端工程师自由调整与调用。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://iconpark.oceanengine.com/" target="_blank" rel="noopener noreferrer">IconPark</a></h3>
<p><code>IconPark</code> 图标库是一个通过技术驱动矢量图标样式的开源图标库，由字节开源，可以实现根据单一 <code>SVG</code> 源文件变换出多种主题，具备丰富的分类、更轻量的代码和更灵活的使用场景；致力于构建高质量、统一化、可定义的图标资源，让大多数人都能够选择适合自己的风格图标。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://fontawesome.com/" target="_blank" rel="noopener noreferrer">Font Awesome</a></h3>
<p><code>Font Awesome</code> 是一个基于 <code>CSS</code> 和 <code>LESS</code> 的字体和图标工具包。它由 <code>Dave Gandy</code> 制作，用于 <code>Twitter Bootstrap</code>，后来被集成到<code>BootstrapCDN</code> 中。<code>Font Awesome</code> 在使用第三方 <code>Font Scripts</code> 的网站中占有 <code>20％</code> 的市场份额，排在 <code>Google</code> 字体之后的第二位。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> <a href="https://microsoftedge.microsoft.com/addons/detail/%E7%81%AB%E5%B1%B1%E7%BF%BB%E8%AF%91-%E5%88%92%E8%AF%8D%E5%92%8C%E7%BD%91%E9%A1%B5%E7%BF%BB%E8%AF%91/jmnhemdajboodicneejdlpanmijclhef" target="_blank" rel="noopener noreferrer">火山翻译</a></h3>
<p>字节跳动旗下机器翻译产品，支持网页全文翻译、划词翻译、英语词典、管理生词本、吐司弹词记忆等丰富能力。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://microsoftedge.microsoft.com/addons/detail/wetab%E6%96%B0%E6%A0%87%E7%AD%BE%E9%A1%B5/bpelnogcookhocnaokfpoeinibimbeff" target="_blank" rel="noopener noreferrer">WeTab 新标签页</a></h3>
<p><code>WeTab</code> 新标签页整合了 <code>ChatGPT</code>,自由使用 <code>ChatGPT</code>。<br>
<code>Wetab</code> 是一款可以亲手打造属于自己的高颜值主页的小组件新标签页插件，跟 <code>Infinity New Tab</code> 新标签页一样美观大气，跟 <code>iTab</code> 新标签页一样主打小组件功能。<code>iOS</code> 苹果小组件卡片设计，内置倒计时、纪念日、天气、热搜、计算器、等超酷小组件，让信息一目了然，标签页整洁美观。<br>
<code>Wetab</code> 好看、好用，还好玩，让你的标签页充满无限可能。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://www.monknow.com/zh-CN" target="_blank" rel="noopener noreferrer">MONKNOW 新标签页</a></h3>
<p>这是您梦寐以求的新标签页。支持网站网址 <code>URL</code> 分组管理，数据实时云同步，黑暗深色夜间主题模式。支持的功能如下：</p>
<ul>
<li>搜索 &amp; 快速拨号。</li>
<li>自动同步，只要创建一个账号就能自动同步。</li>
<li>图标分组，根据您的需要对您的图标分组。</li>
<li>添加自定义图标时，根据网页链接自动匹配官方图标图片。</li>
<li>自定义图标，您可以上传 <code>jpg</code>，<code>png</code>，<code>svg</code>，甚至 <code>gif</code> 作为您的图标图片。</li>
<li>自定义图标布局，您可以设置图标大小，间距，不透明度等等。</li>
<li>自定义壁纸，您可以上传 <code>jpg</code>，<code>png</code> 作为您的壁纸。</li>
<li>官方图标库包含数以千计的图标。</li>
<li>官方壁纸库包含数以千计的高清壁纸。</li>
<li>当您不活跃或每次打开新标签页时，展示待机页。</li>
<li>支持浅色和深色两种主题模式。</li>
<li>待办事项让您随时保持专注。</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> <a href="https://github.com/landy8530/DesignPatterns" target="_blank" rel="noopener noreferrer">DesignPatterns</a></h3>
<p>经典设计模式讲解以及项目实战（<code>Java</code> 版），主要内容有以下两方面：</p>
<ol>
<li>设计模式简介：主要介绍各种设计模式的概念和运用场景等。</li>
<li>设计模式综合运用：主要是笔者在实际工作中运用到的一些设计模式综合运用事例的提炼。</li>
</ol>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/Tyson0314/Java-learning" target="_blank" rel="noopener noreferrer">Java-learning</a></h3>
<p><code>Java</code> 相关知识总结，包括 <code>Java</code> 基础、<code>MySQL</code>、<code>SpringBoot</code>、<code>Mybatis</code>、<code>Redis</code>、<code>RabbitMQ</code> 等等，面试必备！</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/scutan90/DeepLearning-500-questions" target="_blank" rel="noopener noreferrer">深度学习500问</a></h3>
<p>深度学习 <code>500</code> 问，以问答形式对常用的概率知识、线性代数、机器学习、深度学习、计算机视觉等热点问题进行阐述，以帮助自己及有需要的读者。 全书分为 <code>18</code> 个章节，共计 <code>50</code> 余万字。</p>
<p>项目系统地描述了深度学习的基本理论算法及应用，先是论述了数学基础、机器学习基础和深度学习基础，接着介绍了一些经典网络及计算机视觉领域中常用的 <code>CNN</code>、<code>RNN</code>、<code>GAN</code> 等网络结构技术，然后介绍了深度学习在计算机视觉领域的目标检测及图像分割两大应用，最后则是介绍了计算机视觉领域主要的优化方法及思路等，包括迁移学习、网络架构及训练、网络优化技巧、超参数调整及模型的压缩和加速等。</p>
<figure><figcaption></figcaption></figure>
<hr>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">电子书</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/weekly/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#6：系统下载最优解</title>
    <id>https://cunyu1943.github.io/weekly/2023/0520-0526.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0520-0526.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#6：系统下载最优解</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/o6aLSsEfFcwgzbwQrKxqYg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/o6aLSsEfFcwgzbwQrKxqYg</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#6：系统下载最优解</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/o6aLSsEfFcwgzbwQrKxqYg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/o6aLSsEfFcwgzbwQrKxqYg</a></p>
</div>
<h2> 一、项目</h2>
<h3> <a href="https://halo.run/" target="_blank" rel="noopener noreferrer">Halo</a></h3>
<p>强大易用的开源建站工具，配合上丰富的模板与插件，帮助你构建你心中的理想站点。如果想搭建属于自己的博客，那它不失为一个好的选择。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/YunaiV/yudao-cloud" target="_blank" rel="noopener noreferrer">yudao-cloud</a></h3>
<p><code>ruoyi-vue-pro</code> 全新 <code>Cloud</code> 版本，优化重构所有功能。基于 <code>Spring Cloud Alibaba + MyBatis Plus + Vue &amp; Element</code> 实现的后台管理系统 + 用户小程序，支持 <code>RBAC</code> 动态权限、多租户、数据权限、工作流、三方登录、支付、短信、商城等功能。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/YunaiV/ruoyi-vue-pro" target="_blank" rel="noopener noreferrer">ruoyi-vue-pro</a></h3>
<p><code>RuoYi-Vue</code> 全新 <code>Pro</code> 版本，优化重构所有功能。基于 <code>Spring Boot + MyBatis Plus + Vue &amp; Element</code> 实现的后台管理系统 + 微信小程序，支持 <code>RBAC</code> 动态权限、数据权限、<code>SaaS</code> 多租户、<code>Flowable</code> 工作流、三方登录、支付、短信、商城等功能。</p>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> <a href="https://app.prntscr.com/zh-cn/" target="_blank" rel="noopener noreferrer">LightShot</a></h3>
<p><code>LightShot</code> 是一款跨平台屏幕截图工具，支持 <code>macOS</code> 和 <code>Windows</code>。使用它，轻点一下按键，便能存储屏幕上的一切内容。</p>
<p>除了能将图片保存在电脑硬盘中，软件还支持通过 <code>LightShot</code> 服务器（免费提供）将截图上传至互联网。</p>
<p>除了自定义截图和图片上传外，软件还支持 <code>Photoshop</code> 相类似的工具（支持图层、滤镜、色彩校正、笔刷等功能）在线编辑截图。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://www.faststonecapture.cn/" target="_blank" rel="noopener noreferrer">FastStone Capture</a></h3>
<p>一款超强大的截图软件，支持多种截图形式，包括捕获活动窗口、捕获窗口/对象、捕获矩形区域、捕获手绘区域、捕获全屏、滚动截屏。</p>
<p>除了截图功能外，软件的图片编辑功能也非常丰富，支持调整大小、绘图、添加标题、图片裁剪、重点突出、模糊等。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://picpick.app/zh/" target="_blank" rel="noopener noreferrer">PicPick</a></h3>
<p>一款全能的设计工具，并且这款工具适宜每个人使用。</p>
<p>一个全功能的屏幕截图工具,直观的图像编辑器,颜色选择器,颜色调色板,像素标尺,量角器,瞄准线和白板等等。</p>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> <a href="https://hellowindows.cn/#" target="_blank" rel="noopener noreferrer">Hello Windows</a></h3>
<p>一个无广告、无登录限制、无收费下载的 <code>Windows</code> 系统仓储站，更简单，更直观，更极致。</p>
<p>在这里可以找到全版本的 <code>Windows</code> 系统，而且均为官方原版，不用担心携带病毒等其它危害用户的问题。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://tb.rg-adguard.net/public.php" target="_blank" rel="noopener noreferrer">TechBench</a></h3>
<p>该项目将帮助您无需繁琐的搜索和注册即可直接从 <code>Microsoft</code> 服务器下载 <code>Windows</code> 操作系统、<code>Office</code> 应用程序、语言包和虚拟机。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://files.rg-adguard.net/" target="_blank" rel="noopener noreferrer">rg-adguard</a></h3>
<p><code>TechBench</code> 的后续版，截止目前 <code>TechBench</code> 已不再更新，后续更新都会到这里。除开提供了 <code>TechBench</code> 的功能外，还提供了主题、设计工具、应用等方面内容的下载。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> <a href="https://www.tingwu.cn/" target="_blank" rel="noopener noreferrer">听悟</a></h3>
<p>实时双语翻译字幕，一键高亮要点，智能提炼总结，高效记录、整理和共享音视频内容。<br>
多种字幕形态随心切换，自动区分发言人，总结关键词、议程、摘要、待办事项和问题。支持一键导出和公开分享。</p>
<p>丰富场景，皆可听悟</p>
<ul>
<li>线上会议：清晰记录沟通细节，智能总结待办、议程，会议信息无损传递</li>
<li>面试访谈：自动记录会话内容，智能总结问答、摘要，总结整理高效轻松</li>
<li>课程学习：双语课程完整记录，自动提取要点、问答，随时回顾知识点</li>
<li>视频浏览：实时双语翻译字幕，英文视频随心看，信息获取更高效</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://chrome.google.com/webstore/detail/aitutu-chatgpt-sidebar-as/emlhccamlobhceppbjdaikinbamncbcl" target="_blank" rel="noopener noreferrer">AiTuTu ChatGPT侧边栏智能助手</a></h3>
<p><code>AiTuTu</code> 是由 <code>OpenAI</code> 的 <code>ChatGPT</code> 提供支持，支持浏览网站可快速唤醒的人工智能助手；在网页侧边显示，支持自由提问，选中内容一键改写成不同类型文案。</p>
<p>✅ 国内可用，无需科学，无需 <code>KEY</code>，欢迎推荐安装！</p>
<p>聊天：在浏览网页时，遇到任何问题，都可以向它提问，包括文案写作、代码生成、问题查找等。<br>
选中文本快捷操作：浏览网页时，支持将选中的网页文本内容进行以下快捷操作：</p>
<ol>
<li>在不改变原意的前提下改成新的版本；</li>
<li>翻译成英文；</li>
<li>改写成小红书风格文案；</li>
<li>改写成微博风格文案；</li>
<li>将商品标题、介绍生成新的商品标题简介。</li>
</ol>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://microsoftedge.microsoft.com/addons/detail/%E5%AD%97%E5%B9%95%E7%B2%BE%E7%81%B5-%E5%AE%9E%E6%97%B6%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E3%80%81ai%E5%AD%97%E5%B9%95%E7%BF%BB%E8%AF%91/hodednmbnoemidigafhfpbfcafhjlkki?hl=zh-CN" target="_blank" rel="noopener noreferrer">字幕精灵</a></h3>
<p>看海外网剧、学习两不误，新译字幕精灵来相助，基于浏览器的字幕翻译神器。<br>
您是否遭遇过这些烦恼：</p>
<ol>
<li>想要学习国际前沿的技术提升自我，却苦于听不懂外语视频教程/资料？</li>
<li>终于等来了心爱产品的发布会，可惜没有中文字幕？</li>
<li>苦苦等到美剧、国外综艺、日漫更新，还要等中文字幕版？</li>
</ol>
<p>以上烦恼，字幕精灵-AI 字幕翻译插件都能帮您解决！</p>
<p>字幕精灵由新译科技推出，可实时识别语音，自动翻译并展示双语字幕。</p>
<p>借助先进的语音识别和 <code>AI</code> 翻译技术，无论是听演讲、看课程，还是追剧、听歌，字幕精灵都能快速识别、翻译，并自动生成字幕，让您无惧外语，不再不知所云。</p>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> <a href="https://springdoc.cn/" target="_blank" rel="noopener noreferrer">Spring 中文文档</a></h3>
<p>提供最新的 <code>Spring Boot</code>, <code>Spring Cloud</code>, <code>Spring Security</code> 等 <code>Spring</code> 框架的官方中文文档。对于想及时追踪 <code>Spring</code> 最新更新，但英语基础不太好的同学是一个绝佳的选择。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://mofanpy.com/" target="_blank" rel="noopener noreferrer">莫烦 Python</a></h3>
<p>汇聚了 <code>Python</code> 基础、机器学习、数据处理、效率工具等多方面内容。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://www.hello-algo.com/" target="_blank" rel="noopener noreferrer">Hello 算法</a></h3>
<p>《Hello 算法》是一本动画图解、能运行、可提问的数据结构与算法入门书，支持 <code>Java</code>, <code>C++</code>, <code>Python</code>, <code>Go</code>, <code>JS</code>, <code>TS</code>, <code>C#</code>, <code>Swift</code>, <code>Zig</code> 等语言。</p>
<figure><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">电子书</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/weekly/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#7：炫酷的浏览器标签页</title>
    <id>https://cunyu1943.github.io/weekly/2023/0527-0602.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0527-0602.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#7：炫酷的浏览器标签页</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/s3NpyL6JeybdJfHurlOakw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/s3NpyL6JeybdJfHurlOakw</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#7：炫酷的浏览器标签页</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/s3NpyL6JeybdJfHurlOakw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/s3NpyL6JeybdJfHurlOakw</a></p>
</div>
<h2> 一、项目</h2>
<h3> <a href="https://github.com/Qexo/Qexo" target="_blank" rel="noopener noreferrer">Qexo</a></h3>
<p>一个快速、强大、漂亮的在线 <code>Hexo</code> 编辑器，支持以下功能：</p>
<ul>
<li>自定义图床上传图片</li>
<li>在线配置编辑</li>
<li>在线页面管理</li>
<li>开放 <code>API</code></li>
<li>自动检查更新</li>
<li>在线一键更新</li>
<li>快速接入友情链接</li>
<li>简单的说说短文</li>
<li>类似不算子的统计</li>
<li>自动填文章模板</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/imaegoo/twikoo" target="_blank" rel="noopener noreferrer">Twikoo</a></h3>
<p>一个简洁、安全、免费的静态网站评论系统，具有以下特点：</p>
<ul>
<li>简单</li>
<li>易用</li>
<li>安全</li>
<li>即时</li>
<li>个性</li>
<li>便捷管理</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/illacloud/illa-builder" target="_blank" rel="noopener noreferrer">ILLA Builder</a></h3>
<p><code>ILLA</code> 是一个强大的开源低代码平台，供开发人员构建内部工具。 通过使用 <code>ILLA</code> 的组件和操作库，开发人员可以节省大量构建工具的时间，具有以下特色功能：</p>
<ul>
<li>⚽ 实时协作： 我们可以一起实时创建内容。</li>
<li>🛠 自定义插件： 构建自定义插件来完成你的任务。</li>
<li>🤖 自动化支持： 连接一切组件，并在 5 秒内实现自动化。</li>
<li>🖥 本地部署： 支持 <code>Docker</code> 和 <code>k8s</code></li>
<li>📝 <code>Page</code>支持： 创建内容丰富且 <code>UI</code> 友好的工具的基础。</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> <a href="https://iina.io/" target="_blank" rel="noopener noreferrer">IINA</a></h3>
<p>一款类 <code>macOS</code> 原生视频播放器，简洁优雅而不失强大。无论是视频解码还是字幕渲染，<code>IINA</code> 都无可挑剔。此外，<code>IINA</code> 支持在线字幕下载、画中画、视频串流等丰富的功能，充分满足你对一款视频播放器所有的幻想。而且最重要的一点，<code>IINA</code> 是完全免费的。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="http://ppduck.com/" target="_blank" rel="noopener noreferrer">PP 鸭</a></h3>
<p>PP鸭整合了业内最优秀的数种开源的图片压缩算法，会自动根据图片特征自动选择压缩参数。只需要将图片拖入 PP鸭，就能自动批量压缩，省时省心。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://photobulkeditor.com/" target="_blank" rel="noopener noreferrer">PhotoBulk</a></h3>
<p>PhotoBulk 是一款 <code>Mac</code> 平台的图片批量水印工具，无论是文字类还是图片类的水印，<code>PhotoBulk</code> 都能替你加上，通过两侧写着 <code>text</code> 和 <code>image</code> 的开关就能调节。对于水印，软件提供了一些最基本的设置，比如文字的字体、大小，图片的分辨率、透明度等。</p>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> <a href="https://www.aewz.com/" target="_blank" rel="noopener noreferrer">简视频</a></h3>
<p>致力打造好用的视频创作导航，汇聚了视频创作时所需的视频素材、图片素材、制作工具、字幕配音、音乐素材等众多实用性网站。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://starchart.cc/" target="_blank" rel="noopener noreferrer">Star Charts</a></h3>
<p>根据输入的 <code>Github</code> 账户及仓库名，生成随时间推移绘制仓库收获的 <code>star</code> 数量。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://simpleicons.org/" target="_blank" rel="noopener noreferrer">Simple Icons</a></h3>
<p>包含 2461 种流行品牌的免费 <code>SVG</code> 图标库，在我们前端开发需要找对应品牌 <code>Logo</code> 时绝对是不二之选。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> <a href="https://toast.pub/washbaidu/" target="_blank" rel="noopener noreferrer">Washbaidu</a></h3>
<p>优化百度搜索界面，移除过度广告，提升百度体验。</p>
<p>简洁，隐私安全，无数据及网络权限要求。</p>
<p>百度作为老牌搜索引擎，在中文搜索内容和可达性上还是有优势。但界面太复杂、广告偏多。</p>
<p>插件简化了界面，轻度移除了广告，支持自定义头图，提升搜索体验。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://microsoftedge.microsoft.com/addons/detail/%E9%9D%92%E6%9F%A0%E8%B5%B7%E5%A7%8B%E9%A1%B5/pcpnigdkpcgemocnjhebmajldpjlbeom" target="_blank" rel="noopener noreferrer">青柠起始页</a></h3>
<p>青柠起始页是一个简洁、美观、实用的浏览器起始页，以优雅的界面容纳了多引擎搜索、网站捷径、便笺、壁纸、天气等诸多功能。<br>
您可依据喜好对青柠起始页进行高度自定义，让您的网上冲浪体验更加随心所欲。</p>
<p>此扩展由青柠起始页官方开发，主要功能包括：</p>
<ul>
<li>
<p>新标签页：将您的浏览器新标签页替换为青柠起始页。</p>
</li>
<li>
<p>多引擎搜索：使用您喜欢的任意搜索引擎，或在百度、必应、谷歌等主流搜索引擎之间一键切换。</p>
</li>
<li>
<p>网站捷径：添加您的常用网站，一键快捷访问。</p>
</li>
<li>
<p>便笺：随时记录您的灵感、待办事项和备忘清单。还可将便笺固定到主屏幕，或创建倒数日计时。</p>
</li>
<li>
<p>壁纸：将您喜爱的任意图片设为壁纸，或使用我们精心挑选的静态 / 动态风景壁纸、每日更新的必应壁纸。</p>
</li>
<li>
<p>一言：每次打开新标签页时，随机显示一句诗词 / 格言。</p>
</li>
<li>
<p>个性化设置：多达 30 余项自定义项目，打造专属于您的新标签页。</p>
</li>
<li>
<p>云同步：网站捷径、便笺、个性化设置等支持跨设备云同步，帮助您在不同设备间流畅切换。</p>
</li>
<li>
<p>美化百度搜索结果页面：为百度使用经过精心设计的界面样式和夜间模式 / 深色主题（默认关闭，可在扩展设置中开启）。</p>
</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://itab.link/?from=jjcj" target="_blank" rel="noopener noreferrer">iTab</a></h3>
<p><code>iTab</code> 是新一代组件式标签页的首创者，是您打造个人学习工作台的浏览器必备插件。简洁美观高效无广，获得了数百万用户的一致好评，支持如下功能：</p>
<ul>
<li><code>iOS</code> 式小组件</li>
<li>聚合搜索</li>
<li>自定义功能</li>
<li>极简模式</li>
<li>多端数据即时同步与备份</li>
<li>海量精美壁纸</li>
<li>海量精选网站资源</li>
<li>浏览器书签管理</li>
<li>……</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> <a href="https://oi-wiki.org/" target="_blank" rel="noopener noreferrer">OI Wiki</a></h3>
<p>致力于成为一个免费开放且持续更新的 <strong>编程竞赛（competitive programming）</strong> 知识整合站点，大家可以在这里获取与竞赛相关的、有趣又实用的知识。我们为大家准备了竞赛中的基础知识、常见题型、解题思路以及常用工具等内容，帮助大家更快速深入地学习编程竞赛中涉及到的知识。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://ctf-wiki.org/" target="_blank" rel="noopener noreferrer">CTF Wiki</a></h3>
<p><strong>CTF Wiki</strong> 主要包含 <strong>CTF</strong> 各大范畴的基础知识，并正在着力完善以下内容：</p>
<ul>
<li>CTF 竞赛中的进阶知识</li>
<li>CTF 竞赛中的优质题目</li>
</ul>
<p>后续将探索提供以下方面的内容：</p>
<ul>
<li>介绍安全研究中的工具</li>
<li>更多地与安全实战结合</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://www.runoob.com/" target="_blank" rel="noopener noreferrer">菜鸟教程</a></h3>
<p>菜鸟教程提供了编程的基础技术教程, 介绍了 <code>HTML</code>、<code>CSS</code>、<code>Javascript</code>、<code>Python</code>、<code>Java</code>、<code>Ruby</code>、<code>C</code>、<code>PHP</code>、<code>MySQL</code> 等各种编程语言的基础知识。</p>
<figure><figcaption></figcaption></figure>
<hr>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">电子书</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/weekly/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#8：开源镜像站</title>
    <id>https://cunyu1943.github.io/weekly/2023/0603-0609.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0603-0609.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#8：开源镜像站</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/4TMrFj2BR43zRIQ7H-8t2w" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/4TMrFj2BR43zRIQ7H-8t2w</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#8：开源镜像站</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/4TMrFj2BR43zRIQ7H-8t2w" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/4TMrFj2BR43zRIQ7H-8t2w</a></p>
</div>
<h2> 一、项目</h2>
<h3> <a href="https://github.com/Chanzhaoyu/chatgpt-web" target="_blank" rel="noopener noreferrer">ChatGPT Web</a></h3>
<p>用 <code>Express</code> 和 <code>Vue3</code> 搭建的 <code>ChatGPT</code> 演示网页，支持双模型，提供了两种非官方 <code>ChatGPT API</code> 方法。</p>
<ul>
<li>
<p><code>ChatGPTAPI</code> 使用 <code>gpt-3.5-turbo</code> 通过 <code>OpenAI</code> 官方 <code>API</code> 调用 <code>ChatGPT</code></p>
</li>
<li>
<p><code>ChatGPTUnofficialProxyAPI</code> 使用非官方代理服务器访问 <code>ChatGPT</code> 的后端<code>API</code>，绕过<code>Cloudflare</code>（依赖于第三方服务器，并且有速率限制）</p>
</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/THUDM/ChatGLM-6B" target="_blank" rel="noopener noreferrer">ChatGLM-6B</a></h3>
<p>一个开源的、支持中英双语的对话语言模型，基于 <a href="https://github.com/THUDM/GLM" target="_blank" rel="noopener noreferrer">General Language Model (GLM)</a> 架构，具有 62 亿参数。结合模型量化技术，用户可以在消费级的显卡上进行本地部署（<code>INT4</code> 量化级别下最低只需 6GB 显存）。 <code>ChatGLM-6B</code> 使用了和 <code>ChatGPT</code> 相似的技术，针对中文问答和对话进行了优化。经过约 1T 标识符的中英双语训练，辅以监督微调、反馈自助、人类反馈强化学习等技术的加持，62 亿参数的 <code>ChatGLM-6B</code> 已经能生成相当符合人类偏好的回答。</p>
<p>为了方便下游开发者针对自己的应用场景定制模型，同时实现了基于 <a href="https://github.com/THUDM/P-tuning-v2" target="_blank" rel="noopener noreferrer">P-Tuning v2</a> 的高效参数微调方法使用指南 ，<code>INT4</code> 量化级别下最低只需 7GB 显存即可启动微调。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/zhayujie/chatgpt-on-wechat" target="_blank" rel="noopener noreferrer">chatgpt-on-wechat</a></h3>
<p>使用 <code>ChatGPT</code> 搭建微信聊天机器人，基于 <code>GPT3.5/4.0</code> <code>API</code> 实现，支持个人微信、公众号、企业微信部署，能处理文本、语音和图片，访问操作系统和互联网。目前，最新版本支持如下功能：</p>
<ul>
<li><strong>多端部署：</strong> 有多种部署方式可选择且功能完备，目前已支持个人微信，微信公众号和企业微信应用等部署方式</li>
<li><strong>基础对话：</strong> 私聊及群聊的消息智能回复，支持多轮会话上下文记忆，支持 <code>GPT-3</code>，<code>GPT-3.5</code>，<code>GPT-4</code> 模型</li>
<li><strong>语音识别：</strong> 可识别语音消息，通过文字或语音回复，支持 <code>azure</code>, <code>baidu</code>, <code>google</code>, <code>openai</code> 等多种语音模型</li>
<li><strong>图片生成：</strong> 支持图片生成 和 图生图（如照片修复），可选择 <code>Dell-E</code>, <code>stable diffusion</code>, <code>replicate</code> 模型</li>
<li><strong>丰富插件：</strong> 支持个性化插件扩展，已实现多角色切换、文字冒险、敏感词过滤、聊天记录总结等插件</li>
<li><strong>Tool工具：</strong> 与操作系统和互联网交互，支持最新信息搜索、数学计算、天气和资讯查询、网页总结，基于 <code>chatgpt-tool-hub</code> 实现</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> <a href="https://www.voidtools.com/zh-cn/" target="_blank" rel="noopener noreferrer">Everything</a></h3>
<p>本地文件搜索神器，本地文件名搜索软件战力天花板，不过当前仅支持 <code>Windows</code> 平台，具有如下特点：</p>
<ul>
<li>轻量安装文件</li>
<li>干净简洁的用户界面</li>
<li>快速文件索引</li>
<li>快速搜索</li>
<li>最小资源使用</li>
<li>便于文件分享</li>
<li>实时更新</li>
</ul>
<figure><figcaption>JavaPark-image</figcaption></figure>
<h3> <a href="https://www.listary.com/" target="_blank" rel="noopener noreferrer">Listary</a></h3>
<p><code>Listary</code> 是一款实用的搜索工具，专注于文件搜索管理 &amp; 快速启动程序。它能给“我的电脑”（资源管理器）加上许多智能命令，含有收藏文件夹，快速打开最近浏览的文件夹，快速显示/隐藏文件扩展名等等实用功能。给你日常的收藏和整理文件提高效率。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://www.sumatrapdfreader.org/free-pdf-reader" target="_blank" rel="noopener noreferrer">Sumatra PDF</a></h3>
<p>一款开源、免费、体积小巧、启动极为迅速的 <code>Windows</code> 平台上经典的电子书阅读器软件。它不仅支持阅读 <code>PDF</code> 格式文档，同时还能支持 <code>ePub</code>、<code>Mobi</code>、<code>CHM</code>、<code>XPS</code>、<code>DjVu</code> 文档，<code>CBZ</code>、<code>CBR</code> 漫画等众多主流电子书格式。</p>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> <a href="https://mirrors.huaweicloud.com/home" target="_blank" rel="noopener noreferrer">华为开源镜像站</a></h3>
<p>华为云 <code>DevCloud</code> 团队提供的全类型镜像站服务，提供主流开发语言组件、操作系统、常用工具和库等镜像，极速下载，全站 <code>CDN</code>。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://developer.aliyun.com/mirror/" target="_blank" rel="noopener noreferrer">阿里巴巴开源镜像站</a></h3>
<figure><figcaption></figcaption></figure>
<p>阿里巴巴开源镜像站，免费提供 <code>Linux</code> 镜像下载服务，拥有 <code>Ubuntu</code>、<code>CentOS</code>、<code>Deepin</code>、<code>MongoDB</code>、<code>Apache</code>、<code>Maven</code>、<code>Composer</code> 等多种开源软件镜像源。</p>
<h3> <a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener noreferrer">清华大学开源软件镜像站</a></h3>
<figure><figcaption></figcaption></figure>
<p>清华大学开源软件镜像站，致力于为国内和校内用户提供高质量的开源软件镜像、<code>Linux</code> 镜像源服务，帮助用户更方便地获取开源软件。</p>
<h2> 四、插件</h2>
<h3> <a href="https://microsoftedge.microsoft.com/addons/detail/%E8%85%BE%E8%AE%AF%E7%BF%BB%E8%AF%91/bcgpmkngbhpgdgbjgbaoddljkbabdkmm?hl=zh-CN" target="_blank" rel="noopener noreferrer">腾讯翻译</a></h3>
<p>腾讯发布的一款浏览器扩展，支持划词翻译、网页翻译、双语对照等功能。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://microsoftedge.microsoft.com/addons/detail/%E6%99%BA%E8%AF%91%E7%BD%91%E9%A1%B5%E7%BF%BB%E8%AF%91%E6%8F%92%E4%BB%B6/eejfecdbpopckihnmmcncghifajgcegh" target="_blank" rel="noopener noreferrer">智译</a></h3>
<p>一款网页翻译插件，支持 <code>17</code> 种主流外语/少数民族语言，自动识别网页语言并翻译，带你享受前所未有的实时高效翻译体验！<br>
浏览网页时，它可以自动检测页面的语言，并快速地翻译为您设置的目标语言，让您在浏览外文网站时，不再不知所云。</p>
<p>智译支持十几种语言与中文的互译，既包括英语、俄语、德语、法语、西班牙语等欧美语言，也支持粤语、日语、韩语、越南语、阿拉伯语等亚洲语言；最最绝的，它还支持维语、藏语、蒙古语、壮语等少数民族语言。</p>
<p>通过使用该插件，无论是查阅资料、浏览新闻，还是网上购物，相信一定会帮你节省大量时间，提升效率。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://microsoftedge.microsoft.com/addons/detail/%E5%8F%AF%E5%8F%AF%E7%BF%BB%E8%AF%91/ebkimaahhkeiplegpghijhgmlcdkeppf" target="_blank" rel="noopener noreferrer">可可翻译</a></h3>
<p>一款多合一的翻译扩展，支持多个翻译源翻译所选择的文本，可以同时展示原文与译文的网页翻译，具有以下特性：</p>
<ul>
<li>多翻译源同时翻译</li>
<li>丰富的快捷键</li>
<li>记录单个网页内的翻译历史</li>
<li>独立翻译窗口</li>
<li>自定义主题</li>
<li>文本预处理</li>
<li>翻译收藏</li>
<li>网页翻译</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> <a href="https://github.com/apachecn/ailearning" target="_blank" rel="noopener noreferrer">AiLearning</a></h3>
<p>数据分析 + 机器学习实战 + 线性代数 + <code>PyTorch</code> + <code>NLTK</code> + <code>TF2</code> 学习指南。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://potoyang.gitbook.io/spring-in-action-v5/" target="_blank" rel="noopener noreferrer">Spring 实战（第 5 版）</a></h3>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://vuepress.mirror.docker-practice.com/" target="_blank" rel="noopener noreferrer">Docker 从入门到实践</a></h3>
<p>本书既适用于具备基础 <code>Linux</code> 知识的 <code>Docker</code> 初学者，也可供理解原理和实现的高级用户参考。同时，书中给出的实践案例，可供在进行实际部署时借鉴，大致内容如下：</p>
<ul>
<li>前 6 章为基础内容，供用户理解 <code>Docker</code> 的基本概念和操作；</li>
<li>7 ~ 9 章介绍包括数据管理、网络等高级操作；</li>
<li>10 ~ 12 章介绍了容器生态中的几个核心项目；</li>
<li>13、14 章讨论了关于 <code>Docker</code> 安全和实现技术等高级话题。</li>
<li>后续章节则分别介绍包括 <code>Etcd</code>、<code>Fedora</code> <code>CoreOS</code>、<code>Kubernetes</code>、容器云等相关热门开源项目。最后，还展示了使用容器技术的典型的应用场景和实践案例。</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">电子书</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/weekly/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>作为程序员，掌握数据结构与算法的重要性就不言而喻了。掌握了数据结构与算法，可以说你的编程能力就会有质的飞跃。任凭各种热门技术的如何变化，只要掌握了核心技能，那都可以见招拆招，做一个“赢家”。</p>
<p>专栏共分为 4 个由浅入深的模块：</p>
<ul>
<li>入门篇</li>
<li>基础篇</li>
<li>高级篇</li>
<li>实战篇</li>
</ul>
<p>作者采用最适合工程师的学习方式，不拘泥于某一特定编程语言，从实际开发场景出发，由浅入深教你学习数据结构与算法的方法，帮你搞懂基本概念和核心理论，深入理解算法精髓，帮你提升使用数据结构和算法思维解决问题的能力。</p>
<p>想要进一步提升自己的竞争力么，那就赶紧加入和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#9：AI 学习必备资料</title>
    <id>https://cunyu1943.github.io/weekly/2023/0610-0616.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0610-0616.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#9：AI 学习必备资料</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/qgnhS4UUnWWuKonROqMA7g" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/qgnhS4UUnWWuKonROqMA7g</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#9：AI 学习必备资料</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/qgnhS4UUnWWuKonROqMA7g" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/qgnhS4UUnWWuKonROqMA7g</a></p>
</div>
<h2> 一、项目</h2>
<h3> <a href="https://github.com/XPoet/picx" target="_blank" rel="noopener noreferrer">PicX</a></h3>
<p>一款基于 <code>GitHub</code> <code>API</code> 开发的图床工具，提供图片上传托管、生成图片链接和常用图片工具箱服务。只需要申请一个 <code>Github Token</code>，即可完成图床配置。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/cloudreve/Cloudreve" target="_blank" rel="noopener noreferrer">Cloudreve</a></h3>
<p>支持多家云存储驱动的公有云文件系统，具有以下特性：</p>
<ul>
<li>☁️ 支持本机、从机、七牛、阿里云 <code>OSS</code>、腾讯云 <code>COS</code>、又拍云、<code>OneDrive</code> (包括世纪互联版) 、<code>S3</code> 兼容协议 作为存储端</li>
<li>📤 上传/下载 支持客户端直传，支持下载限速</li>
<li>💾 可对接 <code>Aria2</code> 离线下载，可使用多个从机节点分担下载任务</li>
<li>📚 在线 压缩/解压缩、多文件打包下载</li>
<li>💻 覆盖全部存储策略的 <code>WebDAV</code> 协议支持</li>
<li>⚡ 拖拽上传、目录上传、流式上传处理</li>
<li>🗃️ 文件拖拽管理</li>
<li>👩‍👧‍👦 多用户、用户组、多存储策略</li>
<li>🔗 创建文件、目录的分享链接，可设定自动过期</li>
<li>👁️‍🗨️ 视频、图像、音频、 <code>ePub</code> 在线预览，文本、<code>Office</code> 文档在线编辑</li>
<li>🎨 自定义配色、黑暗模式、<code>PWA</code> 应用、全站单页应用、国际化支持</li>
<li>🚀 <code>All-In-One</code> 打包，开箱即用</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/zh-lx/pinyin-pro" target="_blank" rel="noopener noreferrer">pinyin-pro</a></h3>
<p>一个专业的 <code>js</code> 汉字拼音转换库，功能丰富、准确率高、性能优异，具有以下特色功能：</p>
<ul>
<li>支持拼音/声母/韵母/首字母/音调/全部信息</li>
<li>支持人名姓氏模式</li>
<li>支持文本和拼音匹配</li>
<li>支持自定义拼音</li>
<li>支持获取带拼音汉字的 <code>HTML</code> 字符串</li>
<li>支持获取汉字的所有拼音</li>
<li>极致的性能和极高的拼音识别准确率</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> <a href="https://pddon.com/" target="_blank" rel="noopener noreferrer">PDDON</a></h3>
<p>免费多功能专业在线画图(<code>Low Code</code>)工具，怕画不好图就用 <code>PDDON</code>，可用于绘制流程图、架构图、思维导图、<code>UML</code>、<code>BPMN</code>、网络拓扑图、韦恩图、鱼骨图等，并且支持对象建模、数据库建模、代码/脚本生成，提供了丰富的定制化绘图功能组件库，带来更贴心易用的设计体验。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://getkap.co/" target="_blank" rel="noopener noreferrer">Kap</a></h3>
<p>一款基于 <code>Web</code> 技术构建的开源录屏软件，不过仅支持 <code>macOS</code> 系统。支持以下功能：</p>
<ul>
<li>录制某个窗口</li>
<li>全屏录制</li>
<li>自定义录制区域</li>
<li>显示鼠标点击位置</li>
<li>支持导出 <code>Gif</code>、<code>MP4</code>、<code>WebM</code> 等格式</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://www.bandicam.cn/" target="_blank" rel="noopener noreferrer">班迪录屏</a></h3>
<p>一款简单好用的电脑屏幕录制软件，录屏幕，录游戏，录视频的功能强大的录屏工具，比起其他软件其性能更加卓越。 与其他软件相比，用 <code>Bandicam</code> 录制的视频大小更小，同时保证了原文件的质量。</p>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> <a href="http://www.txttool.com/" target="_blank" rel="noopener noreferrer">TXT 文本处理工具</a></h3>
<p>在线高级文本工具箱，专注于各种文本处理。如果你的工作涉及到文本处理，不妨去这里试试这些小工具来提升下你的效率。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://www.text-image.com/convert/ascii.html" target="_blank" rel="noopener noreferrer">Text-Image</a></h3>
<p>在这里，只要上传一张图片，就能轻松地生成很酷的文本图像。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="http://www.atoolbox.net/" target="_blank" rel="noopener noreferrer">一个工具箱</a></h3>
<p>众多在线工具集合网站，汇聚了视频音频、图形图像、日期时间、文本编辑、加密解密、编程开发、计算换算、金融理财、日常生活等方面共计 448 个在线工具。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> <a href="https://www.grammarly.com/" target="_blank" rel="noopener noreferrer">Grammarly</a></h3>
<p>一款智能语法工具，可以帮助您在网上编写的任何其他地方避免书写错误，<code>Grammarly</code> 会智能分析语段中的错误用法，并用红色下划线标记所有待完善的词组，供你一键纠正。对于英语写作能力不太好的同学，简直是写论文必备。工具特色：</p>
<ul>
<li>上下文拼写检查</li>
<li>语法检查</li>
<li>……</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://chrome.google.com/webstore/detail/smart-toc/lifgeihcfpkmmlfjbailfpfhbahhibba" target="_blank" rel="noopener noreferrer">Smart TOC</a></h3>
<p>根据打开网页的内容自动生成目录，便于我们浏览与跳转。</p>
<ul>
<li>按需使用</li>
<li>生成的目录面板支持拖动</li>
<li>点击标题可跳转对应位置</li>
<li>高亮当前标题</li>
<li>……</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://www.baidufe.com/fehelper/index/index.html" target="_blank" rel="noopener noreferrer">FeHelper</a></h3>
<p>一款为开发者开发的浏览器扩展，包括 <code>JSON</code> 自动/手动格式化、<code>JSON</code> 内容比对、代码美化与压缩、信息编解码转换、二维码生成与解码、图片 <code>Base64</code> 编解码转换、<code>Markdown</code>、 网页油猴、网页取色器、脑图(<code>Xmind</code>)等贴心工具。</p>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> <a href="https://github.com/MLEveryday/100-Days-Of-ML-Code" target="_blank" rel="noopener noreferrer">机器学习 100 天</a></h3>
<p><code>100-Days-Of-ML-Code</code> 中文版，包括了有监督学习和无监督学习两方面的内容，对于想要学习机器学习的同学是一个不错的入门教程。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://p100.koki-saitoh.com/zh-CN" target="_blank" rel="noopener noreferrer">强化学习 100 题</a></h3>
<p>日本的 <code>AI</code> 畅销书作者斋藤康毅为其深度学习系列书籍创建的一个网站，最近推出了中文版。对于学习了强化学习的同学，可以用来对强化学习知识查漏补缺。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/scutan90/DeepLearning-500-questions" target="_blank" rel="noopener noreferrer">深度学习 500 问</a></h3>
<p>深度学习 <code>500</code> 问，以问答形式对常用的概率知识、线性代数、机器学习、深度学习、计算机视觉等热点问题进行阐述，以帮助自己及有需要的读者。 全书分为 <code>18 </code>个章节，<code>50 </code>余万字。</p>
<p>本书系统地描述了深度学习的基本理论算法及应用。全书共 14 章，第 1-3 章论述了数学基础、机器学习基础和深度学习基础；第 4-7 章介绍了一些经典网络及计算机视觉领域中常用的 <code>CNN</code>、<code>RNN</code>、<code>GAN</code> 等网络结构技术；第 8-9 章介绍了深度学习在计算机视觉领域的目标检测及图像分割两大应用；第 10-14 章介绍了计算机视觉领域主要的优化方法及思路等，包括迁移学习、网络架构及训练、网络优化技巧、超参数调整及模型的压缩和加速等。本书凝聚了众多一线科研人员及工程师的经验，旨在培养读者发现问题、解决问题、扩展问题的能力。</p>
<figure><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">电子书</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/weekly/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#10：算法学习必备</title>
    <id>https://cunyu1943.github.io/weekly/2023/0617-0623.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0617-0623.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#10：算法学习必备</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/LHDwyFupkXWcEvVhOQb36A" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/LHDwyFupkXWcEvVhOQb36A</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#10：算法学习必备</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/LHDwyFupkXWcEvVhOQb36A" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/LHDwyFupkXWcEvVhOQb36A</a></p>
</div>
<h2> 一、项目</h2>
<h3> <a href="https://github.com/Licoy/ChatGPT-Midjourney" target="_blank" rel="noopener noreferrer">ChatGPT-Midjourney</a></h3>
<p>该项目基于 <code>ChatGPT-Next-Web</code> 开发，只要拥有自己的秘钥，就可以一键免费部署你的私人 <code>ChatGPT</code> + <code>Midjourney</code> 网页应用，支持以下功能：</p>
<ul>
<li>原 <code>ChatGPT-Next-Web</code> 所有功能</li>
<li><code>midjourney</code> <code>imagin</code> 想象</li>
<li><code>midjourney</code> <code>upscale</code> 放大</li>
<li><code>midjourney</code> <code>variation</code> 变幻</li>
<li><code>midjourney</code> <code>describe</code> 识图</li>
<li><code>midjourney</code> <code>blend</code> 混图</li>
<li><code>midjourney</code> 垫图</li>
<li>绘图进度百分比、实时图像显示</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/xtekky/gpt4free" target="_blank" rel="noopener noreferrer">GPT4-Free</a></h3>
<p>提供免费的 <code>OpenAI</code> <code>GPT-4</code> <code>API</code>。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/xiangsx/gpt4free-ts" target="_blank" rel="noopener noreferrer">GPT4Free TypeScript Version</a></h3>
<p>GPT4-Free 项目的 <code>TypeScript</code> 版本，同样提供了免费的 <code>API</code>。</p>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> <a href="https://potplayer.daum.net/?lang=zh_CN" target="_blank" rel="noopener noreferrer">PotPlayer</a></h3>
<p>拥有强大的硬件加速、全面支持高清影片流畅播放、界面整洁、操作简单、使用轻松、皮肤丰富多彩。能够满足不同用户的使用需求。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="http://www.bookxnote.com/" target="_blank" rel="noopener noreferrer">BookxNote</a></h3>
<p>支持打开 <code>PDF</code> 和 <code>EPUB</code> 两种格式的电子书，自动导入书籍目录，还能自定义阅读书签，被当作是 <code>Windows</code> 端的 <code>MarginNote</code>。主要包含以下五方面的的功能：</p>
<ol>
<li>导入书籍</li>
<li>标注与摘录</li>
<li>支持思维导图</li>
<li>使用 <code>Anki</code> 进行复习</li>
<li>辅助学习工具（康奈尔比较、学习卡片、取词翻译）</li>
</ol>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/microsoft/PowerToys" target="_blank" rel="noopener noreferrer">PowerToys</a></h3>
<p><code>Microsoft PowerToys</code> 是一组免费的系统工具软件，由微软为 <code>Windows</code> 操作系统上的系统管理员设计。这些程序为系统加入或变更了一些功能，并加入更多自定义选项以提高生产力。</p>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> <a href="https://www.ixueshu.com/" target="_blank" rel="noopener noreferrer">爱学术</a></h3>
<p>参考文献资料，毕业论文范文免费下载的网站。</p>
<figure><img src="https://cunyu1943.github.io/static/imgs/article/weekly-2023/image.4idmle023ta0.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> <a href="https://www.lunwendata.com/" target="_blank" rel="noopener noreferrer">中国免费论文网</a></h3>
<p>可以免费下载论文的网站，涵括了以下类别的论文：</p>
<ul>
<li>经济论文</li>
<li>证券金融</li>
<li>管理论文</li>
<li>会计审计</li>
<li>法学论文</li>
<li>医药论文</li>
<li>社会论文</li>
<li>教育论文</li>
<li>计算机论文</li>
<li>艺术论文</li>
<li>哲学论文</li>
</ul>
<figure><img src="https://cunyu1943.github.io/static/imgs/article/weekly-2023/image.a0vxsoqjymo.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> <a href="https://www.cnki.net/" target="_blank" rel="noopener noreferrer">知网</a></h3>
<p>想必每个国内的大学生都不会陌生，没准儿你的毕业论文就在这里。集文献，资料，论文查找于一体的网站。</p>
<p>不足的一点就是针对个人收费较贵，如果还学校购买了相关数据库倒还好。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> <a href="https://microsoftedge.microsoft.com/addons/detail/flomoplus/edhipjmahjlkocleppfjoepmjnhjiokb" target="_blank" rel="noopener noreferrer">flomoplus</a></h3>
<ul>
<li>支持从第三方网页圈选内容快速输入到 <code>flomo</code>（包含内容、网址、<code>tag</code>）</li>
<li>支持一键存储网页标题及链接到 <code>flomo</code>（网站标题、网址、<code>tag</code>）</li>
<li>支持 <code>flomoapp.com</code> 的黑暗模式</li>
<li>支持 <code>flomoapp.com</code> 的 <code>memo</code> 字数统计（实验功能）</li>
<li>支持 <code>flomoapp.com</code> 的快捷发送切换功能（<code>enter</code> 或 <code>enter + shift</code>）</li>
<li>支持从「微信读书」「得到」「<code>Kindle</code>」中导入划线标记</li>
<li>支持从「即刻」「微博」「饭否」「豆瓣」导入个人动态</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://microsoftedge.microsoft.com/addons/detail/abcd-pdf/kpmjajlmlpoindnjiajfhnmnboajakog" target="_blank" rel="noopener noreferrer">Abcd PDF</a></h3>
<p><code>Abcd PDF</code> 扩展是在线将 <code>PDF</code> 转换为 <code>Word</code> 和 <code>Excel</code>、<code>PPT</code> 和 <code>PDF</code> 编辑器 - 100% 免费。提高您的生产力。<br>
<code>AbcdPDF</code> 扩展是一个 100% 免费的一体化 <code>PDF</code> 工具<br>
我们将使用我们有用的 <code>PDF</code> 转换器工具包和在线办公套件来提高您的工作效率。</p>
<figure><img src="https://cunyu1943.github.io/static/imgs/article/weekly-2023/image.5kb4juhp4vk0.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> <a href="https://chrome.google.com/webstore/detail/smallpdf-edit-compress-an/ohfgljdgelakfkefopgklcohadegdpjf" target="_blank" rel="noopener noreferrer">Smallpdf</a></h3>
<p>轻松易用的 <code>PDF</code> 工具，可用于编辑、转换、合并、拆分和压缩 <code>PDF</code> 文件。</p>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> <a href="https://bugstack.cn/" target="_blank" rel="noopener noreferrer">虫洞栈</a></h3>
<p>包含: <code>Java</code> 基础，面经手册，<code>Netty4.x</code>，手写 <code>Spring</code>，用 <code>Java</code> 实现 <code>JVM</code>，重学 <code>Java</code> 设计模式，<code>SpringBoot</code> 中间件开发，<code>IDEA</code> 插件开发，<code>DDD</code> 系统架构项目开发，字节码编程等方面的内容。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://labuladong.github.io/algo/" target="_blank" rel="noopener noreferrer">labuladong 的算法小抄</a></h3>
<p>包含总共 60 多篇原创文章，都是基于 <code>LeetCode</code> 的题目，涵盖了所有题型和技巧，而且一定要做到举一反三，通俗易懂。</p>
<figure><img src="https://cunyu1943.github.io/static/imgs/article/weekly-2023/web_intro1.yrsf6v2pohc.webp" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>
<h3> <a href="https://github.com/youngyangyang04/leetcode-master" target="_blank" rel="noopener noreferrer">代码随想录</a></h3>
<p><code>LeetCode</code> 刷题攻略：200 道经典题目刷题顺序，共 60w 字的详细图解，视频难点剖析，50 余张思维导图，支持 <code>C++</code>，<code>Java</code>，<code>Python</code>，<code>Go</code>，<code>JavaScript</code> 等多语言版本。</p>
<figure><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">电子书</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/weekly/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>作为程序员，掌握数据结构与算法的重要性就不言而喻了。掌握了数据结构与算法，可以说你的编程能力就会有质的飞跃。任凭各种热门技术的如何变化，只要掌握了核心技能，那都可以见招拆招，做一个“赢家”。</p>
<p>专栏共分为 4 个由浅入深的模块：</p>
<ul>
<li>入门篇</li>
<li>基础篇</li>
<li>高级篇</li>
<li>实战篇</li>
</ul>
<p>作者采用最适合工程师的学习方式，不拘泥于某一特定编程语言，从实际开发场景出发，由浅入深教你学习数据结构与算法的方法，帮你搞懂基本概念和核心理论，深入理解算法精髓，帮你提升使用数据结构和算法思维解决问题的能力。</p>
<p>想要进一步提升自己的竞争力么，那就赶紧加入和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#11：远程桌面软件</title>
    <id>https://cunyu1943.github.io/weekly/2023/0624-0630.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0624-0630.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#11：远程桌面软件</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/4az9STvM2jiwHhRa_k060Q" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/4az9STvM2jiwHhRa_k060Q</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#11：远程桌面软件</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/4az9STvM2jiwHhRa_k060Q" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/4az9STvM2jiwHhRa_k060Q</a></p>
</div>
<h2> 一、项目</h2>
<h3> <a href="https://github.com/fanmingming/live" target="_blank" rel="noopener noreferrer">live</a></h3>
<p>一个国内可直连的直播源分享项目，具有以下特点：</p>
<ul>
<li>永久免费</li>
<li>直连访问</li>
<li>完整开源</li>
<li>不含广告</li>
<li>完善的台标</li>
<li>直播源支持 <code>IPv4</code>/<code>IPv6</code> 双栈访问</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/Cyril0563/lanjing_live" target="_blank" rel="noopener noreferrer">蓝鲸直播源</a></h3>
<p>长期维护的电视直播源接口、<code>TVBox</code>、<code>Pluto Player</code>、猫影视 <code>TV</code>、<code>IPTV</code>、<code>BIUBIU TV</code>、<code>IPTV</code> 源、直播源、源享家、蓝鲸直播源、等影视及 <code>m3u8</code> 播放器通用接口都可观看。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/biancangming/wtv" target="_blank" rel="noopener noreferrer">wtv</a></h3>
<p>解决电脑、手机看电视直播的苦恼，收集各种直播源，电视直播网站。</p>
<p>最新 <code>IPTV</code> 直播源 <code>m3u8</code> 下载，电视直播网站推荐，以中文频道为主。</p>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> <a href="https://www.todesk.com/" target="_blank" rel="noopener noreferrer">ToDesk</a></h3>
<p>一款稳定流畅的远程控制电脑手机连接软件，可远程桌面办公，远程协助运维。会话采用端对端加密，让每一次远程访问都安全可靠。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://sunlogin.oray.com/download?categ=personal" target="_blank" rel="noopener noreferrer">向日葵</a></h3>
<p>一款免费远程桌面工具，既支持控制手机，也支持控制电脑，简单易用。</p>
<p>软件还支持市面上的各种主流系统，如 <code>Windows</code>、<code>macOS</code>、<code>Linux</code>、<code>Android</code>、<code>iOS</code> 等。除了免费的远程桌面功能外，还有付费使用的摄像头、远程文件、桌面录像、远程开机等功能。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://www.teamviewer.cn/cn/" target="_blank" rel="noopener noreferrer">TeamViewer</a></h3>
<p>一个能在任何防火墙和 <code>NAT</code> 代理的后台用于远程控制，桌面共享和文件传输的简单且快速的解决方案。为了连接到另一台计算机，只需要在两台计算机上同时运行 <code>TeamViewer</code> 即可，而不需要进行安装。该软件第一次启动在两台计算机上自动生成 <code>ID</code>。只需要输入对方 <code>ID</code> 到 <code>TeamViewer</code> 即可建立连接。</p>
<p>目前，该软件面向个人使用免费，不过有广告弹窗，而且如果长期使用还会判定为商业行为，会在 5 分钟内强制断连。</p>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> <a href="https://tool.lu/" target="_blank" rel="noopener noreferrer">在线工具</a></h3>
<p>主要有工具、文库、码库、软件、网址、话题等方面的内容。而其中，在线工具又可以分为以下类别：</p>
<ul>
<li>文本类</li>
<li>文档类</li>
<li>图像类</li>
<li>音频类</li>
<li>视频类</li>
<li>开发类</li>
<li>运维类</li>
<li>设计类</li>
<li>学术类</li>
<li>查询类</li>
<li>其他</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://naotu.baidu.com/" target="_blank" rel="noopener noreferrer">百度脑图</a></h3>
<p>百度旗下的一个在线思维导图工具，具有以下特点：</p>
<ul>
<li>免安装</li>
<li>云存储</li>
<li>易分享</li>
<li>舒适的体验</li>
<li>丰富的功能</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://sight.youdao.com/" target="_blank" rel="noopener noreferrer">网易见外</a></h3>
<p>网易旗下 <code>AI</code> 智能语音转写听翻平台，主要提供以下服务：</p>
<ul>
<li>视频智能字幕</li>
<li>音频转写翻译</li>
<li>文档翻译</li>
<li>字幕文件翻译</li>
<li>图像识别</li>
<li>会议同传</li>
<li>图像识别翻译</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> <a href="https://chrome.google.com/webstore/detail/screen-recorder/jdopnakmnlnccgpfpmjmdjjohmcdgabp" target="_blank" rel="noopener noreferrer">屏幕录像机</a></h3>
<p>免费的简单工具，用于从选项卡，页面区域和全屏捕获高质量视频，并带有麦克风，网络摄像头和系统音频。</p>
<p>录制屏幕，镶边选项卡，色度选项卡区域，网络摄像头，语音和麦克风。</p>
<p>一种智能屏幕录像机，可捕获台式机，浏览器/网络摄像头以及系统声音和/或麦克风。</p>
<p>无论您是否要制作教育视频，展示游戏玩法，录制会议，保存直播，或任何其他常规用途。</p>
<p>主要有以下特点：</p>
<ul>
<li>无水印</li>
<li>无录制时间限制</li>
<li>控件易使用</li>
<li>录像即时保存</li>
<li>……</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://chrome.google.com/webstore/detail/screenity-screen-recorder/kbbdabhdfibnancpjfhlkhafgdilcnji" target="_blank" rel="noopener noreferrer">Screenity</a></h3>
<p><code>Chrome</code> 最强大的屏幕录像机。 捕获，注释，编辑等。<br>
借助 <code>Screenity</code>，您可以前所未有地录制和标注屏幕, 更好地录制工作、教育等内容，为学生提供情景反馈、详细的解释，或者只是向潜在客户展示您的产品。产品具有以下特点：</p>
<ul>
<li>无限制的录制您的标签页、桌面、任何应用程序和摄像头</li>
<li>在屏幕任意位置绘画、添加文本和箭头进行标注</li>
<li>高亮您的点击，聚焦您的鼠标，或者在录制时隐藏</li>
<li>单独的麦克风和电脑音频控制，一键通（<code>PTT</code>）等</li>
<li>可定义倒计时，悬停时显示控制栏，以及更多自定义选项<br>
导出为 <code>mp4</code>、<code>gif</code> 和 <code>webm</code>，也可以保存视频到谷歌云盘</li>
<li>对您的录制做修剪或者移除片段</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://chrome.google.com/webstore/detail/vimeo-record-screen-webca/ejfmffkmeigkphomnpabpdabfddeadcb" target="_blank" rel="noopener noreferrer">Vimeo Record</a></h3>
<p>可以在浏览器网页直接录制和分享无限制的视频。无论是产品演示、设计反馈，还是知识传授，通过 <code>Vimeo</code> 的屏幕录像机，就能快速录制和分享无限的视频信息。</p>
<p>不仅如此，还可以选择录制你的声音、脸部或组合。一旦你完成录制，立即就可以用私人链接分享你的视频。</p>
<p>每个录制的视频都会自动上传到 <code>Vimeo</code>，它为你提供了各种工具，如组织和替换视频，定制播放器，与你的团队分享视频，添加章节标记，以及更多。全球加入超过 2 亿用户选择 <code>Vimeo</code> 作为他们视频录制软件。</p>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> <a href="https://github.com/ascoders/weekly" target="_blank" rel="noopener noreferrer">前端精读周刊</a></h3>
<p>前端精读周刊。帮你理解最前沿、实用的技术。主要包含以下方面的内容：</p>
<ul>
<li>前沿技术</li>
<li><code>TS</code> 类型实操</li>
<li>设计模式</li>
<li>编译原理</li>
<li>源码解读</li>
<li>商业思考</li>
<li>算法</li>
<li>可视化搭建</li>
<li><code>SQL</code></li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/ruanyf/weekly" target="_blank" rel="noopener noreferrer">科技爱好者周刊</a></h3>
<p>科技大牛阮一峰创建的开源项目，记录每周值得分享的科技内容，周五发布。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/SwiftOldDriver/iOS-Weekly" target="_blank" rel="noopener noreferrer">iOS 周报</a></h3>
<p>老司机 <code>iOS</code> 周报，只为你呈现有价值的信息。汇聚有关 <code>iOS</code> 开发相关的信息、文章、工具等。</p>
<figure><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">电子书</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/weekly/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#12：计算机考研资料</title>
    <id>https://cunyu1943.github.io/weekly/2023/0701-0707.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0701-0707.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#12：计算机考研资料</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/-flJ1uEH5IPhxWp5J6Bexg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/-flJ1uEH5IPhxWp5J6Bexg</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#12：计算机考研资料</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/-flJ1uEH5IPhxWp5J6Bexg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/-flJ1uEH5IPhxWp5J6Bexg</a></p>
</div>
<h2> 一、项目</h2>
<h3> <a href="https://github.com/jeecgboot/jeecg-boot" target="_blank" rel="noopener noreferrer">JEECG BOOT 低代码开发平台</a></h3>
<p>一款基于代码生成器的低代码开发平台！前后端分离架构 <code>SpringBoot2.x</code>，<code>SpringCloud</code>，<code>Ant Design</code> &amp; <code>Vue</code>，<code>Mybatis-plus</code>，<code>Shiro</code>，<code>JWT</code>，支持微服务。强大的代码生成器让前后端代码一键生成，实现低代码开发! <code>JeecgBoot</code> 引领新的低代码开发模式(<code>OnlineCoding</code>-&gt; 代码生成器-&gt; 手工 <code>MERGE</code>)， 帮助解决 <code>Java</code> 项目 70% 的重复工作，让开发更多关注业务。既能快速提高效率，节省研发成本，同时又不失灵活性！</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/DerekYRC/mini-spring" target="_blank" rel="noopener noreferrer">mini-spring</a></h3>
<p>简化版的 <code>Spring</code> 框架，能帮助你快速熟悉 <code>Spring</code> 源码和掌握 <code>Spring</code> 的核心原理。抽取了 <code>Spring</code> 的核心逻辑，代码极度简化，保留 <code>Spring</code> 的核心功能，如 <code>IoC</code> 和 <code>AOP</code>、资源加载器、事件监听器、类型转换、容器扩展点、<code>Bean</code> 生命周期和作用域、应用上下文等核心功能。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/qiutiandefeng/yfexam-exam" target="_blank" rel="noopener noreferrer">云帆培训考试系统</a></h3>
<p>在线考试系统 云帆在线学习 <code>Vue</code> 培训 <code>Java</code> 考试系统是一款基于 <code>Java</code> 开发的，使用 <code>SpringBoot</code> + <code>Vue</code> 开发的一款多角色在线培训考试系统平台，系统集成了用户管理、角色管理、部门管理、题库管理、试题管理、试题导入导出、考试管理、在线考试、错题训练等功能。</p>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> <a href="https://www.foxitsoftware.cn/pdf-reader/" target="_blank" rel="noopener noreferrer">福昕 PDF 阅读器</a></h3>
<p>全球用户超 7.5 亿，阅读 <code>PDF</code> 文档的最佳选择，具有以下特点：</p>
<ul>
<li>文档阅读</li>
<li><code>PDF</code> 注释</li>
<li>格式转换</li>
<li><code>PDF</code> 打印</li>
<li>页面管理</li>
<li><code>PDF</code> 云服务</li>
<li>文字提取</li>
<li>划词翻译</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://jisupdf.com/" target="_blank" rel="noopener noreferrer">极速 PDF</a></h3>
<p>一款闪电般好用的 <code>PDF</code> 阅读器。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/troyeguo/koodo-reader" target="_blank" rel="noopener noreferrer">Koodo Reader</a></h3>
<p>一个跨平台的电子书阅读器，具有以下特点：</p>
<ul>
<li>支持多种阅读格式：
<ul>
<li><code>EPUB</code> (<strong>.epub</strong>)</li>
<li>扫描文档 (<strong>.pdf</strong>, <strong>.djvu</strong>)</li>
<li><code>Kindle</code> (<strong>.azw3</strong>, <strong>.mobi</strong>, <strong>.azw</strong>)</li>
<li>纯文本 (<strong>.txt</strong>)</li>
<li>漫画 (<strong>.cbr</strong>, <strong>.cbz</strong>, <strong>.cbt</strong>, <strong>.cb7</strong>)</li>
<li>富文本 (<strong>.md</strong>, <strong>.docx</strong>, <strong>.rtf</strong>)</li>
<li><code>FB2</code> (<strong>.fb2</strong>)</li>
<li>超文本 (<strong>.html</strong>, <strong>.xml</strong>, <strong>.xhtml</strong>, <strong>.mhtml</strong>, <strong>.htm</strong>, <strong>.htm</strong>)</li>
</ul>
</li>
<li>支持 <code>Windows</code>，<code>macOS</code>，<code>Linux</code> 和网页版</li>
<li>备份数据到 <code>Dropbox</code> 和 <code>Webdav</code></li>
<li>自定义源文件夹，利用 <code>OneDrive</code>、百度网盘、<code>iCloud</code>、<code>Dropbox</code> 等进行多设备同步</li>
<li>双页模式，单页模式，滚动模式</li>
<li>听书功能，翻译功能，触控屏支持，批量导入图书</li>
<li>支持目录，书签，笔记，高亮，书架，标签</li>
<li>自定义字体，字体大小，行间距，段落间距，阅读背景色，文字颜色，屏幕亮度，文字下划线、斜体、文字阴影、字体粗细</li>
<li>黑夜模式和主题色设置</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> <a href="https://github.com/" target="_blank" rel="noopener noreferrer">Github</a></h3>
<p>一个在线软件源代码托管服务平台，使用 <code>Git</code> 作为版本控制软件。想必每个开发者对它都不陌生，还亲切的称为“世界上最大的同性交友网站”。在这里，你不仅能找到各种各样的宝藏资源，还能结交各种好友，在开发的道路上一起远行。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://gitee.com/" target="_blank" rel="noopener noreferrer">Gitee</a></h3>
<p><code>Gitee</code> 是开源中国（<code>OSChina</code>）推出的基于 <code>Git</code> 的代码托管服务。<br>
共包括三个版本，分别是：社区版、企业版和高校版。可以看做是国内的 <code>Github</code>，对于难以访问 <code>Github</code> 的用户不失为另一种好的选择。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://about.gitlab.com/" target="_blank" rel="noopener noreferrer">Gitlab</a></h3>
<p>一个用于仓库管理系统的开源项目，使用 <code>Git</code> 作为代码管理工具，并在此基础上搭建起来的 <code>Web</code> 服务。另外，<code>GitLab</code> 还具有 <code>wiki</code> 以及在线编辑、<code>issue</code> 跟踪功能、<code>CI</code>/<code>CD</code> 等功能。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> <a href="https://chrome.google.com/webstore/detail/user-agent-switcher/kchfmpdcejfkipopnolndinkeoipnoia" target="_blank" rel="noopener noreferrer">User-Agent Switcher</a></h3>
<p>在你的浏览器中切换 <code>User-Agents</code> 的最简单的方法!<br>
<code>User-Agents</code> 切换器插件操作简单，功能强大。而且上网体验更丝滑，不再受到哪种浏览器或操作系统的限制。它增加了一个工具条按钮，你可以用它在不同的常用 <code>User-Agents</code> 字符串之间切换。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://www.webextensions.org/" target="_blank" rel="noopener noreferrer">Magic CSS</a></h3>
<p>允许用户在任意页面编写 <code>CSS</code>/<code>Less</code>/<code>Sass </code>代码，代码会立即生效，并将保存在浏览器扩展的存储空间或站点的本地存储中。</p>
<p>您可以发挥您的脑洞，给任意网站改写样式！此外还提供各种快速选择等调试功能，更轻松上手。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://chrome.google.com/webstore/detail/json-viewer/efknglbfhoddmmfabeihlemgekhhnabb" target="_blank" rel="noopener noreferrer">JSON Viewer</a></h3>
<p>一款实用的 <code>JSON</code> 格式数据查看器。</p>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> <a href="https://github.com/CodePanda66/CSPostgraduate-408" target="_blank" rel="noopener noreferrer">CSPostgraduate-408</a></h3>
<p>计算机考研 408 专业课资料及真题资源。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/ddy-ddy/cs-408" target="_blank" rel="noopener noreferrer">cs-408</a></h3>
<p>计算机考研专业课程 408 相关的复习经验，资源和 <code>OneNote</code> 笔记。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/csseky/cskaoyan" target="_blank" rel="noopener noreferrer">cs-kaoyan</a></h3>
<p>提供各个学校计算机考研和软件工程考研专业的考研真题。</p>
<figure><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">电子书</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/weekly/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>作为程序员，掌握数据结构与算法的重要性就不言而喻了。掌握了数据结构与算法，可以说你的编程能力就会有质的飞跃。任凭各种热门技术的如何变化，只要掌握了核心技能，那都可以见招拆招，做一个“赢家”。</p>
<p>专栏共分为 4 个由浅入深的模块：</p>
<ul>
<li>入门篇</li>
<li>基础篇</li>
<li>高级篇</li>
<li>实战篇</li>
</ul>
<p>作者采用最适合工程师的学习方式，不拘泥于某一特定编程语言，从实际开发场景出发，由浅入深教你学习数据结构与算法的方法，帮你搞懂基本概念和核心理论，深入理解算法精髓，帮你提升使用数据结构和算法思维解决问题的能力。</p>
<p>想要进一步提升自己的竞争力么，那就赶紧加入和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#13：免费下载软件</title>
    <id>https://cunyu1943.github.io/weekly/2023/0708-0714.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0708-0714.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#13：免费下载软件</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/mGTQR1wyFWauahQ3PJ6jPA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/mGTQR1wyFWauahQ3PJ6jPA</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#13：免费下载软件</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/mGTQR1wyFWauahQ3PJ6jPA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/mGTQR1wyFWauahQ3PJ6jPA</a></p>
</div>
<h2> 一、项目</h2>
<h3> <a href="https://github.com/vn7n24fzkq/github-profile-summary-cards" target="_blank" rel="noopener noreferrer">Github Profile Summary Cards</a></h3>
<p>一个为个人资料自述文件生成 <code>Github</code> 摘要卡的工具。只需输入你的 <code>Github</code> 用户名，选择主题后就能生成关于 <code>Github</code> 的 <code>Commit</code>、<code>Top Languages</code>、<code>Stats</code> 等信息。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/tipsy/profile-summary-for-github" target="_blank" rel="noopener noreferrer">Profile Summary</a></h3>
<p>一个统计 <code>Github Profile</code> 的可视化工具。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/ryo-ma/github-profile-trophy" target="_blank" rel="noopener noreferrer">GitHub Profile Trophy</a></h3>
<p>在自述文件中添加动态生成的 <code>GitHub Stat</code> 奖杯，支持多种主题，还支持自定义大小。</p>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> <a href="https://motrix.app/zh-CN/" target="_blank" rel="noopener noreferrer">Motrix</a></h3>
<p>一款全能的下载工具，支持下载 <code>HTTP</code>、<code>FTP</code>、<code>BT</code>、磁力链接等资源。最最重要的是，他完全跨平台且免费。</p>
<p>软件界面设计简约清新，方便实用。用户可轻松监控、管理下载任务，并自由更改下载路径和速度限制。此外，还支持多点续传和流媒体下载，同时提供暂停、恢复、取消等快捷功能。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://www.xdown.org/" target="_blank" rel="noopener noreferrer">Xdown</a></h3>
<p>专业的文件下载与分享工具(<code>BitTorrent</code>/<code>HTTP</code>/<code>FTP</code>)，具有以下功能：</p>
<ul>
<li>支持浏览器(<code>Chrome</code>/<code>Edge Chromium</code>/百分浏览器)接管下载</li>
<li>支持 <code>torrent</code> 下载文件与做种</li>
<li>支持 <code>torrent</code> 自动屏蔽吸血客户端</li>
<li>支持断线重连</li>
<li>支持标准 <code>FTP</code>/<code>HTTP</code>/<code>HTTPS</code>/<code>HTTP2</code> 协议下载</li>
<li>支持 <code>http header</code> 自定义字段</li>
<li>支持手动设置并发数(最大 128)<br>
支持多 <code>IP</code> 轮询节点下载</li>
<li>支持 <code>BitTorrent</code> 内置 <code>tracker list</code> 设置</li>
<li>支持 tls1.0/1.1/1.2/1.3-sni</li>
<li>支持磁力链接</li>
<li>支持 <code>DHT</code> ipv4 + ipv6</li>
<li>支持全局限速</li>
<li>支持自定义全局代理设置</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://www.freedownloadmanager.org/zh/download.htm" target="_blank" rel="noopener noreferrer">Free Download Manager</a></h3>
<p>强大的下载工具，可以看做是免费版的 <code>IDM</code>，不过功能也比 <code>IDM</code> 功能略弱。</p>
<ul>
<li>支持 <code>FTP</code>，<code>HTTPS</code>，还有 <code>BT</code> 下载，当然你也可以添加代理。</li>
<li>还支持定时下载任务，也支持多线程下载，同时还可以查看多线程的进度。</li>
<li>支持远程控制下载，还支持断点续传功能。</li>
<li>支持国外视频网站下载，支持浏览器插件，自动捕捉可下载文件，右键即可下载。</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> <a href="https://www.colorhunt.co/" target="_blank" rel="noopener noreferrer">Color Hunt</a></h3>
<p>一个在线色彩搭配方案分享网站，在这里可以看到大家分享出来的各种配色方案，如果你是一个设计师，那你绝对不要错过！</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://webgradients.com/" target="_blank" rel="noopener noreferrer">WebGradients</a></h3>
<p>汇聚了 180 个线性渐变的配色方案，可以将其用作网站任何部分的内容背景，只需要通过 <code>Copy CSS</code> 即可将渐变赋值为一段 <code>CSS</code> 代码，而且免费供商业或者个人使用。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://colordrop.io/" target="_blank" rel="noopener noreferrer">ColorDrop</a></h3>
<p>和 <code>Color Hunt</code> 类似的一个网站，只需要点击配色就会显示各个颜色的色值，但不同于 <code>Color Hunt</code> 的是，它不支持用户自己上传配色方案。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> <a href="https://chrome.google.com/webstore/detail/octotree-github-code-tree/bkhaagjahfmjljalopjnoealnfndnagc?utm_campaign=en&amp;utm_source=en-et-na-us-oc-webstrext&amp;utm_medium=et" target="_blank" rel="noopener noreferrer">Octotree</a></h3>
<p>一款增强 <code>Github</code> 代码 <code>Review</code> 的浏览器插件。</p>
<p>具有以下特性：</p>
<ul>
<li>树形结构的快递 <code>IDE</code>。</li>
<li>支持快速搜索。</li>
<li>可对仓库、<code>issues</code>、<code>PR</code>、文件等加书签。</li>
<li>支持 <code>Github</code> 主题。</li>
<li>支持私有化的仓库。</li>
<li>高性能，适用于各种大小的仓库。</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://chrome.google.com/webstore/detail/copy-as-markdown/nlaionblcaejecbkcillglodmmfhjhfi?utm_campaign=en&amp;utm_source=en-et-na-us-oc-webstrext&amp;utm_medium=et" target="_blank" rel="noopener noreferrer">Copy as Markdown</a></h3>
<p>通过该插件，以将超链接、图像和文本复制为 <code>Markdown</code> 格式，具有以下特点：</p>
<ul>
<li>能够将链接、图像和选定的文本复制为 <code>Markdown</code>。</li>
<li>对于图像将具有单独选择链接或图像的选项。</li>
<li>格式化文本，例如斜体、粗体、删除线和内联代码。</li>
<li>支持无序列表、有序列表、任务列表。</li>
<li>表格遵循 <code>GFM</code> 规范。</li>
<li>可复制代码块，而且可识别对应编程语言</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://chrome.google.com/webstore/detail/sourcegraph/dgjhfomjieaadpoljlnidmbgkdffpack?utm_campaign=en&amp;utm_source=en-et-na-us-oc-webstrext&amp;utm_medium=et" target="_blank" rel="noopener noreferrer">Sourcegraph</a></h3>
<p>向 <code>GitHub</code>、<code>GitLab</code> 和其他主机添加代码智能：悬停、定义、引用。适用于 20 多种语言。</p>
<p>开源 <code>Sourcegraph</code> 扩展为 <code>GitHub</code>、<code>GitHub Enterprise</code>、<code>GitLab</code>、<code>Bitbucket Server</code> 和 <code>Phabricator</code> 添加了代码导航和代码智能。</p>
<ul>
<li>带有文档和类型信息的悬停工具提示</li>
<li>转到定义</li>
<li>查找参考资料</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> <a href="https://changkun.de/modern-cpp/" target="_blank" rel="noopener noreferrer">现代 C++ 教程</a></h3>
<p>从内容上对二十一世纪二十年代之前产生 <code>C++</code> 的相关特性做了非常相对全面的介绍，读者可以自行根据下面的目录选取感兴趣的内容进行学习，快速熟悉需要了解的内容。这些特性并不需要全部掌握，只需针对自己的使用需求和特定的应用场景，学习、查阅最适合自己的新特性即可。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://xiaolincoding.com/" target="_blank" rel="noopener noreferrer">小林 coding</a></h3>
<p>图解计算机网络、操作系统、计算机组成、数据库，共 1000 张图 + 50 万字，破除晦涩难懂的计算机基础知识，让天下没有难懂的八股文！</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://interview.huihut.com/#/" target="_blank" rel="noopener noreferrer">inteview</a></h3>
<p><code>C/C++</code> 技术面试基础知识总结，包括语言、程序库、数据结构、算法、系统、网络、链接装载库等知识及面试经验、招聘、内推等信息。</p>
<figure><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">电子书</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/weekly/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#14：壁纸下载网站</title>
    <id>https://cunyu1943.github.io/weekly/2023/0715-0721.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0715-0721.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#14：壁纸下载网站</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/RZeCM4qnAinMzC94SZupMg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/RZeCM4qnAinMzC94SZupMg</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#14：壁纸下载网站</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/RZeCM4qnAinMzC94SZupMg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/RZeCM4qnAinMzC94SZupMg</a></p>
</div>
<h2> 一、项目</h2>
<h3> <a href="https://github.com/Kchengz/k-form-design" target="_blank" rel="noopener noreferrer">k-form-design</a></h3>
<p>基于 <code>Vue</code> 和 <code>Ant-design-Vue</code> 实现的表单设计器，样式使用 <code>less</code> 作为开发语言，主要功能是能通过简单操作来生成配置表单，生成可保存的 <code>JSON</code> 数据，并能将 <code>JSON</code> 还原成表单，使表单开发更简单更快速。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/lodash/lodash" target="_blank" rel="noopener noreferrer">lodash</a></h3>
<p><code>Lodash</code> 是一个一致性、模块化、高性能的 <code>JavaScript</code> 实用工具库。遵循 <code>MIT</code> 开源协议发布，并且支持最新的运行环境。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/buqiyuan/vite-vue3-lowcode" target="_blank" rel="noopener noreferrer">vite-vue3-lowcode</a></h3>
<p><code>vue3.x</code> + <code>vite2.x</code> + <code>vant</code> + <code>element-plus</code> <code>H5</code> 移动端低代码平台。可视化拖拽，可视化编辑器。类似易企秀的 <code>H5</code> 制作、建站工具、可视化搭建工具。</p>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> <a href="https://jookdb.com/" target="_blank" rel="noopener noreferrer">JookDB</a></h3>
<p>免费通用的数据库管理工具，支持多种数据库：<code>MySQL</code>, <code>MariaDB</code>, <code>Oracle</code>, <code>PostgreSQL</code>, <code>SQLite</code>, <code>MongoDB</code>, 达梦, <code>OceanBase</code> 和 <code>SQLServer</code>。</p>
<p>软件具有以下特性：</p>
<ul>
<li>轻便的图像程序</li>
<li>表数据编辑</li>
<li>数据传输</li>
<li>生成或执行 <code>SQL</code> 脚本</li>
<li>代码自动完成</li>
<li>暗色主题模式</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://dbeaver.io/" target="_blank" rel="noopener noreferrer">DBeaver</a></h3>
<p>一款免费的跨平台数据库工具，适用于开发人员、数据库管理员、分析师和所有处理数据的人。它支持所有流行的 <code>SQL</code> 数据库，如 <code>MySQL</code>、<code>MariaDB</code>、<code>PostgreSQL</code>、<code>SQLite</code>、<code>Apache</code> 系列等。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://www.beekeeperstudio.io/" target="_blank" rel="noopener noreferrer">Beekeeper</a></h3>
<p>您梦想中的 <code>SQL</code> 编辑器和数据库管理器<br>
一个现代、易于使用且美观的 <code>SQL</code> 客户端，适用于 <code>MySQL</code>、<code>Postgres</code>、<code>SQLite</code>、<code>SQL Server</code> 等。</p>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> <a href="http://pic.netbian.com/" target="_blank" rel="noopener noreferrer">彼岸图网</a></h3>
<p>提供高清免费壁纸下载，而且网站无广告，但每天仅提供一张壁纸免费下载额度，有更多下载需求的可以对站点进行赞助，从而获取网站会员。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://wall.alphacoders.com/?lang=Chinese" target="_blank" rel="noopener noreferrer">Wallpaper Abyss</a></h3>
<p>1008233 张壁纸的聚集地，提供免费壁纸下载，种类齐全，高清大图。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://hdqwalls.com/" target="_blank" rel="noopener noreferrer">HDQwalls</a></h3>
<p>高质量壁纸汇聚地，有 <code>4K</code>、<code>5K</code>、<code>8K</code> 等清晰度的壁纸下载，而且完全免费，更有各种尺寸壁纸供你选择。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> <a href="https://chrome.google.com/webstore/detail/v2ex-polish/onnepejgdiojhiflfoemillegpgpabdm?utm_source=ext_app_menu" target="_blank" rel="noopener noreferrer">V2EX Polish</a></h3>
<p>专为 <code>V2EX</code> 用户设计，提供了丰富的扩展功能。<br>
为原网站添加了众多便捷的功能，让你的 <code>V2EX</code> 页面焕然一新！插件具有以下特点：</p>
<ul>
<li>界面美化<br>
<code>UI</code> 设计更现代化，为你带来愉悦的视觉体验。</li>
<li>评论回复嵌套层级，主题下的评论回复支持层级展示，更轻松地跟踪和回复其他用户的评论。</li>
<li>热门回复展示，自动筛选出最受欢迎的回复，第一时间了解热评。</li>
<li>表情回复支持，评论输入框可以选择表情，让回复更加生动和有趣。</li>
<li>长回复优化，智能折叠长篇回复，一键展开查看完整内容。</li>
<li>内置主题列表，无需打开网页，插件内即可快速获取最热、最新的主题列表和消息通知。</li>
<li>便捷回复操作：文字转 <code>Base64</code>、上传图片</li>
<li>添加用户信息卡片，快捷查看用户信息。</li>
<li>右键菜单扩展：支持解析页面中 <code>Base64</code> 编码内容。</li>
<li>“稍后阅读”功能：添加感兴趣的主题，方便日后浏览。</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://crxmouse.com/zh-hans/" target="_blank" rel="noopener noreferrer">CrxMouse</a></h3>
<p>使用鼠标手势的轻松浏览器导航，通过直观和可自定义的鼠标手势提高您的效率。</p>
<p>鼠标手势内置动作：按 + 按住右键（在屏幕上的任意位置）并拖动以执行以下操作：</p>
<ul>
<li>↓→：关闭当前选项卡</li>
<li>↓→↑：打开一个新窗口</li>
<li>←：返回</li>
<li>←↑：重新打开关闭的标签页</li>
<li>→：前进</li>
<li>→↓：滚动到底部</li>
<li>→↑：滚动到顶部</li>
<li>↑：向上滚动一页</li>
<li>↑↓：刷新</li>
<li>↑↓↑：强制刷新</li>
<li>↑←：移至左侧标签</li>
<li>↑→：移至右侧标签</li>
<li>↓→↓：关闭当前窗口</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://www.similarsites.com/" target="_blank" rel="noopener noreferrer">SimilarSites</a></h3>
<p>立即发现与您当前正在浏览的网站类似的网站。探索网络，了解更多信息。</p>
<p>我们每天都有数以百万计的网站浏览，并且经常会发现自己正在寻找类似的网站来消费内容，购物或仅仅进行浏览。使用 <code>SimilarSites</code>，您可以在几秒钟内找到与您当前正在浏览的网站相关的网站！</p>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> <a href="http://ife.baidu.com/" target="_blank" rel="noopener noreferrer">百度前端技术学园</a></h3>
<p>面向所有自驱成长，终身学习，热爱生活的人，打造的 <code>Web</code> 前端技术学习园地。由百度创办的免费前端技术学习实践、交流、分享平台。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://wangdoc.com/" target="_blank" rel="noopener noreferrer">网道</a></h3>
<p>一个互联网开发文档网站，提供各种软件文档。目标是提供高质量、自主版权、可自由使用的中文软件文档。目前已有 <code>HTML</code>、<code>JavaScript</code>、<code>ES6</code>、<code>Web API</code>、<code>C 语言</code>、<code>Bash</code>、<code>SSH</code> 等诸多内容。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://www.f2er.com/" target="_blank" rel="noopener noreferrer">前端之家</a></h3>
<p>提供各种基础教程的网站，包括 <code>Bootstrap</code>、<code>Node</code>、<code>Angular</code>、<code>ReactJs</code>、<code>JavaScript</code> 等各种前端开发编程语言。</p>
<figure><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">电子书</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/weekly/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>作为程序员，掌握数据结构与算法的重要性就不言而喻了。掌握了数据结构与算法，可以说你的编程能力就会有质的飞跃。任凭各种热门技术的如何变化，只要掌握了核心技能，那都可以见招拆招，做一个“赢家”。</p>
<p>专栏共分为 4 个由浅入深的模块：</p>
<ul>
<li>入门篇</li>
<li>基础篇</li>
<li>高级篇</li>
<li>实战篇</li>
</ul>
<p>作者采用最适合工程师的学习方式，不拘泥于某一特定编程语言，从实际开发场景出发，由浅入深教你学习数据结构与算法的方法，帮你搞懂基本概念和核心理论，深入理解算法精髓，帮你提升使用数据结构和算法思维解决问题的能力。</p>
<p>想要进一步提升自己的竞争力么，那就赶紧加入和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#15：远程控制软件</title>
    <id>https://cunyu1943.github.io/weekly/2023/0722-0728.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0722-0728.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#15：远程控制软件</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/XmW-JmHxZh8X9yiGvmWfqg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/XmW-JmHxZh8X9yiGvmWfqg</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#15：远程控制软件</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/XmW-JmHxZh8X9yiGvmWfqg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/XmW-JmHxZh8X9yiGvmWfqg</a></p>
</div>
<h2> 一、项目</h2>
<h3> <a href="https://github.com/pure-admin/vue-pure-admin" target="_blank" rel="noopener noreferrer">vue–pure-admin</a></h3>
<p><code>Vue3</code> + <code>Vite4</code> + <code>Element-Plus</code> + <code>TypeScript</code> 编写的一款后台管理系统（兼容移动端）。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/TheRamU/Fay" target="_blank" rel="noopener noreferrer">Fay</a></h3>
<p>一个完整的开源项目，包含 <code>Fay</code> 控制器及数字人模型，可灵活组合出不同的应用场景：虚拟主播、现场推销货、商品导购、语音助理、远程语音助理、数字人互动、数字人面试官及心理测评、贾维斯、<code>Her</code>。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/alibaba/higress" target="_blank" rel="noopener noreferrer">Higress</a></h3>
<p>基于阿里内部两年多的 <code>Envoy</code> <code>Gateway</code> 实践沉淀，以开源 <code>Istio</code> 与 <code>Envoy</code> 为核心构建的下一代云原生网关。<code>Higress</code> 实现了安全防护网关、流量网关、微服务网关三层网关合一，可以显著降低网关的部署和运维成本。</p>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> <a href="https://www.raylink.live/" target="_blank" rel="noopener noreferrer">RayLink</a></h3>
<p>一款免费的远程控制软件，专为视觉行业打造的真高清、超流畅远程控制软件！支持 <code>Windows</code>、<code>macOS</code>、<code>Linux</code>、<code>Android</code>、<code>iOS</code> 等主流操作系统。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://file-converter.org/" target="_blank" rel="noopener noreferrer">File Converter</a></h3>
<p>支持批量文件转换和压缩的软件，可集成到系统右键菜单中，支持电子书、视频、图片、文档、音频等多种类型文件转换。而且同时支持转换云端和离线文件，耗能少，速度也快，最重要的一点，完全免费！</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://www.wallpaperengine.io/zh-hans" target="_blank" rel="noopener noreferrer">Wallpaper Engine</a></h3>
<p>让你的桌面变“好看”！在你的 <code>Windows</code> 桌面使用精美绝伦的动态壁纸，既可以将您自己的图像制作成动画以创建新壁纸或导入视频和网站，同时还可以分享给他人！具有以下特点：</p>
<ul>
<li>性能优化</li>
<li>广泛的显示支持</li>
<li>海量壁纸供选择</li>
<li>自定义调整</li>
<li>播放列表和幻灯片</li>
<li><code>LED</code> 硬件支持</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> <a href="https://postcat.com/zh/" target="_blank" rel="noopener noreferrer">Postcat</a></h3>
<p>在线 <code>API</code> 开发测试工具，一款国产开源免费跨平台的开源 <code>API</code> 开发测试工具，超轻量级的接口测试工具，扩展性强。支持 <code>REST</code>、<code>Websocket</code> 等协议，加速完成 <code>API</code> 开发测试工作，十分适合个人及小团队使用。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://carbon.now.sh/" target="_blank" rel="noopener noreferrer">Carbon</a></h3>
<p>一个免费的在线代码截图工具，能够将你的代码生成各种主题的图片并分享，支持自动识别代码编程语言类型。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://www.hereitis.cn/" target="_blank" rel="noopener noreferrer">here it is</a></h3>
<p>一个资源站，免费下载软件、<code>PPT</code>、图片素材、精品小工具、小插件等超多资源。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> <a href="https://chrome.google.com/webstore/detail/ticktick-todo-task-list/diankknpkndanachmlckaikddgcehkod?utm_source=ext_app_menu" target="_blank" rel="noopener noreferrer">滴答清单</a></h3>
<p>滴答清单是 <code>Todo</code> 管理神器 <code>TickTick</code> 的中文版，能帮您随时随地记录和管理所有事项。您可以用它制定学习、工作计划，生成读书、购物、旅行清单，设置生日、约会、还款提醒等。</p>
<p>具有以下特点：</p>
<ul>
<li>使用 <code>QQ</code>、微博、微信一键登录</li>
<li>与 <code>Android</code>、<code>iOS</code>、网页版完美同步、无缝切换</li>
<li>集成微信公众号，随时随地记录想法</li>
<li>清单分类、优先级、任务标签等，让任务清晰有条理</li>
<li>强大且灵活的提醒备忘功能</li>
<li>支持在列表模式下创建子任务</li>
<li>可以在日历视图中安排您的计划</li>
<li>与家人/朋友/同事分享协作完成重要任务</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://chrome.google.com/webstore/detail/focus-to-do-pomodoro-time/ngceodoilcgpmkijopinlkmohnfifjfb?utm_source=ext_app_menu" target="_blank" rel="noopener noreferrer">专注清单</a></h3>
<p>帮助您专注于当前的工作和学习，基于番茄工作法，待办任务清单结合番茄钟计时器，绝佳的时间管理效率工具，帮助提高自律，摆脱拖延。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://chrome.google.com/webstore/detail/new-tab-todo-list-checkli/hdkbnhcgfcokjhlfiicbphafdnipnhjf?utm_source=ext_app_menu" target="_blank" rel="noopener noreferrer">New Tab Todo List</a></h3>
<p>一个闪电般的新标签生产力页面和仪表板与惊人的背景，待办事项，任务，列表，等等。按照应有的方式制作新的标签页/开始页：快速，可定制，美观而高效！</p>
<p>制作清单，轮廓，待办事项等。随着 <code>Chrome</code> 的新标签待办事项列表扩展，只需打开一个新的标签来捕捉你的想法，目标和日常任务。</p>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> <a href="https://github.com/chinesehuazhou/python-weekly" target="_blank" rel="noopener noreferrer">Python-Weekly</a></h3>
<p><code>Python</code> 潮流周刊，分享文章、教程、开源项目、软件工具、播客和视频、热门话题等内容。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/iamseancheney/python_for_data_analysis_2nd_chinese_version" target="_blank" rel="noopener noreferrer">《利用Python进行数据分析·第2版》</a></h3>
<p>内容主要是利用 <code>Python</code> 进行数据控制、处理、整理、分析等方面的具体细节和基本要点。作者的目标是介绍 <code>Python</code> 编程和用于数据处理的库和工具环境，掌握这些，可以让你成为一个数据分析专家。虽然书的标题是“数据分析”，重点却是 <code>Python</code> 编程、库，以及用于数据分析的工具。这就是数据分析要用到的 <code>Python</code> 编程。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/Visualize-ML/Book4_Power-of-Matrix" target="_blank" rel="noopener noreferrer">矩阵力量</a></h3>
<p>全书共 25 章内容，可以归纳为 7 大板块：</p>
<ul>
<li>向量</li>
<li>矩阵</li>
<li>向量空间</li>
<li>矩阵分解</li>
<li>微积分</li>
<li>空间几何</li>
<li>数据</li>
</ul>
<p>书中在讲解线性代数工具时，会穿插介绍其在数据科学和机器学习领域的应用场景，让大家学以致用。本书读者群包括所有在工作中应用数学的朋友，尤其适用于初级程序员进阶，大学本科数学开窍，高级数据分析师，人工智能开发者。</p>
<figure><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">电子书</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/weekly/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#16：别致的二维码</title>
    <id>https://cunyu1943.github.io/weekly/2023/0729-0804.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0729-0804.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#16：别致的二维码</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/ERos0gfETiyjIpqNE_jBsA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/ERos0gfETiyjIpqNE_jBsA</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#16：别致的二维码</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/ERos0gfETiyjIpqNE_jBsA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/ERos0gfETiyjIpqNE_jBsA</a></p>
</div>
<h2> 一、项目</h2>
<h3> Hydro</h3>
<ul>
<li><strong>链接</strong></li>
</ul>
<blockquote>
<p><a href="https://github.com/hydro-dev/Hydro" target="_blank" rel="noopener noreferrer">https://github.com/hydro-dev/Hydro</a></p>
</blockquote>
<ul>
<li><strong>简介</strong></li>
</ul>
<p>新一代高效强大的信息学在线测评系统，易安装，跨平台，多功能，可扩展，有题库。系统有如下特点：</p>
<p>1、模块化设计，插件系统，功能热插拔</p>
<p>2、跨平台兼容，数据一键备份/导入</p>
<p>3、单系统多空间，不同班级/院校，分开管理</p>
<p>4、粒度精细的权限系统，灵活调节</p>
<p>5、规模化支持，上千用户无压力，伸缩组秒级自动扩展</p>
<p>6、全题型支持，跟随时代潮流</p>
<p>7、丰富的题库</p>
<p>……</p>
<ul>
<li><strong>预览</strong></li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> kkFileView</h3>
<ul>
<li><strong>链接</strong></li>
</ul>
<blockquote>
<p><a href="https://gitee.com/kekingcn/file-online-preview" target="_blank" rel="noopener noreferrer">https://gitee.com/kekingcn/file-online-preview</a></p>
</blockquote>
<ul>
<li><strong>简介</strong></li>
</ul>
<p>文档在线预览项目解决方案，项目使用流行的 Spring Boot 搭建，易上手和部署。万能的文件预览开源项目，基本支持主流文档格式预览。</p>
<ul>
<li>
<p>支持 doc, docx, xls, xlsx, xlsm, ppt, pptx, csv, tsv, dotm, xlt, xltm, dot, dotx, xlam, xla, pages 等 Office 办公文档</p>
</li>
<li>
<p>支持 wps, dps, et, ett, wpt 等国产 WPS Office 办公文档</p>
</li>
<li>
<p>支持 odt, ods, ots, odp, otp, six, ott, fodt, fods 等OpenOffice、LibreOffice 办公文档</p>
</li>
<li>
<p>支持 vsd, vsdx 等 Visio 流程图文件</p>
</li>
<li>
<p>支持 wmf, emf 等 Windows 系统图像文件</p>
</li>
<li>
<p>支持 psd, eps 等 Photoshop 软件模型文件</p>
</li>
<li>
<p>支持 pdf ,ofd, rtf 等文档</p>
</li>
<li>
<p>支持 xmind 软件模型文件</p>
</li>
<li>
<p>支持 bpmn 工作流文件</p>
</li>
<li>
<p>支持 eml 邮件文件</p>
</li>
<li>
<p>支持 epub 图书文档</p>
</li>
<li>
<p>支持 obj, 3ds, stl, ply, gltf, glb, off, 3dm, fbx, dae, wrl, 3mf, ifc, brep, step, iges, fcstd, bim 等 3D 模型文件</p>
</li>
<li>
<p>支持 dwg, dxf, dwf, iges , igs, dwt, dng, ifc, dwfx, stl, cf2, plt 等 CAD 模型文件</p>
</li>
<li>
<p>支持 txt, xml(渲染), md(渲染), java, php, py, js, css 等所有纯文本</p>
</li>
<li>
<p>支持 zip, rar, jar, tar, gzip, 7z 等压缩包</p>
</li>
<li>
<p>支持 jpg, jpeg, png, gif, bmp, ico, jfif, webp 等图片预览（翻转，缩放，镜像）</p>
</li>
<li>
<p>支持 tif, tiff 图信息模型文件</p>
</li>
<li>
<p>支持 tga 图像格式文件</p>
</li>
<li>
<p>支持 svg 矢量图像格式文件</p>
</li>
<li>
<p>支持 mp3,wav,mp4,flv 等音视频格式文件</p>
</li>
<li>
<p>支持 avi,mov,rm,webm,ts,rm,mkv,mpeg,ogg,mpg,rmvb,wmv,3gp,ts,swf 等视频格式转码预览</p>
</li>
<li>
<p>支持 dcm 等医疗数位影像预览</p>
</li>
<li>
<p>支持 drawio 绘图预览</p>
</li>
<li>
<p><strong>预览</strong></p>
</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 觅思文档</h3>
<ul>
<li><strong>链接</strong></li>
</ul>
<blockquote>
<p><a href="https://gitee.com/zmister/MrDoc" target="_blank" rel="noopener noreferrer">https://gitee.com/zmister/MrDoc</a></p>
</blockquote>
<ul>
<li><strong>简介</strong></li>
</ul>
<p>适合作为个人和中小型团队的私有云文档、云笔记和知识管理工具，致力于成为优秀的私有化在线文档部署方案。</p>
<p>全系产品目前涵盖以下终端：</p>
<ul>
<li>
<p>Web 端：开源版、专业版</p>
</li>
<li>
<p>浏览器扩展：支持 Chromium 系列浏览器、Firefox 浏览器</p>
</li>
<li>
<p>桌面客户端：支持 Windows、macOS、Linux</p>
</li>
<li>
<p>移动客户端：支持 Android</p>
</li>
<li>
<p><strong>预览</strong></p>
</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> 微信输入法</h3>
<ul>
<li><strong>链接</strong></li>
</ul>
<blockquote>
<p><a href="https://z.weixin.qq.com/" target="_blank" rel="noopener noreferrer">https://z.weixin.qq.com/</a></p>
</blockquote>
<ul>
<li><strong>简介</strong></li>
</ul>
<p>微信团队出品的输入法，主打简洁、好用、打字快，目前还处于测试阶段，但是已经支持各大主流平台。具有以下特点：</p>
<p>1、语音转文字</p>
<p>2、智能推荐书影音</p>
<p>3、表情推荐</p>
<p>4、智能拼写</p>
<p>5、手写找字</p>
<p>6、边写边译</p>
<p>7、拼写检查</p>
<ul>
<li><strong>预览</strong></li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> Lively Wallpaper</h3>
<ul>
<li><strong>链接</strong></li>
</ul>
<blockquote>
<p><a href="https://www.rocksdanister.com/lively/" target="_blank" rel="noopener noreferrer">https://www.rocksdanister.com/lively/</a></p>
</blockquote>
<ul>
<li><strong>简介</strong></li>
</ul>
<p>免费开源软件，允许用户设置基于 WinUI 3 制作的动画桌面壁纸和屏幕保护程序。</p>
<ul>
<li><strong>预览</strong></li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 妙记多</h3>
<ul>
<li><strong>链接</strong></li>
</ul>
<blockquote>
<p><a href="https://mojidoc.com/login?from=n58Zwp" target="_blank" rel="noopener noreferrer">https://mojidoc.com/login?from=n58Zwp</a></p>
</blockquote>
<ul>
<li><strong>简介</strong></li>
</ul>
<p>致力于为新一代知识工作者提供服务，协助个人和团队提升协作效率，大幅解放生产力。</p>
<ul>
<li><strong>预览</strong></li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> 艺码</h3>
<ul>
<li><strong>链接</strong></li>
</ul>
<blockquote>
<p><a href="https://yima.me/" target="_blank" rel="noopener noreferrer">https://yima.me/</a></p>
</blockquote>
<ul>
<li><strong>简介</strong></li>
</ul>
<p>一款基于 <code>AI</code> 的二维码美化工具，能生成跟二维码深度融合的各种艺术风格的绘画，并且扫码后能跳转到指定的任意二维码/网站/公众号等。</p>
<ul>
<li><strong>预览</strong></li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> MewXAI 星月熊</h3>
<ul>
<li><strong>链接</strong></li>
</ul>
<blockquote>
<p><a href="https://qr.mewx.art/" target="_blank" rel="noopener noreferrer">https://qr.mewx.art/</a></p>
</blockquote>
<ul>
<li><strong>简介</strong></li>
</ul>
<p>由 <code>AI</code> 驱动的下一代艺术二维码，通过该网站，能在短短数秒内创建出令人惊叹的下一代艺术二维码。从此告别单调的黑白二维码，给人留下深刻的印象！</p>
<p>支持微信码、收款码、网站引流、广告 <code>ROI</code>、产品包装、展览引导、品牌推广、个人名片、扫描点餐、邀请函、二维码防伪等诸多使用场景。</p>
<p>支持以下两种方式方式创建：</p>
<p>1、上传原始二维码</p>
<p>2、直接输入文本内容/链接</p>
<ul>
<li><strong>预览</strong></li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> Quick QR Art</h3>
<ul>
<li><strong>链接</strong></li>
</ul>
<blockquote>
<p><a href="https://quickqr.art/" target="_blank" rel="noopener noreferrer">https://quickqr.art/</a></p>
</blockquote>
<ul>
<li><strong>简介</strong></li>
</ul>
<p>一款借助 <code>AI</code> 模型来生成艺术二维码的工具，原理是利用了 <code>Stable Diffusion</code> 中的 <code>Control Net</code> 模型。仅需几步，就能创建属于自己定制的艺术二维码。</p>
<ul>
<li><strong>预览</strong></li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> YouTube 双字幕</h3>
<ul>
<li><strong>链接</strong></li>
</ul>
<blockquote>
<p><a href="https://chrome.google.com/webstore/detail/youtube-dual-subtitles/hkbdddpiemdeibjoknnofflfgbgnebcm?utm_source=ext_app_menu" target="_blank" rel="noopener noreferrer">https://chrome.google.com/webstore/detail/youtube-dual-subtitles/hkbdddpiemdeibjoknnofflfgbgnebcm?utm_source=ext_app_menu</a></p>
</blockquote>
<ul>
<li><strong>简介</strong></li>
</ul>
<p>自动切换到本地语言，双语字幕，字幕下载，字幕配音，自定义字幕样式。</p>
<p>默认字幕可设置为翻译语言，而且卡在双语字幕和单字幕之间切换。</p>
<p>可下载视频字幕和翻译字幕，支持 .txt，.srt。</p>
<p>还可以自定义字幕样式，字号，字体，颜色，背景，顺序，文字描边，间距等。</p>
<ul>
<li><strong>预览</strong></li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 扩展管理器</h3>
<ul>
<li><strong>链接</strong></li>
</ul>
<blockquote>
<p><a href="https://chrome.google.com/webstore/detail/extension-manager/gjldcdngmdknpinoemndlidpcabkggco?utm_source=ext_app_menu" target="_blank" rel="noopener noreferrer">https://chrome.google.com/webstore/detail/extension-manager/gjldcdngmdknpinoemndlidpcabkggco?utm_source=ext_app_menu</a></p>
</blockquote>
<ul>
<li><strong>简介</strong></li>
</ul>
<p>一键管理所有扩展，快速开启/禁用、批量闪电管理，智能排序，右键卸载、锁定、选项配置，角标提醒，大小布局随心配。快捷、简单、安全。<br>
一键开启/禁用扩展</p>
<ol>
<li>闪电分组：根据场景快速开启/禁用扩展组（被锁定或主题类扩展除外）</li>
<li>智能排序：可根据您的使用频率智能排序（默认根据名称排序）</li>
<li>右键菜单：提供锁定、卸载、选项配置、主页、APP运行等快捷功能</li>
<li>智能搜索：通过关键字或词组快速找到需要的扩展</li>
<li>角标提醒：实时显示扩展状态，用完后提醒重置，减少资源占用（被锁定或主题类扩展除外）</li>
<li>视图选择：提供列表视图和网格视图，符合用户习惯</li>
<li>分组管理：普通分组和固定分组，灵活管理</li>
<li>扩展命名：给扩展起一个你喜欢的别名</li>
<li>自动匹配：可以根据不同的网站开启和关闭扩展</li>
</ol>
<ul>
<li><strong>预览</strong></li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> Eagle for Chrome</h3>
<ul>
<li><strong>链接</strong></li>
</ul>
<blockquote>
<p><a href="https://chrome.google.com/webstore/detail/eagle-for-chrome/lieogkinebikhdchceieedcigeafdkid?utm_source=ext_app_menu" target="_blank" rel="noopener noreferrer">https://chrome.google.com/webstore/detail/eagle-for-chrome/lieogkinebikhdchceieedcigeafdkid?utm_source=ext_app_menu</a></p>
</blockquote>
<ul>
<li><strong>简介</strong></li>
</ul>
<p>此扩展程序可以轻松保存图像并将屏幕截图保存到 Eagle App。逛网站时看到感兴趣的图片就能立即收藏到 Eagle 里，并迅速完成分类整理。</p>
<ol>
<li>拖拽收藏：拖曳网页图片立即收藏。</li>
<li>Alt + 右键：轻点一下，立即保存。</li>
<li>批量保存：一键收集网页所有图片。</li>
<li>网页截图：快速将整页网页保存下来。</li>
</ol>
<ul>
<li><strong>预览</strong></li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> 程序员做饭指南</h3>
<ul>
<li><strong>链接</strong></li>
</ul>
<blockquote>
<p><a href="https://github.com/Anduin2017/HowToCook" target="_blank" rel="noopener noreferrer">https://github.com/Anduin2017/HowToCook</a></p>
</blockquote>
<ul>
<li><strong>简介</strong></li>
</ul>
<p>网上找菜谱和做法，菜谱往往写法千奇百怪，经常中间莫名出来一些材料。对于习惯了形式语言的程序员来说极其不友好。于是作者自己搜寻菜谱并结合实际做菜的经验，用更清晰精准的描述来整理常见菜的做法，以方便程序员在家做饭。</p>
<p>这是一个由社区驱动和维护的开源项目，使更多人能够一起做一个有趣的仓库。</p>
<ul>
<li><strong>预览</strong></li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 猴子都能懂的 Git 入门</h3>
<ul>
<li><strong>链接</strong></li>
</ul>
<blockquote>
<p><a href="https://backlog.com/git-tutorial/cn/" target="_blank" rel="noopener noreferrer">https://backlog.com/git-tutorial/cn/</a></p>
</blockquote>
<ul>
<li><strong>简介</strong></li>
</ul>
<p>从名字就知道，一个超简单的 <code>Git</code> 入门教程。主要分为针对 <code>Git</code> 初学者的入门篇和有 <code>Git</code> 使用经验的高级篇。此外，还提供了 <code>Git</code> 索引，方便通过 <code>Git</code> 的操作来查找期具体方法。</p>
<ul>
<li><strong>预览</strong></li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> TeachYourselfCS-CN</h3>
<ul>
<li><strong>链接</strong></li>
</ul>
<blockquote>
<p><a href="https://github.com/izackwu/TeachYourselfCS-CN" target="_blank" rel="noopener noreferrer">https://github.com/izackwu/TeachYourselfCS-CN</a></p>
</blockquote>
<ul>
<li><strong>简介</strong></li>
</ul>
<p>如果你是一个自学成才的工程师，或者从编程培训班毕业，那么你很有必要学习计算机科学。幸运的是，不必为此花上数年光阴和不菲费用去攻读一个学位：仅仅依靠自己，你就可以获得世界一流水平的教育。</p>
<p>互联网上，到处都有许多的学习资源，然而精华与糟粕并存。</p>
<p>我们时常疑惑应当学习哪些科目，为什么？</p>
<p>对于这些科目，最好的书籍或者视频课程 是什么？</p>
<p>在这份指引中，尝试对这些问题做出确定的回答。</p>
<ul>
<li><strong>预览</strong></li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">电子书</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/weekly/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>作为程序员，掌握数据结构与算法的重要性就不言而喻了。掌握了数据结构与算法，可以说你的编程能力就会有质的飞跃。任凭各种热门技术的如何变化，只要掌握了核心技能，那都可以见招拆招，做一个“赢家”。</p>
<p>专栏共分为 4 个由浅入深的模块：</p>
<ul>
<li>入门篇</li>
<li>基础篇</li>
<li>高级篇</li>
<li>实战篇</li>
</ul>
<p>作者采用最适合工程师的学习方式，不拘泥于某一特定编程语言，从实际开发场景出发，由浅入深教你学习数据结构与算法的方法，帮你搞懂基本概念和核心理论，深入理解算法精髓，帮你提升使用数据结构和算法思维解决问题的能力。</p>
<p>想要进一步提升自己的竞争力么，那就赶紧加入和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#17：美图合集 App</title>
    <id>https://cunyu1943.github.io/weekly/2023/0805-0811.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0805-0811.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#17：美图合集 App</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/bPh_VRqv_y1fFZUxfOT_GQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/bPh_VRqv_y1fFZUxfOT_GQ</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#17：美图合集 App</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/bPh_VRqv_y1fFZUxfOT_GQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/bPh_VRqv_y1fFZUxfOT_GQ</a></p>
</div>
<h2> 一、项目</h2>
<h3> <a href="https://github.com/codebdy/rxdrag" target="_blank" rel="noopener noreferrer">RxDrag</a></h3>
<p>一款开源企业级可视化低代码前端，目标是可以编辑所有 HTML 基础的组件。比如支持 React、VUE、小程序等，目前仅实现了 React 版。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/LHRUN/paint-board" target="_blank" rel="noopener noreferrer">paint-board</a></h3>
<p>一款 Canvas 画板，功能包括动态画笔、橡皮擦、文本绘制、元素框选、画板拖拽、图层操作、撤销反撤销保存等内容。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/un-pany/v3-admin-vite" target="_blank" rel="noopener noreferrer">V3 Admin Vite</a></h3>
<p>一个免费开源的中后台管理系统基础解决方案，基于 Vue3、TypeScript、Element Plus、Pinia 和 Vite 等主流技术。</p>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> <a href="https://jmmt.mmkj.tech/" target="_blank" rel="noopener noreferrer">集美美图</a></h3>
<p>一款简单纯粹主打每日高清美女写真纸精选的应用，每一张美图均为人工精心挑选和审核，每天只更新 10 张，我们觉得壁纸不在多而在精，我们不用机器操作，也不用算法推荐，我们希望做一款精致、克制、纯粹的超高品质应用。同时支持 <code>Android</code> 和 <code>iOS</code> 端。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://www.douyin.com/qishui/" target="_blank" rel="noopener noreferrer">汽水音乐</a></h3>
<p>汽水音乐是抖音官方出品的一款音乐 APP，可以帮你发现更多好音乐。汽水音乐 APP 产品拥有千万量级曲库，支持海量音乐随心听，同时具备个性化推荐、分类电台、特色榜单等功能，汽水音乐官网帮助你发现小众好音乐拒绝千篇一律。用户还可以同步抖音音乐收藏，彰显个人音乐品味，下次听歌更方便。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://boardos.online/" target="_blank" rel="noopener noreferrer">BoardOS</a></h3>
<p>一款强大、免费且易于使用的在线多人实时白板协作系统，帮助您随时随地将团队聚集在一起。</p>
<p>基于白板的在线实时协作系统，拥有多种扩展应用和插件，适用于团队协作、线上教学、在线会议、头脑风暴、在线设计等众多场景，一切为了高效!</p>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> <a href="https://chenyating.github.io/art-qrcode/" target="_blank" rel="noopener noreferrer">QR-艺术二维码</a></h3>
<p>只需输入你要生成二维码的内容，点击开始生成即可生成你的艺术二维码。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://chinese-colors.heyfe.org/" target="_blank" rel="noopener noreferrer">中国色彩</a></h3>
<p>按照选择的颜色一键生成网站配色，懒人配色必备工具。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://bmm.lccl.cc/" target="_blank" rel="noopener noreferrer">BMM</a></h3>
<p>一个设计精美的网址导航网站，收集了众多优质视频、图片、设计、编程、学习等网站；登录后可通过站点独有的标签系统，管理属于自己的网络书签。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> <a href="https://chrome.google.com/webstore/detail/chathub-all-in-one-chatbo/iaakpnchhognanibcahlpcplchdfmgma?hl=zh-CN" target="_blank" rel="noopener noreferrer">ChatHub</a></h3>
<p>一个 ChatBot 聚合客户端，可同时使用 ChatGPT、Bing、Bard 和更多机器人，支持如下功能：</p>
<ul>
<li>在一个应用里使用多种 ChatBot，目前支持 ChatGPT, Bing Chat, Google Bard, Claude, 讯飞星火及一些开源模型，并在持续集成更多机器人</li>
<li>同时和多个 ChatBot 聊天，方便对比回答</li>
<li>支持 ChatGPT API、Azure OpenAI service</li>
<li>支持 GPT-4</li>
<li>Prompt Library</li>
<li>快捷键一键唤起</li>
<li>Markdown 及代码高亮</li>
<li>Dark mode</li>
<li>联网搜索</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://chrome.google.com/webstore/detail/google-keep-chrome-extens/lpcaedmchfhocbbapmcbpinfpgnhiddi?hl=zh-CN" target="_blank" rel="noopener noreferrer">Google Keep</a></h3>
<p>想把特定的网页、图片或引用文字保存起来，方便日后使用吗？有了 Google Keep Chrome 扩展程序，您可以轻松将所需内容保存到 Keep，并可在您使用的所有平台同步，包括网页、Android 设备、iOS 设备和 Wear 设备。您还可以通过记事功能记录详细信息，并利用标签快速将记事分门别类，方便日后查找相关记事。</p>
<p>插件支持如下功能：</p>
<ul>
<li>保存网页链接、文本和图片</li>
<li>针对已保存的内容创建记事</li>
<li>为记事添加标签</li>
<li>自动保存到 Google Keep</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://chrome.google.com/webstore/detail/imtranslator-translator-d/noaijdpnepcgjemiklgfkcfbkokogabh?hl=zh-CN" target="_blank" rel="noopener noreferrer">ImTranslator</a></h3>
<p>支持选定文本、单词、短语和网页翻译，支持阅读高达 10 种语言的文字，主要有如下特点：</p>
<ul>
<li>在 91 种语言之间翻译</li>
<li>每次翻译 5000 个字符</li>
</ul>
<ul>
<li>翻译历史</li>
<li>整个网页翻译，带鼠标悬停翻译选项</li>
<li>30 种语言文本-语音转换</li>
<li>自动源语言检测</li>
<li>回译</li>
<li>热键自定义</li>
<li>对各种翻译工具的完全自定义</li>
<li>本地化的用户界面</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> <a href="https://github.com/wangdoc/typescript-tutorial" target="_blank" rel="noopener noreferrer">TypeScript 教程</a></h3>
<p>TypeScript 开源教程，介绍基本概念和用法，面向初学者。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://gitee.com/moxi159753/LearningNotes" target="_blank" rel="noopener noreferrer">陌溪的学习笔记</a></h3>
<p>陌溪的学习笔记，面试突击宝典，主要来源于 B 站上视频的学习，同时会记录平时一些学习和项目中遇到的问题。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://gitee.com/52itstyle/Python" target="_blank" rel="noopener noreferrer">从零学 Python</a></h3>
<p>从零学 Python，各种开发案例，不定期更新。</p>
<figure><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">电子书</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/weekly/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#18：灵感收集器</title>
    <id>https://cunyu1943.github.io/weekly/2023/0812-0818.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0812-0818.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#18：灵感收集器</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/6S1Lde5v64sI0R-UttKJgA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/6S1Lde5v64sI0R-UttKJgA</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#18：灵感收集器</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/6S1Lde5v64sI0R-UttKJgA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/6S1Lde5v64sI0R-UttKJgA</a></p>
</div>
<h2> 一、项目</h2>
<h3> <a href="https://gitee.com/layui/layui-vue" target="_blank" rel="noopener noreferrer">layui-vue</a></h3>
<p>一套 Vue 3.0 的桌面端组件库。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://gitee.com/dotnetchina/Furion" target="_blank" rel="noopener noreferrer">Furion</a></h3>
<p>一个应用程序框架，您可以将它集成到任何 .NET/C# 应用程序中，让 .NET 开发更简单，更通用，更流行。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://gitee.com/dromara/TLog" target="_blank" rel="noopener noreferrer">TLog</a></h3>
<p>一个轻量级的分布式日志标记追踪神器，10 分钟即可接入，自动对日志打标签完成微服务的链路追踪。支持 log4j，log4j2，logback 三大日志框架，支持 Dubbo，Dubbox，Spring Cloud 三大 RPC 框架。</p>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> <a href="https://gitmind.cn/" target="_blank" rel="noopener noreferrer">GitMind</a></h3>
<p>新一代<strong>免费</strong>思维导图协作软件，头脑风暴、思想共创，激发思想流动，让智慧自然涌现。</p>
<p>一款全平台 在线思维导图脑图架构图制作软件工具，支持手机手机思维导图，Windows/Mac/Linux 多平台操作及内容同步。它提供有海量的架构图，流程图、思维导图模板可供用户直接使用，支持在线制作流程图、思维导图、组织结构图、类图、用例图、ER 图、网络拓扑图以及 UML 图等十多种图形。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://gridea.dev/" target="_blank" rel="noopener noreferrer">Gridea</a></h3>
<p>建造你的数字花园，让写作成为最佳谈话方式。</p>
<p>提供撰写、托管、自定义域名的全功能 Blog 工具。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://withpinbox.com/" target="_blank" rel="noopener noreferrer">Pinbox</a></h3>
<p>一款跨平台的收藏工具，您可以用它来记录灵感，稍后阅读，保存资料甚至网络上的任何内容。</p>
<p>登录输入邀请码 <strong>9eb4d</strong> 即可获得 7 天专业版免费使用权，还不快快行动起来！</p>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> <a href="https://loading.io/" target="_blank" rel="noopener noreferrer">Loading.io</a></h3>
<p>一个简单好用的 loading 制作网站，提供基于各种形式（Ajax Loader, Animated Icons, Live Background）和各种格式（GIF/SVG/APNG/CSS）的loading过渡动画。既有免费内容，也有付费内容，不过免费内容已经足够日常设计使用。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://undraw.co/illustrations" target="_blank" rel="noopener noreferrer">unDraw</a></h3>
<p>免费可商用矢量插画图库，800 多张工作、生活原创插画。一键即可改变插画主色调，提供 png 和 svg 两种格式下载，目前仍在持续更新中。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://www.colorgg.com/" target="_blank" rel="noopener noreferrer">ColorGG</a></h3>
<p>一个免费的颜色工具，提供有关颜色信息，为您生成互补色、类似色、分裂补色、三元、四元、单色等配色方案。<br>
在搜索框中输入颜色值，提供关于该颜色的详细信息并自动生成十六进制、RGB、CMKY、HSL、HSV、CIE-LAB、LUV、LCH、Hunter-Lab、XYZ、xyY 等信息。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> <a href="https://immersivetranslate.com/" target="_blank" rel="noopener noreferrer">沉浸式翻译</a></h3>
<p>沉浸式网页双语翻译扩展，免费使用，支持 Deepl/Google/有道/腾讯翻译等多个翻译服务，支持 Firefox/Chrome/油猴脚本，亦可在 iOS Safari 上使用。</p>
<p>一款免费的，好用的，没有废话的，革命性的，饱受赞誉的，AI 驱动的双语网页翻译扩展，帮助你有效地打破信息差，在手机上也可以用！</p>
<p>主要特性：</p>
<ul>
<li>沉浸式阅读外文网站</li>
<li>强大的输入框翻译</li>
<li>高效的文件翻译</li>
<li>创新的鼠标悬停翻译</li>
<li>深度定制优化主流网站</li>
<li>全平台支持</li>
<li>支持 10+ 种翻译服务</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://chrome.google.com/webstore/detail/toucan-language-learning/lokjgaehpcnlmkebpmjiofccpklbmoci?hl=zh-CN" target="_blank" rel="noopener noreferrer">Toucan</a></h3>
<p>当您访问网站时，Toucan 会自动将页面上的某些单词和短语翻译成您希望学习的语言。通过这种方式，您就可以在自己熟悉语言的语境中，学习新语言中的单词，支持以下语言：</p>
<ul>
<li>英语（适用于讲西班牙母语用户）</li>
<li>西班牙语</li>
<li>法语</li>
<li>日语</li>
<li>德语</li>
<li>韩语</li>
<li>葡萄牙语</li>
<li>意大利语</li>
<li>阿拉伯语</li>
<li>中文（普通话）</li>
<li>希伯来语</li>
<li>印地语</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://chrome.google.com/webstore/detail/blocksite-block-websites/eiimnmioipafcokbfikbljfdeojpcgbh?hl=zh-CN" target="_blank" rel="noopener noreferrer">BlockSite</a></h3>
<p>保持专注并提高生产力：自定义组织列表、计划的站点组织和密码保护，主要具有以下特点：</p>
<ul>
<li>保持专注扩展</li>
<li>工作模式</li>
<li>调度</li>
<li>时间管理</li>
<li>密码保护</li>
<li>屏蔽成人内容</li>
<li>定制阻止页</li>
<li>站点重定向</li>
<li>跨浏览器同步</li>
<li>卸载预防</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> <a href="https://github.com/Mr-xn/RedTeam_BlueTeam_HW" target="_blank" rel="noopener noreferrer">RedTeam_BlueTeam_HW</a></h3>
<p>红蓝对抗以及护网相关工具和资料，内存 shellcode（cs + msf）和内存马查杀工具。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/dunwu/nginx-tutorial" target="_blank" rel="noopener noreferrer">Nginx 极简教程</a></h3>
<p>一个 Nginx 极简教程，目的在于帮助新手快速入门 Nginx。</p>
<p>而且仓库中模拟了工作中的一些常用实战场景，并且都可以通过脚本一键式启动，可以快速看到演示效果。</p>
<figure><figcaption></figcaption></figure>
<h3> <a href="https://github.com/dunwu/linux-tutorial" target="_blank" rel="noopener noreferrer">Linux 教程</a></h3>
<p>主要涵盖以下内容：Linux 命令、Linux 系统运维、软件运维、精选常用 Shell 脚本等。</p>
<figure><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">电子书</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/weekly/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>作为程序员，掌握数据结构与算法的重要性就不言而喻了。掌握了数据结构与算法，可以说你的编程能力就会有质的飞跃。任凭各种热门技术的如何变化，只要掌握了核心技能，那都可以见招拆招，做一个“赢家”。</p>
<p>专栏共分为 4 个由浅入深的模块：</p>
<ul>
<li>入门篇</li>
<li>基础篇</li>
<li>高级篇</li>
<li>实战篇</li>
</ul>
<p>作者采用最适合工程师的学习方式，不拘泥于某一特定编程语言，从实际开发场景出发，由浅入深教你学习数据结构与算法的方法，帮你搞懂基本概念和核心理论，深入理解算法精髓，帮你提升使用数据结构和算法思维解决问题的能力。</p>
<p>想要进一步提升自己的竞争力么，那就赶紧加入和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">好物周刊#19：开源指北</title>
    <id>https://cunyu1943.github.io/weekly/2023/0819-0825.html</id>
    <link href="https://cunyu1943.github.io/weekly/2023/0819-0825.html"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <summary type="html"><![CDATA[<h1> 好物周刊#19：开源指北</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/tqZW3qavO8WfYLAgHQANiA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/tqZW3qavO8WfYLAgHQANiA</a></p>
</div>]]></summary>
    <content type="html"><![CDATA[<h1> 好物周刊#19：开源指北</h1>
<div class="hint-container info">
<p class="hint-container-title">共勉</p>
<p>不要哀求，学会争取。若是如此，终有所获。</p>
</div>
<div class="hint-container tip">
<p class="hint-container-title">原文</p>
<p><a href="https://mp.weixin.qq.com/s/tqZW3qavO8WfYLAgHQANiA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/tqZW3qavO8WfYLAgHQANiA</a></p>
</div>
<h2> 一、项目</h2>
<h3> 1、<a href="https://github.com/Vanessa219/vditor" target="_blank" rel="noopener noreferrer">Vditor</a></h3>
<p>一款浏览器端的 Markdown 编辑器，支持所见即所得、即时渲染（类似 Typora）和分屏预览模式。它使用 TypeScript 实现，支持原生 JavaScript 以及 Vue、React、Angular 和 Svelte 等框架。</p>
<figure><figcaption></figcaption></figure>
<h3> 2、<a href="https://gitee.com/jeffvon/xxzsource" target="_blank" rel="noopener noreferrer">小玄猪商城</a></h3>
<p>小玄猪商城是一套基于前后端分离的 B2B、B2C 商城系统，支持微信小程序、支付宝小程序、H5 商城、APP 商城。支持多商户入驻、适用于直播商城、社交电商、团购、拼团、秒杀、砍价、活动报名、客户管理、知识付费、积分商城、抽奖活动、会员卡、权益卡、成长值、预售、任务中心等场景。商城采用 TP6、VUE、element-vue-admin、uniapp 等技术栈，代码简洁，易于二次开发。</p>
<figure><figcaption></figcaption></figure>
<h3> 3、<a href="https://gitee.com/ruitao_admin/gododb" target="_blank" rel="noopener noreferrer">godoDb</a></h3>
<p>一款 MySQL 数据库管理工具，具有以下特性：</p>
<ul>
<li>支持数据库备份还原，支持添加数据库；</li>
<li>支持自动生成数据库设计文档，md 格式以及实时预览，可以下载成 pdf/word 文件；</li>
<li>支持数据表名/注释/autoid 的更改，支持优化表/修复表/删除表/清空表；</li>
<li>可查看/编辑/新增/复制任意表数据；</li>
<li>可执行 sql 文件，并查看执行后的数据结果；</li>
<li>可更改字段名/注释/默认值/排序，可拖拽排序字段，可删除字段；</li>
<li>支持连接/管理多个外部数据库，可通过 ssh 连接外部数据库，可导入 pem 文件连接；</li>
<li>支持数据库表保护；</li>
<li>精细化的权限控制，多角色多用户管理；</li>
<li>可查询每个用户的操作记录，方便回查；</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 二、软件</h2>
<h3> 1、<a href="https://github.com/marktext/marktext" target="_blank" rel="noopener noreferrer">MarkText</a></h3>
<p>一个简单优雅的开源 Markdown 编辑器，专注于速度和可用性。而且跨平台，在 Windows、macOS 以及 Linux 平台均可使用。</p>
<figure><figcaption></figcaption></figure>
<h3> 2、<a href="https://www.apps.vip/" target="_blank" rel="noopener noreferrer">想天工作台</a></h3>
<p>你的副屏操作系统，集效率辅助、游戏娱乐、桌面美化于一身，让你的老设备再次就业，让屏幕解锁更多玩法。此外还支持以下特性：</p>
<ul>
<li>浅/暗色模式切换</li>
<li>多屏联动</li>
<li>内置浏览器</li>
<li>启动器</li>
<li>创意市场</li>
<li>剪贴板</li>
<li>弹幕</li>
<li>壁纸</li>
<li>轻聊</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 3、<a href="https://wanglin2.github.io/mind-map/#/index" target="_blank" rel="noopener noreferrer">SimpleMindMap</a></h3>
<p>一个思维导图库，同时也是一个思维导图软件。开源、免费、强大...</p>
<p>无论你是开发者，还是使用者，只要喜欢思维导图，都能在这个项目里找到你需要的。</p>
<figure><figcaption></figcaption></figure>
<h2> 三、网站</h2>
<h3> 1、<a href="https://img.logosc.cn/" target="_blank" rel="noopener noreferrer">改图神器</a></h3>
<p>AI 万能图片编辑器，在线修改图片颜色尺寸、智能抠图去水印，AI/EPS/PSD/SVG 全格式支持的在线图片编辑器。</p>
<figure><figcaption></figcaption></figure>
<h3> 2、<a href="https://jsfiddle.net/" target="_blank" rel="noopener noreferrer">JSFiddle</a></h3>
<p>一个在线 IDE 服务和在线社区，用于测试和展示用户创建的协作 HTML，CSS 和 JavaScript 代码段。</p>
<figure><figcaption></figcaption></figure>
<h3> 3、<a href="http://www.lsjgcx.com/" target="_blank" rel="noopener noreferrer">历史价格查询</a></h3>
<p>输入商品对应网址链接，就能查询商品的历史价格走势，让你不再被商家的各种促销活动忽悠，更清晰的了解商家活动是否为虚假促销以及促销力度。</p>
<figure><figcaption></figcaption></figure>
<h2> 四、插件</h2>
<h3> 1、<a href="https://chrome.google.com/webstore/detail/onetab/chphlpgkkbolifaimnlloiipkdnihall" target="_blank" rel="noopener noreferrer">OneTab</a></h3>
<p>当您发现自己有太多的标签页时，单击 OneTab 图标，将所有标签页转换成一个列表。当您需要再次访问这些标签页时，可以单独或全部恢复它们，从而节省高达 95％ 的内存。</p>
<figure><figcaption></figcaption></figure>
<h3> 2、<a href="https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg" target="_blank" rel="noopener noreferrer">FireShot</a></h3>
<p>捕捉网页截图，编辑并将它们保存为 PDF，JPEG，GIF，PNG 或 BMP。然后用于上传，打印，在 Photoshop 中打开，复制到剪贴板或电子邮件等操作。</p>
<figure><figcaption></figcaption></figure>
<h3> 3、<a href="https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll?hl=zh-CN" target="_blank" rel="noopener noreferrer">简悦</a></h3>
<p>让你瞬间进入沉浸式阅读的 Chrome 扩展，类似 Safari 的阅读模式。插件具有以下特点：</p>
<ul>
<li>阅读模式</li>
<li>聚焦模式</li>
<li>丰富的导出功能</li>
<li>定制化导出</li>
<li>自动化</li>
<li>标注</li>
<li>同步</li>
<li>每日回顾</li>
<li>……</li>
</ul>
<figure><figcaption></figcaption></figure>
<h2> 五、资料</h2>
<h3> 1、<a href="https://github.com/shengxinjing/fe-advanced-interview" target="_blank" rel="noopener noreferrer">大圣前端进阶指南</a></h3>
<p>一份前端进阶面试指南，解决前端进阶的难点。囊括了以下内容：</p>
<ul>
<li>React + TS 企业级实战 + 组件库</li>
<li>Vue3 + TS 企业级实战 + 组件库</li>
<li>前端工程师的算法课</li>
<li>源码漫游</li>
<li>前端面试课</li>
<li>大圣前端私教课</li>
</ul>
<figure><figcaption></figcaption></figure>
<h3> 2、<a href="https://gitee.com/gitee-community/opensource-guide" target="_blank" rel="noopener noreferrer">开源指北</a></h3>
<p>一份给开源新手的保姆级开源百科，如果你还不知道如何开源该从何做起，不妨参考下这份指南。</p>
<figure><figcaption></figcaption></figure>
<h3> 3、<a href="https://gitee.com/jishupang/vue3-knowledge-map" target="_blank" rel="noopener noreferrer">Vue3.x 知识图谱</a></h3>
<p>Vue3.x 知识地图，使用这个图可以大大加快开发效率，轻松记忆知识点，对于学习 Vue3 很有帮助。</p>
<figure><figcaption></figcaption></figure>
<h2> ✍️ 说明</h2>
<p>周刊专栏相关信息：</p>
<ul>
<li><strong>项目地址</strong>：<a href="https://github.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Github</a> | <a href="https://gitee.com/cunyu1943/weekly/" target="_blank" rel="noopener noreferrer">Gitee</a> ，觉得不错麻烦给我一个<strong>Star</strong>，感谢 ❤️</li>
<li><strong>浏览地址</strong>：公众号 | <a href="https://cunyu1943.github.io/weekly" target="_blank" rel="noopener noreferrer">电子书</a></li>
</ul>
<p>如果你阅读到这里，说明我的工作没有白费。如果你想推荐项目/网站/软件/资源，欢迎提交 <strong><a href="https://github.com/cunyu1943/weekly/issues" target="_blank" rel="noopener noreferrer">issue</a></strong> 或者添加我 <strong>个人微信：cunyu1943</strong> 与我交流。</p>
<hr>
<h2> 🎬️ 广告</h2>
<p>当前大环境下，就业形势严峻，尤其针对即将毕业的大学生。作为一个技术求职者，求职前应该做好哪些准备呢，一些面试实战技巧也十分有必要！而刚好最近掘金出了一本《技术人求职指南》小册，相信一定会对在找工作的你有所帮助。</p>
<p>从求职到拿下 <code>Offer</code>，一本职场的全方位攻略，快来和我一起学习吧！</p>
<figure><figcaption></figcaption></figure>
]]></content>
    <category term="好物周刊"/>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
  <entry>
    <title type="text">2023 年刊</title>
    <id>https://cunyu1943.github.io/weekly/2023/</id>
    <link href="https://cunyu1943.github.io/weekly/2023/"/>
    <updated>2023-08-27T01:05:55.000Z</updated>
    <published>2023-08-27T01:05:55.000Z</published>
  </entry>
</feed>